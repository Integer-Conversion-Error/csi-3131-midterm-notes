Front,Back,Reversible
Why do computer systems need mass storage?,For permanently storing files and data.,y
What types of secondary storage do modern computers use?,Hard disks (HDDs) and nonvolatile memory (NVM) devices.,y
How do secondary storage devices vary in terms of data transfer granularity?,Character at a time vs. block of characters.,y
How do secondary storage devices vary in terms of access method?,Sequentially vs. randomly.,y
How do secondary storage devices vary in terms of data transfer timing?,Synchronously vs. asynchronously.,y
How do secondary storage devices vary in terms of usage?,Dedicated vs. shared.,y
How do secondary storage devices vary in terms of write capability?,Read-only vs. read-write.,y
What is the speed characteristic of secondary storage compared to other computer components?,It is the slowest major component of the computer.,y
What is a requirement for the OS regarding device control?,It needs to provide a wide range of functionality for device control.,y
What are the key goals of an OS I/O subsystem concerning interfaces?,To provide the simplest interface possible to the rest of the system.,y
What are the key goals of an OS I/O subsystem concerning performance?,"To optimize I/O for maximum concurrency, as devices are a performance bottleneck.",y
Define Mass storage.,The nonvolatile storage system of a computer.,y
What are the main components of a mass-storage system?,"Secondary storage, specifically HDDs and NVM devices.",y
"What is tertiary storage, and what are some examples?","Slower, larger storage systems such as magnetic tape, optical disks, and cloud storage.",y
What is the general term for all types of non-volatile storage?,"Non-volatile storage (NVS) or ""storage drives"".",y
Define hard disk drive (HDD).,"Secondary storage device based on mechanical components (spinning magnetic media platters, moving read-write heads).",y
Define nonvolatile memory (NVM).,Persistent storage based on circuits and electric charges.,y
What is the shape of an HDD platter?,Flat circular (like a CD).,y
What are common platter diameters for HDDs?,1.8 to 3.5 inches.,y
What are the surfaces of an HDD platter covered with?,Magnetic material.,y
How is information stored and read on an HDD?,"Stored by recording magnetically, read by detecting magnetic patterns.",y
Where are read-write heads located on an HDD?,"They ""fly"" just above each surface of every platter.",y
Define disk arm (HDD).,"HDD component holding read-write head, moves over cylinders of platters.",y
How is an HDD platter surface logically divided?,Into circular tracks.,y
How are HDD tracks further subdivided?,Into sectors.,y
Define cylinder (HDD).,"On HDD, set of tracks under read-write heads on all platters in device.",y
"Approximately how many cylinders are on an HDD, and how many sectors per track?",Thousands of concentric cylinders; hundreds of sectors per track.,y
"What is the characteristic size of an HDD sector, and what is its role in data transfer?","Fixed size, and it is the smallest unit of transfer.",y
"What were common HDD sector sizes, and what is the current trend?","Commonly 512 bytes until ~2010, then migrating to 4KB.",y
What are typical storage capacities for HDDs?,Gigabytes and terabytes.,y
"What mechanism spins HDD platters, and at what speed?","A disk drive motor, spinning at high speeds (60 to 250 times per second, measured in RPM).",y
What are common rotational speeds (RPM) for HDDs?,"5,400, 7,200, 10,000, 15,000 RPM.",y
Describe a power-saving feature found in some HDDs.,Some drives power down when not in use and spin up on an I/O request.,y
How does HDD rotation speed relate to data transfer?,"Rotation speed is related to the transfer rate, which is the rate data flows between the drive and the computer.",y
Define transfer rate.,Rate at which data flows.,y
What are other important performance aspects of HDDs besides transfer rate?,Positioning time or random-access time.,y
Define positioning time (HDD).,"On HDD, time for read-write head to position over desired track.",y
What are the two components of HDD positioning time?,Seek time and rotational latency.,y
Define seek time (HDD).,"On HDD, time for read-write head to position over desired cylinder.",y
Define rotational latency (HDD).,"On HDD, time for read-write head (once over desired cylinder) to access desired track.",y
What are typical performance figures for HDDs in terms of transfer rate and latency?,"Tens to hundreds of MB/sec transfer rate, and several milliseconds for seek and rotational latency.",y
How is HDD performance increased?,By using DRAM buffers in the drive controller.,y
How does an HDD read-write head operate without touching the platter?,It flies on a thin cushion (microns) of air/gas.,y
Define head crash (HDD).,"On HDD, mechanical problem: read-write head touching platter.",y
What are the consequences of an HDD head crash?,"It's normally irreparable, requiring the entire disk to be replaced, and data is lost unless backed up or RAID protected.",y
Describe the typical physical enclosure of an HDD.,They are typically sealed units.,y
"What is a ""removable"" HDD?",An HDD that can be removed from some chassis without shutting down the system.,y
What are examples of other removable media besides HDDs?,"CDs, DVDs, and Blu-ray discs.",y
Are published disk performance numbers always accurate for real-world usage?,"No, they are not always the same as real-world performance.",y
How do stated disk transfer rates compare to effective transfer rates?,Stated transfer rates are always higher than effective transfer rates.,y
Define effective transfer rate.,"Actual, measured transfer rate of data between two devices.",y
What is the distinction between published transfer rate and effective transfer rate?,"Published transfer rate refers to bits read directly from the magnetic media, while effective transfer rate refers to the rate at which blocks are delivered to the OS.",y
What is a key characteristic distinguishing NVM devices from HDDs?,NVM devices are electrical rather than mechanical.,y
What are NVM devices typically composed of?,A controller and flash NAND die semiconductor chips that store data.,y
Define Solid-State Disk (SSD).,Disk-drive-like storage device using flash-memory-based nonvolatile memory.,y
Define USB drive.,Nonvolatile memory in form of device plugging into USB port.,y
"Where else can NVM devices be found, particularly in mobile devices?","Surface-mounted on motherboards, as seen in smartphones.",y
What are the advantages of NVM devices over HDDs?,"More reliable (no moving parts), faster (no seek/rotational latency), and consume less power.",y
What are the disadvantages of NVM devices compared to HDDs?,More expensive per MB and generally less capacity than larger HDDs.,y
What is the current trend regarding NVM capacity and price?,"NVM capacity has increased faster, and its price has dropped quicker, leading to increasing use.",y
"Where are SSDs commonly used, and why?","In laptops for smaller, faster, and energy-efficient systems.",y
What can limit the throughput of NVM devices despite their inherent speed?,Standard bus interfaces can limit their throughput.,y
How do some NVM devices overcome bus interface limitations?,"By connecting directly to the system bus (e.g., PCIe).",y
How is NVM technology influencing computer design?,"It's changing computer design, allowing for direct disk replacement and new cache tiers.",y
What are some challenges associated with NAND semiconductors used in NVM?,Storage and reliability challenges.,y
How do NVM devices read and write data?,"In ""page"" increments, similar to how HDDs use sectors.",y
What is a critical characteristic of NAND cells regarding data modification?,Data cannot be overwritten directly; NAND cells must be erased first.,y
"How is data erased on NVM devices, and how does its speed compare to read/write operations?","Erasure occurs in ""block"" increments (several pages) and is much slower than read/write operations.",y
How do NVM flash devices achieve parallel operations?,"They consist of many dies and many datapaths, enabling parallel operations.",y
What is a major limitation of NAND semiconductors in terms of lifespan?,"They deteriorate with every erase cycle, typically lasting about 100,000 program-erase cycles.",y
How is NVM lifespan measured?,In Drive Writes Per Day (DWPD).,y
Define Drive Writes Per Day (DWPD).,"How many times the drive capacity can be written per day before failure, typically within its warranty period.",y
Provide an example calculation for DWPD.,A 1 TB NAND drive with a 5 DWPD rating means 5 TB/day can be written for the warranty period.,y
How are the limitations of NAND semiconductors (like erase cycles) managed?,"By ameliorating algorithms, usually implemented in the NVM device controller, which are transparent to the OS.",y
How does the OS interact with NVM devices regarding block management?,"The OS reads and writes logical blocks, and the device controller manages the physical mapping and operations.",y
What causes performance variations in NVM devices?,The operating algorithms within the device controller.,y
Define flash translation layer (FTL).,"For nonvolatile memory, a table tracking currently valid blocks, maintained by the controller, mapping physical pages to currently valid logical blocks.",y
What information does the FTL track regarding physical blocks?,"It tracks which physical blocks contain only invalid pages, indicating they can be erased.",y
"What happens when an SSD is full and a write operation is pending, if a block contains no valid data?","The write waits for an erase operation, then occurs.",y
"What happens when an SSD is full and a write operation is pending, if no free blocks exist but individual pages hold invalid data?","Garbage collection occurs, where good data is copied to other locations, freeing blocks for erase/writes.",y
Define garbage collection (NVM).,Recovery of space containing no-longer-valid data on NVM devices.,y
What technique is used to solve NVM write performance issues and improve it?,Over-provisioning.,y
Define over-provisioning (NVM).,"In non-volatile memory, space set aside for data writes not counted in device free space.",y
What happens to blocks that become totally invalid through garbage collection or write operations?,They are erased and placed in the over-provisioning space or returned to the free pool.,y
How does over-provisioning space benefit NVM device lifespan?,It helps with wear leveling.,y
Define wear leveling (NVM).,"In nonvolatile memory, effort to select all NAND cells over time as write targets to avoid premature media failure.",y
How does the NVM controller implement wear leveling?,It uses algorithms to place data on less-erased blocks to distribute wear evenly.,y
How do NVM devices protect data integrity?,"They provide error-correcting codes (ECC), which are calculated and stored with data to detect and correct errors.",y
What happens if an NVM page frequently exhibits correctable errors?,It is marked as bad and not used in subsequent writes.,y
What is a risk associated with a single NVM device regarding data?,"Catastrophic failure is possible, which can corrupt or prevent reading/writing of data.",y
How can data on NVM devices be made recoverable from catastrophic failure?,By using RAID protection.,y
What type of memory is sometimes used as a mass-storage device despite its volatility?,DRAM.,y
Define RAM drives (RAM disks).,Sections of system's DRAM presented as secondary storage devices.,y
How can RAM drives be utilized by the OS?,As raw block devices or with file systems.,y
"What is the primary purpose of RAM drives, despite their volatility?",To allow users or programmers to place data in memory for temporary safekeeping using standard file operations.,y
For what common tasks are RAM drives particularly useful?,For temporary files and sharing data.,y
Provide examples of how RAM drives are implemented in major operating systems.,"Linux uses /dev/ram; macOS uses diskutil; Windows uses third-party tools; Solaris and Linux often use /tmp as a ""tmpfs"" RAM drive at boot.",y
Define magnetic tape.,"Magnetic media storage device (tape spooled on reels, passing over read-write head); mostly for backups.",y
What was magnetic tape's historical role in secondary storage?,It was an early secondary-storage medium.,y
What are two key characteristics of magnetic tape regarding data persistence and capacity?,It is nonvolatile and holds large quantities of data.,y
How does magnetic tape access time compare to main memory and drives?,It is slow compared to main memory and drives.,y
Provide a comparison of magnetic tape random access speed to HDDs and SSDs.,"Random access is approximately 1,000 times slower than HDDs and 100,000 times slower than SSDs.",y
What are the main uses of magnetic tapes today?,"Backup, storing infrequently used information, and transferring information between systems.",y
Describe the physical mechanism of magnetic tape operation.,"Tape is kept in a spool, wound and rewound past a read-write head.",y
What is a significant time drawback of magnetic tape access?,Moving to the correct spot on the tape can take minutes.,y
How do tape drive read/write speeds compare to HDDs once positioned?,"Once positioned, tape drives can read and write at speeds comparable to HDDs.",y
What are typical capacities for magnetic tapes?,They can exceed several terabytes.,y
What feature in some magnetic tapes can increase their effective storage capacity?,"Built-in compression, which can double the effective storage.",y
How are magnetic tapes categorized?,"By width (e.g., 4, 8, 19mm; 1/4, 1/2 inch) or by technology (e.g., LTO-6, SDLT).",y
How are secondary storage devices attached to a computer?,By a system bus or an I/O bus.,y
Define I/O bus.,Physical connection of I/O device to computer system.,y
List common types of I/O buses used for secondary storage.,"Advanced Technology Attachment (ATA), Serial ATA (SATA), eSATA, Serial Attached SCSI (SAS), Universal Serial Bus (USB), and Fibre Channel (FC).",y
Define Advanced Technology Attachment (ATA).,Older-generation I/O bus.,y
Define eSATA.,Type of I/O bus.,y
Define Serial-Attached SCSI (SAS).,Common type of I/O bus.,y
Define Universal Serial Bus (USB).,Type of I/O bus.,y
Define Fibre Channel (FC).,Type of storage I/O bus used in data centers to connect computers to storage arrays.,y
What is currently the most common I/O bus for secondary storage?,SATA.,y
What special fast interface is used for NVM devices due to their higher speed?,NVM Express (NVMe).,y
Define NVM Express (NVMe).,High-speed I/O bus for NVM storage.,y
How does NVMe improve NVM device performance?,"It directly connects the device to the system PCI bus, which increases throughput and decreases latency.",y
What manages data transfers on the I/O bus for storage devices?,Special electronic processors called controllers or host-bus adapters (HBA).,y
Define controller (I/O).,Special processor managing I/O devices.,y
Define host bus adapter (HBA).,Device controller installed in host bus port to allow device connection to host.,y
Define host controller.,"I/O-managing processors within a computer (e.g., inside HBA).",y
Define device controller.,I/O managing processor within a device.,y
How does a computer initiate a mass storage I/O operation?,"The computer places a command into the host controller, typically via memory-mapped I/O ports.",y
"After receiving a command, what does the host controller do?",It sends the command via messages to the device controller.,y
What is the role of the device controller in an I/O operation?,It operates the drive hardware to fulfill the command.,y
What component do device controllers typically have to improve performance?,A built-in cache.,y
Where does data transfer occur within the drive itself?,Between the device controller's built-in cache and the storage media.,y
How is data transferred from the device controller's cache to the host computer?,"At fast electronic speeds, via Direct Memory Access (DMA) between the cache and the host's DRAM.",y
How are storage devices logically addressed by the operating system?,As large one-dimensional arrays of logical blocks.,y
Define logical blocks.,Logical addresses used to access blocks on storage devices.,y
What does each logical block map to physically on a storage device?,A physical sector (on HDDs) or a semiconductor page (on NVM devices).,y
"Describe the typical logical-to-physical mapping for HDDs (e.g., Sector 0).","Sector 0 is typically the first sector of the first track on the outermost cylinder. Mapping proceeds sequentially through the track, then the rest of the tracks on that cylinder, then the rest of the cylinders (from outermost to innermost).",y
How is NVM physical addressing mapped to logical blocks?,"A tuple (chip, block, page) is mapped to an array of logical blocks.",y
"What is Logical Block Address (LBA), and why is it preferred?","A logical address used to access blocks on storage devices, which is easier for algorithms than physical addresses like sector/cylinder/head tuples or chip/block/page tuples.",y
"Is converting LBA to old-style disk addresses (cylinder, track, sector) straightforward?","No, it is difficult in practice.",y
Why is converting LBA to physical cylinder/track/sector addresses difficult in practice?,"Because defective sectors are hidden by substituting spare sectors (making LBA sequential but physical non-sequential), the number of sectors per track is not constant on some drives, and disk manufacturers internally manage the LBA to physical address mapping, creating little direct relationship.",y
What assumption do algorithms dealing with HDDs typically make about logical and physical addresses?,"They assume logical addresses are relatively related to physical addresses, meaning ascending logical addresses imply ascending physical addresses.",y
Define Constant Linear Velocity (CLV).,Device-recording method: constant bit density per track by varying rotational speed.,y
In what types of drives is CLV typically used?,CD-ROM and DVD-ROM drives.,y
Define Constant Angular Velocity (CAV).,"Device-recording method: medium spins at constant velocity, bit density decreases inner to outer tracks.",y
In what types of drives is CAV typically used?,Hard disks.,y
What is the trend for sectors per track and cylinders per disk with advancing technology?,They are increasing.,y
How many cylinders can large disks have?,Tens of thousands.,y
What are the primary responsibilities of the OS for HDDs to ensure efficient hardware use?,To minimize access time and maximize data transfer bandwidth.,y
What two main components contribute to access time in HDDs/mechanical storage?,Seek time and rotational latency.,y
"Define ""seek time"" in HDD operations.",The time required for the device arm to move the read/write heads to the desired cylinder.,y
"Define ""rotational latency"" in HDD operations.",The additional time needed for the disk platter to rotate the desired sector into position under the read/write head.,y
"How is ""device bandwidth"" defined for storage devices?",The total amount of data transferred divided by the total time between the first request for service and the completion of the last transfer.,y
How can the OS improve HDD access time and bandwidth?,By managing the order of storage I/O requests.,y
What happens when a process requires I/O from a storage device?,It issues a system call to the operating system.,y
What information does an I/O request typically include?,"Input/output direction, an open file handle, a memory address, and the amount of data.",y
What occurs if the drive/controller is available when an I/O request is made?,The request is serviced immediately.,y
What happens to new I/O requests if the drive/controller is busy?,New requests are placed in a queue.,y
"In a multiprogramming system, what is commonly found in the device queue?",Pending I/O requests.,y
What is the primary benefit of maintaining a queue of I/O requests for a device driver?,"It allows device drivers to improve performance by ordering requests, primarily by avoiding unnecessary head seeks.",y
How do modern HDD interfaces differ from past ones regarding direct physical access control?,"Past interfaces allowed the host to specify track/head, necessitating significant disk scheduling effort. Modern drives do not expose these controls, mapping Logical Block Addresses (LBAs) to physical addresses internally.",y
What are the current key goals of disk scheduling algorithms?,"Fairness, timeliness, and optimizations (e.g., bunching sequential reads/writes).",y
What type of I/O operation do disk drives perform best with?,Sequential I/O.,y
"Is it generally possible to have absolute knowledge of head, physical block, or cylinder locations on modern drives?","No, it is generally not possible.",y
What approximation do operating systems use regarding Logical Block Addresses (LBAs) and physical disk locations on modern drives?,"Increasing LBAs generally correspond to increasing physical addresses, and close LBAs equate to physical proximity.",y
Which disk scheduling algorithm is considered the simplest?,"First-Come, First-Served (FCFS) or FIFO.",y
How fair is the FCFS disk scheduling algorithm?,It is intrinsically fair.,y
Does FCFS disk scheduling typically provide the fastest service?,"No, it generally does not provide the fastest service.",y
What is a significant performance problem associated with FCFS disk scheduling?,"It often leads to ""wild swings"" in head movement, resulting in high total head movement and suboptimal performance.",y
"Describe the ""SCAN algorithm"" for HDD I/O scheduling.","A disk I/O scheduling algorithm where the disk head moves from one end to the other, servicing requests along the way, and then reverses direction upon reaching an end, continuing to service requests.",y
What is another common name for the SCAN algorithm?,The elevator algorithm.,y
"In the SCAN algorithm, how quickly is a request serviced if it's located immediately in front of the head's current direction?",It is serviced almost immediately.,y
What happens to a request located just behind the head's current direction in the SCAN algorithm?,"It must wait until the arm moves to the end of the disk, reverses its direction, and then travels back to service the request.",y
"With a uniform distribution of requests, what pattern is observed in the SCAN algorithm immediately after the head reverses direction?",There are typically few requests immediately in front of the head because those requests were likely serviced during the previous sweep.,y
"In the SCAN algorithm, where is the heaviest density of pending requests typically found, and why?","At the other end of the disk (the end opposite to where the head just reversed), because those requests have generally waited the longest.",y
"Describe ""Circular SCAN (C-SCAN) scheduling.""","A variant of the SCAN algorithm designed for more uniform wait times. The disk head moves from one end to the other, servicing requests, but upon reaching the other end, it immediately returns to the beginning of the disk without servicing any requests on the return trip.",y
How does C-SCAN conceptually model the disk cylinders?,It essentially treats the cylinders as a circular list.,y
What is the primary advantage of C-SCAN over SCAN regarding wait times?,It provides more uniform wait times for requests.,y
Are most of the existing disk-scheduling algorithms widely used in practice?,"No, many exist but are rarely used.",y
Is it always practical to compute the optimal order for a given list of disk requests?,"An optimal order can be defined, but the computational cost may not justify the performance savings compared to simpler algorithms like SCAN.",y
What key factors heavily influence the performance of a disk-scheduling algorithm?,The number and types of I/O requests.,y
How do all disk scheduling algorithms behave when there is only one outstanding request in the queue?,"They all behave like FCFS (First-Come, First-Served).",y
"Which disk scheduling algorithms are generally preferred for heavy disk loads, and why?","SCAN and C-SCAN, because they are better at handling heavy loads and are less likely to cause starvation.",y
"Can starvation still occur with algorithms like SCAN and C-SCAN, and what did Linux introduce to address this?","Yes, starvation is still possible. Linux introduced the ""deadline"" scheduler to mitigate this.",y
"What type of separate queues does the Linux ""deadline"" scheduler maintain?",Separate read and write queues.,y
"Why does the Linux ""deadline"" scheduler prioritize read requests?",Because processes are more likely to block (wait) on read operations.,y
"How are the primary queues in the Linux ""deadline"" scheduler sorted?","They are sorted in Logical Block Address (LBA) order, which effectively implements a C-SCAN-like behavior.",y
"How does the Linux ""deadline"" scheduler typically send I/O requests to the disk?","All I/O requests are sent in batches, sorted by LBA order.",y
"Detail the four types of queues maintained by the Linux ""deadline"" scheduler.","Two read queues (one sorted by LBA, one by FCFS) and two write queues (one sorted by LBA, one by FCFS).",y
"What check does the Linux ""deadline"" scheduler perform after processing each batch of I/O?","It checks if any FCFS requests are older than a configured age (by default, 500 ms).",y
"What action does the Linux ""deadline"" scheduler take if an FCFS request is found to be older than its deadline?",The LBA queue (either read or write) associated with that old request is selected for the next batch of I/O operations to prevent starvation.,y
Which I/O scheduler was the default in Linux RedHat 7?,The Deadline I/O scheduler.,y
"Besides Deadline, what other I/O schedulers were included in RHEL 7?",NOOP and Completely Fair Queueing (CFQ) scheduler.,y
"When is the NOOP scheduler preferred, and for what type of storage?","It is preferred for CPU-bound systems utilizing fast storage devices, such as Non-Volatile Memory (NVM) devices.",y
"What is the ""Completely Fair Queueing (CFQ)"" scheduler, and where is it typically used as default?","It is the default I/O scheduler in Linux kernel 2.6 and later, commonly used as the default for SATA drives.",y
"What are the three queues maintained by the CFQ scheduler, and how are they sorted?","Real time, best effort (default), and idle. They are sorted by insertion sort in LBA order.",y
"Describe the priority scheme among CFQ's three queues, and what is a potential consequence?","Each queue has exclusive priority: real time is highest, followed by best effort, then idle. Starvation is still possible within this scheme.",y
How does the CFQ scheduler use historical data to optimize I/O?,It anticipates whether a process will issue more I/O requests soon.,y
"When CFQ anticipates future I/O from a process, what optimization does it perform, and what are the underlying assumptions?","It idles, waiting for new I/O from that specific process, and temporarily ignores other queued requests. This action minimizes seek time and assumes locality of reference per process.",y
What is the primary goal of disk-scheduling algorithms for HDDs?,To minimize disk head movement.,y
What is a key physical difference between NVM devices and HDDs that impacts scheduling?,NVM devices have no moving disk heads.,y
What is the common scheduling policy used by NVM devices?,"Simple FCFS (First-Come, First-Served) policy.",y
Define the Linux NOOP scheduler.,"A Linux NVM scheduling algorithm that uses FCFS (First-Come, First-Served) and merges adjacent requests.",y
How do read and write service times differ in uniformity on NVM devices?,"Read service times are uniform, while write service times are not uniform due to flash memory properties.",y
What is a common strategy employed by some SSD schedulers regarding read and write requests?,Merge only adjacent write requests and service all read requests in FCFS order.,y
What are the two main types of I/O access patterns?,Sequential and random.,y
"For which types of devices is sequential access optimal, and why?","Mechanical devices (e.g., HDD, tape), because data is typically near the read/write head, minimizing movement.",y
IOPS,"Stands for **input/output operations per second**. It is a measure of random access I/O performance, representing the number of inputs plus outputs per second.",y
What effect does random access I/O have on HDD performance?,"It causes significant HDD disk head movement, leading to slower performance.",y
How does random access I/O performance compare between NVM devices (like SSDs) and HDDs? Provide a quantitative example.,"Random access I/O is much faster on NVM devices. HDDs typically achieve hundreds of IOPS, while SSDs can achieve hundreds of thousands of IOPS.",y
Why do NVM devices show less performance advantage for raw sequential throughput compared to random access?,"Because HDDs already minimize head seeks during sequential operations, reducing NVM's comparative advantage in this area.",y
What is the approximate performance advantage of NVM devices over HDDs specifically for sequential reads?,NVM performance is approximately 10x better than HDD for sequential reads.,y
"How does writing to NVM compare to reading from NVM in terms of speed, and what is the consequence?","Writing to NVM is slower than reading, which decreases NVM's overall performance advantage.",y
How consistent is HDD write performance over the device's lifespan?,Consistent throughout the device's life.,y
What factors cause NVM write performance to vary?,Device fullness (influenced by garbage collection and over-provisioning) and 'wear'.,y
How does the performance of a worn NVM device compare to a new one?,A worn NVM device has much worse performance than a new device.,y
How can the lifespan and performance of NVM devices be improved in relation to file deletion?,"The file system can inform the device when files are deleted, allowing the device to proactively erase blocks.",y
Why must garbage collection occur on NVM devices?,To reclaim space from invalid data.,y
What complex operations might a single write trigger on an NVM device when garbage collection is involved?,"Reading of pages, writing of good data to overprovisioning space, erasing of an all-invalid-data block, and placing that block into overprovisioning space.",y
"Summarize the I/O operations involved in a single write request on an NVM device, considering the impact of garbage collection.","A single write request involves the page write of the new data, plus one or more page reads and one or more page writes performed by garbage collection to move good data.",y
Define write amplification.,"The creation of additional I/O requests by NVM devices (due to garbage collection and space management), which can greatly impact write performance.",y
What is the worst-case scenario for write amplification?,Several extra I/Os being triggered with each write request.,y
What makes error detection and correction fundamental?,"They are fundamental to memory, networking, and storage systems.",y
Define Error Detection.,"The process of determining if a problem has occurred, such as data corruption (e.g., a bit change in DRAM, a network packet change, or a data block change).",y
What actions can a system take upon detecting an issue?,"It can halt operation, report the error, or warn of a failing/failed device.",y
How do memory systems detect errors?,Using parity bits.,y
What is the function of a parity bit associated with each byte?,It records the even/odd number of 1s in that byte.,y
How is a single-bit error detected using parity bits?,The calculated parity changes and no longer matches the stored parity.,y
How is damage to a stored parity bit detected?,The damaged stored parity bit will not match the newly computed parity for the data.,y
What type of errors are guaranteed to be detected by parity bits?,All single-bit errors.,y
Can double-bit errors be detected by parity bits?,They might go undetected.,y
How is parity calculated?,By XORing bits.,y
What extra memory is required for parity error detection?,An extra bit of memory per byte.,y
What general term includes parity as a form of error detection?,Checksums.,y
Define Checksum.,"A general term for an error detection and correction code that uses modular arithmetic to compute, store, and compare values on fixed-length words. Parity is one form of checksum.",y
What is another error-detection method besides parity?,Cyclic Redundancy Checks (CRCs).,y
Define Cyclic Redundancy Check (CRC).,An error-detection method that uses a hash function to detect multiple-bit errors.,y
Define Error-Correction Code (ECC).,"A code that detects and corrects problems. It is a value calculated from data bytes, written with the data, and then recalculated later to check for changes. ECC contains enough information to identify changed bits and calculate correct values if few bits are corrupted.",y
What does error correction require?,Algorithms and extra storage.,y
What factors cause ECC codes to vary?,The extra storage needed and the number of errors they can correct.,y
How do disk drives utilize ECC?,They use per-sector ECC.,y
How do flash drives utilize ECC?,They use per-page ECC.,y
When is ECC written during a write operation?,"When the controller writes a sector or page, the ECC value, calculated from the data, is written along with it.",y
What happens with ECC when a sector or page is read?,The ECC is recalculated from the read data and compared with the stored ECC value.,y
What does an ECC mismatch indicate?,"That the data is corrupted, and the storage media may be bad.",y
What is a soft error?,"A recoverable error that ECC can correct, often by retrying the operation.",y
What is a hard error?,"A non-correctable, unrecoverable error, signaled when ECC cannot correct too many changes, possibly resulting in data loss.",y
Who is responsible for ECC processing on read/write operations?,The controller automatically performs it.,y
What frequently differentiates consumer and enterprise products in terms of data integrity?,Error detection and correction capabilities.,y
"Besides storage, where else is ECC used?","In some systems, for DRAM error correction and data path protection.",y
What are the OS responsibilities in storage device management?,"Drive initialization, booting from drive, and bad-block recovery.",y
What is the initial state of a new storage device before data can be stored?,"A blank slate (e.g., platter of magnetic material, uninitialized semiconductor cells).",y
What must happen to a storage device before data can be stored on it?,"It must be divided into sectors so the controller can read/write. For NVM, pages must be initialized and an FTL created.",y
Define: low-level formatting,Initialization of a storage medium for computer storage. It fills the device with special data structures for each storage location.,y
Define: physical formatting,Initialization of a storage medium for computer storage. It fills the device with special data structures for each storage location.,y
What components make up the special data structure for each storage location (sector/page) created during low-level formatting?,"Header, data area, and trailer.",y
What information do the header and trailer contain in a storage data structure?,"Controller information (sector/page number, error detection/correction code).",y
When is low-level formatting typically performed on most drives?,At the factory during the manufacturing process.,y
What does factory low-level formatting enable the manufacturer to do?,Test the device and initialize mapping from logical block numbers to defect-free sectors/pages.,y
What are common sector sizes for storage devices?,512 bytes and 4KB.,y
What is the advantage of using a larger sector size?,"Fewer sectors per track, fewer headers/trailers, and more space available for user data.",y
What are the three steps an OS needs to perform to record its own data structures on a storage device?,"1. Partitioning, 2. Volume creation and management, 3. Logical formatting (or creation of a file system).",y
Define: partition,"Logical segregation of storage space into multiple areas, treated by the OS as separate devices.",y
Provide examples of how partitions can be used.,"One partition for OS executable code (file system), another for swap space, and another for user files.",y
Where is partition information stored on a storage device?,In a fixed format at a fixed location on the device.,y
What Linux command is used to manage partitions?,`fdisk`.,y
What does the OS do after recognizing a device and reading its partition information?,"It creates device entries (e.g., `/dev` in Linux).",y
What configuration file tells Linux to mount partitions?,`/etc/fstab`.,y
Define: mounting,Making a file system available for use by logically attaching it to the root file system.,y
Define: volume,"A container of storage; often a device with a mountable file system. Can be implicit (file system directly in a partition) or explicit (e.g., multiple partitions/devices in a RAID set).",y
What Linux tool provides volume management features?,`lvm2`.,y
What file system integrates volume management?,ZFS.,y
Define: logical formatting,"Creation of a file system in a volume to ready it for use, where the OS stores initial file-system data structures onto the device.",y
What initial data structures does the OS store during logical formatting?,Maps of free/allocated space and an initial empty directory.,y
How does partition information indicate if a partition contains a bootable file system?,It indicates if the partition contains the OS.,y
What happens once a partition labeled for boot is mounted?,"It is used to establish the root of the file system, and device links for all other devices/partitions are created.",y
What constitutes a computer's 'file system'?,All mounted volumes.,y
How does Windows name its volumes?,"Separately via letters (e.g., C:, D:, E:).",y
How are file systems typically mounted in Linux?,"The boot file system is mounted at boot, and other file systems are mounted within the tree structure.",y
Define: cluster,"In Windows storage, a power-of-2 number of disk sectors collected for I/O optimization. More broadly, file systems group blocks into larger chunks called clusters.",y
How does device I/O differ from file system I/O?,Device I/O is via blocks; file system I/O is via clusters.,y
What is the benefit of grouping blocks into clusters for file system I/O?,Assures more sequential-access and fewer random-access characteristics.,y
What strategy do file systems use to reduce HDD head seeks?,They group file contents near metadata.,y
Define: raw disk,Direct access to a secondary storage device as an array of blocks with no file system. This allows special programs to use a partition as a large sequential array of logical blocks.,y
Define: raw I/O,"Input/output operations performed directly on a raw disk, bypassing file-system services.",y
What are common use cases for raw disk and raw I/O?,Swap space and some database systems (to control exact record location).,y
What file-system services are bypassed by raw I/O?,"Buffer cache, file locking, prefetching, space allocation, file names, and directories.",y
What is the purpose of allowing applications to use raw I/O?,It allows them to implement their own special-purpose storage services on a raw partition.,y
How does Linux provide similar access to raw I/O?,Via the `DIRECT` flag to the `open()` system call.,y
Define: bootstrap,"The steps taken at computer power-on to bring the system to full operation, starting with an initial program called the bootstrap loader.",y
Where is the initial bootstrap loader typically stored?,"In NVM flash memory firmware on the motherboard, mapped to a known memory location.",y
What does the bootstrap firmware typically initialize?,"CPU registers, device controllers, and main memory contents.",y
What is the role of the tiny bootstrap loader?,It brings in the full bootstrap program from secondary storage.,y
Where is the full bootstrap program stored?,In 'boot blocks' at a fixed location on the device.,y
Define: boot disk,A disk with a boot partition and kernel to load for booting.,y
Define: system disk,"A storage device with a boot partition, which can store the OS for booting.",y
What does the bootstrap NVM code do to load the OS?,"It instructs the storage controller to read the boot blocks into memory (without device drivers loaded), then executes that code.",y
What is the role of the full bootstrap program?,"It is more sophisticated and loads the entire OS from a non-fixed location, then starts the OS.",y
Define: boot partition,A storage device partition containing an executable operating system and its device drivers.,y
Define: master boot record (MBR),"Windows boot code, stored in the first logical block (or first page for NVM) of a boot partition. It contains boot code, a partition table, and a flag for the boot partition.",y
Define: boot sector,"The first sector of a Windows boot device, containing bootstrap code that directs to the kernel.",y
What does the system's firmware do at the beginning of the Windows boot process?,It directs the system to read boot code from the MBR.,y
"What is a common type of storage device failure, more frequent than complete disk failure?",One or more sectors becoming defective.,y
When do disks typically come with bad blocks?,Most disks come from the factory with bad blocks.,y
"How were bad blocks handled on older disks (e.g., IDE controllers)?","Manually, by scanning the disk for bad blocks during formatting and flagging them as unusable.",y
What Linux program is used to search for and lock away bad blocks that develop during operation?,`badblocks`.,y
What typically happens to data on bad blocks when handled manually?,It is usually lost.,y
How do more sophisticated disks handle bad-block recovery?,"The controller maintains a list of bad blocks (initialized at factory, updated over life) and replaces bad sectors logically with spare sectors.",y
Define: bad block,"An unusable sector on an HDD (or non-functional bits, bytes, pages on NVM devices).",y
Define: sector sparing,"Replacement of an unusable HDD sector with another sector elsewhere on the device, typically a spare sector set aside during low-level formatting.",y
What is another term for 'sector sparing'?,Forwarding.,y
How does a device controller replace a bad sector with a spare sector?,"After detecting a bad sector (e.g., via ECC error), the controller logically replaces it. Subsequent requests for the original logical block are then translated to the replacement sector's address.",y
What is a potential consequence of the controller redirecting bad blocks?,It could invalidate OS disk-scheduling optimization.,y
Where are spare sectors typically located on disks?,"A few spare sectors in each cylinder, and a spare cylinder.",y
"When a bad block is remapped, where does the controller try to use a spare sector from?",The same cylinder if possible.,y
Define: sector slipping,"Renaming of sectors to avoid using a bad sector, by remapping all subsequent sectors down one spot to free up space, and then mapping the bad sector to the newly freed space.",y
What happens in the case of an unrecoverable hard error on a storage device?,"Data on that block is lost, and the file using the block must be repaired (e.g., from backup), requiring manual intervention.",y
How does bad block management differ for NVM devices compared to HDDs?,"It is simpler, as there is no seek time performance loss due to remapping.",y
How are replacement locations handled for bad pages on NVM devices?,"Multiple pages are set aside as replacement locations, or space from the over-provisioning area is used.",y
What does the controller for NVM devices do with bad pages?,It maintains a table of bad pages and never sets them as available to write to.,y
Define swapping.,Moving entire processes between secondary storage and main memory.,y
When does swapping typically occur?,"When physical memory is critically low, processes are moved to swap space to free memory.",y
How do modern operating systems generally implement 'swapping'?,"Modern operating systems combine swapping with virtual memory, typically swapping pages rather than entire processes.",y
Are the terms 'swapping' and 'paging' used interchangeably?,"Yes, often.",y
Define swap-space management.,A low-level operating system (OS) task of managing space on secondary storage for swapping and paging.,y
How does virtual memory utilize secondary storage?,As an extension of main memory.,y
What is the impact of drive access speed on system performance when using swap space?,"Drive access is much slower than memory access, which significantly decreases system performance when using swap space.",y
What is the main goal for swap space design and implementation?,To provide the best throughput for the virtual memory system.,y
Does swap space usage vary between operating systems?,"Yes, it is used differently by OS depending on their memory-management algorithms.",y
What kind of data do older 'swapping systems' (not paging) typically hold in swap space?,The entire process image (code and data segments).,y
What do 'paging systems' store in swap space?,Pages pushed out of main memory.,y
How much swap space is typically needed?,It varies from a few megabytes (MB) to gigabytes (GB).,y
What factors determine the amount of swap space needed?,"Physical memory, virtual memory backing, and virtual memory usage.",y
Is it safer to overestimate or underestimate the required swap space?,It is safer to overestimate.,y
What are the consequences of running out of swap space?,The system may abort processes or crash.,y
What is the consequence of overestimating swap space?,"It primarily wastes secondary storage space, with no other harm.",y
What was Solaris's general recommendation for swap space amount?,Swap space equal to virtual memory exceeding pageable physical memory.,y
What was a past recommendation for Linux swap space amount?,Double the physical memory.,y
How has the amount of swap space typically used by Linux changed today compared to the past?,Considerably less is used today due to changes in paging algorithms.,y
Do some operating systems allow multiple swap spaces?,"Yes, some OS (e.g., Linux) allow multiple swap spaces.",y
What forms can multiple swap spaces take in an OS like Linux?,They can be swap files on a regular file system or dedicated swap partitions.,y
Where are multiple swap spaces usually located for optimal performance?,On separate storage devices.,y
"What is the purpose of having multiple swap spaces, especially on separate storage devices?",To spread the I/O load from paging/swapping over the system's I/O bandwidth.,y
What are the two main places where swap space can reside?,Carved out of a normal file system (as a large file) or in a separate raw partition.,y
How is swap space managed when it resides as a file within a normal file system?,"Normal file-system routines are used to create, name, and allocate space for it.",y
Define raw partition.,A partition within a storage device that does not contain a file system.,y
What is a key structural characteristic of swap space located in a raw partition?,It has no file system or directory structure.,y
How are blocks allocated and deallocated for swap space in a raw partition?,A separate swap-space storage manager handles the allocation and deallocation of blocks.,y
What is the primary optimization goal for algorithms used by a raw partition swap-space manager?,"Speed, rather than storage efficiency.",y
How does the access frequency of swap space in a raw partition compare to file systems?,It is accessed more frequently than file systems.,y
"What type of fragmentation might increase with swap space in a raw partition, and why is it considered acceptable?","Internal fragmentation may increase, but it is acceptable because the data life is shorter, and fragmentation is short-lived (reinitialized at boot time).",y
What is a characteristic of the raw-partition approach concerning the amount of swap space?,It allocates a fixed amount of swap space during disk partitioning.,y
How can more swap space be added when using the raw-partition approach?,By repartitioning the device (which may involve moving or destroying other partitions) or by adding another swap space elsewhere.,y
Are operating systems flexible in terms of swap space location? Provide an example.,"Yes, some OS (e.g., Linux) are flexible and can swap in both raw partitions and file-system space.",y
What is the main trade-off when choosing between file system allocation and raw partitions for swap space?,The convenience of file system allocation/management versus the performance of raw partitions.,y
How did traditional UNIX kernels manage swapping?,They copied entire processes between contiguous disk regions and memory.,y
How did later UNIX systems evolve their swap management?,They evolved to a combination of swapping and paging as paging hardware became available.,y
What significant changes did Solaris 1 introduce regarding swap management?,It changed standard UNIX methods for efficiency and technological developments.,y
"In Solaris 1, how were text-segment (code) pages handled when a process executed and subsequently selected for pageout?","They were brought from the file system, accessed in memory, and then discarded ('thrown away') if selected for pageout.",y
Why was it more efficient for Solaris 1 to 'throw away' text-segment pages rather than write them to swap space?,It was more efficient to reread the page from the file system than to write it to swap space and then reread it.,y
For what specific type of memory was swap space primarily used as a backing store in Solaris 1?,Pages of anonymous memory.,y
Define anonymous memory.,"Memory not backed by any file (e.g., stack, heap, uninitialized data of a process). Dirty pages paged out from anonymous memory are stored in swap space.",y
What was the biggest change in later Solaris versions regarding swap space allocation?,"Swap space is allocated only when a page is forced out of physical memory, not when the virtual memory page is first created.",y
What is the benefit of the later Solaris swap space allocation scheme?,"It provides better performance on modern computers, which typically have more physical memory and thus page less frequently.",y
How is Linux's swap space use similar to Solaris?,Swap space is primarily used only for anonymous memory.,y
What types of swap areas does Linux allow?,"Linux allows one or more swap areas, which can be a swap file on a regular file system or a dedicated swap partition.",y
What are 'page slots' in Linux swap-space management?,A series of 4-KB slots within each Linux swap area designed to hold swapped pages. It's part of the data structure tracking swap-space use.,y
What is a 'swap map' in Linux swap-space management?,"An array of integer counters associated with each Linux swap area, used to track swap-space use.",y
"In a Linux swap map, what does a counter value of 0 indicate?",The corresponding page slot is available.,y
"In a Linux swap map, what does a counter value greater than 0 indicate?",The corresponding page slot is occupied by a swapped page.,y
"In a Linux swap map, what does the specific integer value of a counter (if > 0) signify?","It indicates the number of mappings to the swapped page (e.g., a value of 3 means it's mapped to 3 processes if it's shared memory).",y
What are the three ways computers access secondary storage?,"Host-attached, network-attached, and cloud storage.",y
Define host-attached storage.,Storage accessed through local I/O ports (directly attached to a computer).,y
What is the most common local I/O port for host-attached storage?,SATA.,y
How can a system gain more storage access beyond its typical few SATA ports?,"By connecting individual storage devices, devices in a chassis, or multiple drives in a chassis via USB, FireWire, or Thunderbolt.",y
What kind of I/O architectures are used by high-end workstations and servers that need more/shared storage?,Sophisticated I/O architectures.,y
What is Fibre Channel (FC)?,A high-speed serial architecture (optical fiber or copper cable) used in data centers to connect computers to storage arrays.,y
What are the benefits of Fibre Channel (FC)?,"Large address space, switched communication, and the ability to attach multiple hosts/storage devices to the fabric, providing flexibility in I/O communication.",y
Name some devices suitable for host-attached storage.,"HDDs, NVM devices, CD/DVD/Blu-ray/tape drives, and storage-area networks (SANs).",y
How are I/O commands for host-attached storage directed?,Reads/writes of logical data blocks are directed to specifically identified storage units (via bus ID or target logical unit).,y
Define Network-Attached Storage (NAS).,Storage accessed from a computer across a network.,y
What types of systems can a NAS device be?,A special-purpose storage system or a general computer system providing storage to other hosts.,y
How do clients typically access NAS?,Via a remote-procedure-call (RPC) interface.,y
Name common RPC interfaces used for NAS.,NFS (for UNIX/Linux) and CIFS (for Windows).,y
How are RPCs for NAS typically carried?,"Via TCP/UDP over an IP network, usually within the same LAN.",y
How is a NAS unit usually implemented?,As a storage array with RPC interface software.,y
What features do CIFS and NFS provide for NAS?,"Locking features, allowing file sharing between hosts accessing the NAS.",y
What is a key convenience of NAS for LAN computers?,"It provides a convenient way to share a storage pool, offering ease of naming and access.",y
What is a downside of NAS compared to some direct-attached storage?,It is less efficient and has lower performance.,y
What is iSCSI?,The latest network-attached storage protocol that uses the IP network protocol to carry the SCSI protocol.,y
What does iSCSI use instead of SCSI cables for interconnects between hosts and storage?,IP networks.,y
How do hosts treat storage accessed via iSCSI?,"As if it were directly attached, even if it is distant.",y
What is the difference in data transfer between NFS/CIFS and iSCSI?,"NFS/CIFS present a file system and send parts of files, whereas iSCSI sends logical blocks across the network, allowing the client to use blocks directly or create a file system.",y
Define Cloud storage.,"Storage accessed over the Internet/WAN to a remote, shared data center, often provided for a fee or free. It is similar to network-attached storage but accessed differently.",y
How does cloud storage differ from NAS in terms of access and presentation?,"NAS is accessed as another file system (CIFS/NFS) or raw block device (iSCSI), with the OS integrating these protocols. Cloud storage is API based, meaning programs use APIs to access it.",y
Name some examples of cloud storage services.,"Amazon S3, Dropbox, Microsoft OneDrive, Apple iCloud.",y
Why do cloud storage services typically use APIs instead of existing protocols like NFS/CIFS?,Due to WAN latency and the higher likelihood of failure scenarios.,y
For what type of networks are NAS protocols (NFS/CIFS) designed?,"LANs, which have lower latency and less connectivity loss.",y
What can happen if a LAN connection fails when using NFS/CIFS?,The system might hang.,y
How do applications handle failures with cloud storage?,"Failures are more likely, and the application typically pauses access until connectivity is restored.",y
"What is a drawback of NAS, especially in large client-server installations?","Storage I/O consumes data network bandwidth, increasing network communication latency, and server-client communication competes with server-storage communication.",y
What is a Storage-Area Network (SAN)?,"A private network connecting servers and storage units, using storage protocols rather than networking protocols. It is a local-area storage network allowing multiple computers to connect to storage devices.",y
What is the primary strength of a SAN?,Flexibility.,y
What can attach to the same SAN fabric?,Multiple hosts and storage arrays.,y
How is storage allocated to hosts in a SAN?,It is dynamically allocated.,y
What types of drives are found in storage arrays?,RAID protected or unprotected drives (Just a Bunch of Disks - JBOD).,y
What is Just a Bunch of Disks (JBOD)?,Unprotected drives in a storage array.,y
What is the function of a SAN switch?,It allows or prohibits access between hosts and storage.,y
Provide an example of how a SAN can be configured to help a host.,"If a host is low on disk space, the SAN can be configured to allocate more storage to it.",y
How do SANs facilitate sharing for server clusters?,Clusters of servers can share the same storage.,y
How do SANs typically compare to storage arrays in terms of ports and cost?,SANs typically have more ports and higher cost.,y
"What are the typical characteristics of SAN connectivity regarding distance, routing, and number of connected hosts?","Short distances, typically no routing, and NAS can have more connected hosts than SAN.",y
What is a storage array?,"A purpose-built device that includes SAN/network ports (or both) and contains drives to store data, along with controller(s) to manage storage and access.",y
What components are found within storage array controllers?,"CPUs, memory, and software.",y
Name some features implemented by storage array controllers' software.,"Network protocols, UIs (user interfaces), RAID, snapshots, replication, compression, deduplication, and encryption.",y
What types of drives can some storage arrays include?,SSDs.,y
What are the characteristics of a storage array with only SSDs?,Maximum performance but smaller capacity.,y
How is a mix of SSDs and HDDs typically managed in a storage array?,"Array software or the administrator selects the best medium for data, or SSDs are used as cache and HDDs as bulk storage.",y
What is the most common SAN interconnect?,Fibre Channel (FC).,y
Which SAN interconnect is increasing in use due to its simplicity?,iSCSI.,y
What is InfiniBand (IB)?,A special-purpose bus architecture that provides hardware and software support for high-speed interconnection networks between servers and storage units.,y
What does it mean that attaching many drives to a computer is economically feasible?,It creates opportunities for improving data read/write rate through parallel operation and improving data storage reliability through redundant information on multiple drives.,y
What is the benefit of redundant information on multiple drives?,Failure of one drive does not lead to data loss.,y
Define Redundant Arrays of Independent Disks (RAID).,"RAID is a disk organization technique where two or more storage devices work together, usually with protection from device failure.",y
What was the primary use of RAIDs in the past?,"RAIDs were used as a cost-effective alternative to large, expensive disks by utilizing arrays of small, cheap disks.",y
What are the primary uses of RAIDs today?,RAIDs are used for higher reliability and data-transfer rates.,y
"What does the 'I' in RAID stand for today, and what did it stand for in the past?","Today, 'I' stands for 'independent'. In the past, it stood for 'inexpensive'.",y
How does the chance of disk failure in a multi-disk RAID array compare to a single disk?,The chance of some disk failing in an array of N disks is greater than the chance of a single disk failing.,y
Define Mean Time Between Failures (MTBF).,MTBF is the statistical mean time a device is expected to work correctly before failing.,y
Why is storing only one copy of data on a disk array unacceptable?,Each disk failure would lead to significant data loss.,y
What is the solution to prevent data loss when a disk fails in a multi-disk system?,"Introduce redundancy by storing extra information not normally needed, which is used to rebuild lost information if a disk fails.",y
Are RAIDs applicable to NVM devices?,"Yes, RAIDs are applicable to NVM (Non-Volatile Memory) devices, which are less likely to fail than HDDs because they have no moving parts.",y
What is the simplest and most expensive redundancy technique?,Mirroring.,y
Define mirroring.,"Mirroring is a storage RAID protection technique where two physical devices contain the same content; if one fails, data is read from the other.",y
What is a mirrored volume?,A mirrored volume is a volume in which two devices are mirrored.,y
When does data loss occur in a mirrored volume?,Data is lost only if the second drive fails before the first failed drive is replaced and its data restored.,y
What factors determine the Mean Time Between Failures (MTBF) of a mirrored volume (where failure means data loss)?,The MTBF of individual drives and the mean time to repair (average time to replace a failed drive and restore data).,y
Define Mean Time To Repair.,Mean time to repair is the statistical mean of time to repair a device.,y
Define Mean Time To Data Loss.,Mean time to data loss is the statistical mean of time until data is lost.,y
What are some reasons why drive failures might not be independent in a RAID system?,"Power failures, natural disasters, and manufacturing defects can cause correlated failures. Additionally, as drives age, their probability of failure grows, increasing the chance of a second failure during repair.",y
What is a particular concern regarding power failures in RAID systems with writes in progress?,"If writes are in progress to the same block on both drives and power fails before both are written, it can lead to an inconsistent state.",y
How can the issue of inconsistent state during power failures in RAID systems be resolved?,"One solution is to write one copy first, then the next. Another is to add a solid-state nonvolatile cache to the RAID array, assuming the cache has its own error protection/correction (ECC, mirroring).",y
How does parallel access to multiple drives improve performance in RAID?,"It improves the overall performance, for example, by doubling the read request rate in mirroring (reads can be sent to either drive).",y
How does mirroring affect the transfer rate per read versus the reads per unit time?,"The transfer rate per read remains the same as a single drive, but the number of reads per unit time is doubled because requests can be sent to either drive.",y
How do multiple drives improve transfer rate beyond mirroring?,They improve transfer rate by striping data.,y
Define data striping.,Data striping is the splitting of data across multiple devices.,y
What is the simplest form of data striping?,Bit-level striping.,y
Define bit-level striping.,"Bit-level striping is the splitting of data at the bit level, where each bit is stored on a separate device.",y
How does an 8-drive array with bit-level striping function as a single logical drive?,It is treated as a single drive with 8 times the normal sector size and 8 times the access rate.,y
Define block-level striping.,"Block-level striping is the splitting of data at the block level, where each block is stored on a separate device.",y
What is the most commonly available form of data striping?,Block-level striping.,y
What are the two main goals of parallelism in a storage system via striping?,"1. Increase the throughput of multiple small accesses (e.g., page accesses) by load balancing. 2. Reduce the response time of large accesses.",y
What are RAID levels?,RAID levels are various types of RAID protection.,y
Describe RAID level 0.,RAID level 0 consists of drive arrays with block-level striping but no redundancy. It offers high performance but no protection against data loss.,y
Describe RAID level 1.,"RAID level 1 is drive mirroring. It duplicates data across two drives, providing high reliability at a high cost (double the storage space).",y
What is the core idea behind RAID level 4 (and RAID 5 and 6) regarding error correction?,"It uses memory-style error-correcting-code (ECC) organization, where blocks are striped across drives, and the ECC calculation result (parity) is stored on an extra drive.",y
How does RAID 4 handle a single drive failure or damaged sector?,"If one drive fails, ECC recalculation detects the error and prevents data from being passed. If a single sector is damaged, its data can be disregarded and recalculated using parity by computing the parity of corresponding bits from other drives.",y
How do block reads and large reads/writes perform in RAID 4?,"Block reads access only one drive, allowing others to process requests. Large reads and writes achieve high transfer rates as all disks read/write in parallel.",y
What is a disadvantage of small independent writes in RAID 4?,"Small independent writes are not parallel, requiring a read-modify-write cycle.",y
Define read-modify-write cycle.,"A read-modify-write cycle is a write of data smaller than a block that requires the entire block to be read, modified, and then written back.",y
How many drive accesses are typically required for a single small write in RAID 4 due to the read-modify-write cycle?,Four drive accesses: two to read (old data and old parity) and two to write (new data and new parity).,y
What is an advantage of RAID 4 used by WAFL (Write Anywhere File Layout) file system?,"It allows seamless drive addition, as new drives can be added with zeros, which does not change the parity calculation for existing data.",y
"What are two key advantages of RAID 4 over RAID 1, considering they offer equal data protection?",1. Reduced storage overhead: one parity drive serves several regular drives (vs. one mirror for every drive). 2. Faster transfer rate: reads/writes of a series of blocks spread over multiple drives (N-way striping) are N times faster than RAID 1.,y
What is a performance problem associated with RAID 4 and other parity-based RAIDs?,"The expense of computing and writing XOR parity, which can slow down write operations.",y
How are the performance issues of parity-based RAIDs mitigated today?,"Modern CPUs are fast enough that the performance hit is minimal. Many RAID storage arrays/HBAs include dedicated parity hardware and NVRAM caches that buffer writes and gather data into full stripes to write concurrently, avoiding most read-modify-write cycles.",y
Describe RAID level 5.,"RAID level 5 is block-interleaved distributed parity. It spreads both data and parity among all N+1 drives, rather than dedicating a single drive for parity.",y
How is parity distributed in RAID 5?,"For each set of N blocks of data, one drive stores the parity block for that set, while the others store data blocks. The parity block cannot be stored on the same drive as any of the data blocks it protects within that stripe.",y
What is the primary benefit of distributing parity across all drives in RAID 5 compared to RAID 4?,"It avoids the overuse and potential bottleneck of a single parity drive, which is a problem in RAID 4, improving write performance.",y
Which RAID level is the most common parity RAID?,RAID level 5.,y
Describe RAID level 6.,"RAID level 6 is a P + Q redundancy scheme. Like RAID 5, it distributes data and parity, but stores an extra set of redundant information for multiple drive failures, using Galois field math to calculate the second (Q) parity.",y
What mathematical concept is used in RAID 6 to calculate the second parity block (Q)?,Galois field math.,y
What is the primary advantage of RAID 6 in terms of failure tolerance?,A RAID 6 system can tolerate the failure of two drives without data loss.,y
What is Multidimensional RAID level 6?,"It is an amplification of RAID level 6, typically used in arrays with hundreds of drives. It logically arranges drives into rows and columns and implements RAID 6 horizontally (across rows) and vertically (down columns) to recover from multiple failures.",y
Describe RAID levels 0+1 and 1+0.,"They are combined RAID levels designed to offer both performance (from RAID 0) and reliability (from RAID 1). RAID 0+1 stripes a set of drives then mirrors the entire stripe. RAID 1+0 mirrors drives in pairs, then stripes across those mirrored pairs.",y
Which combined RAID level offers theoretical advantages for single drive failures?,"RAID 1+0. If a single drive fails in RAID 0+1, the entire stripe becomes inaccessible, leaving only the mirrored copy. In RAID 1+0, only the single failed drive is unavailable, but its mirror is still functional, and the rest of the drives remain available.",y
List the four main ways RAID can be implemented.,1. Volume-management software (in kernel/system software). 2. HBA (Host Bus Adapter) hardware. 3. Storage array hardware. 4. SAN (Storage Area Network) interconnect layer via drive virtualization devices.,y
Define snapshot in the context of file systems.,A snapshot is a read-only view of a file system at a particular point in time.,y
Define replication in file systems.,Replication is the automatic duplication and synchronization of data over a network to another system.,y
What are the two types of replication and how do they differ?,"1. Synchronous replication: A block is considered written only after it's been written locally AND remotely. 2. Asynchronous replication: Writes are grouped and written periodically, allowing for faster local writes but potential data loss if the primary site fails before writes are replicated.",y
How does replication compare to RAID as a protection method?,"Replication protects against data loss and can increase read performance by allowing reads from replicas. However, it typically uses more storage than most RAID configurations.",y
Define hot spare.,"A hot spare is an unused storage device ready to be used to recover data (e.g., in a RAID set) automatically without human intervention.",y
What is the importance of rebuild performance when selecting a RAID level?,"Rebuild performance, which is the time to rebuild data if a drive fails, is critical for systems requiring a continuous data supply (e.g., high-performance databases). It also influences the overall Mean Time Between Failures (MTBF) of the RAID system.",y
"Which RAID level has the easiest rebuild performance, and why?",RAID 1 (mirroring) has the easiest rebuild performance because data can simply be copied from the healthy mirrored drive.,y
"Which RAID levels require accessing all other drives for rebuild, and how long can this process take?","RAID levels 4, 5, and 6 require accessing all other drives to rebuild. Rebuild times for large RAID 5 sets can take hours.",y
When is RAID level 0 typically used?,"RAID level 0 is used in high-performance applications where data loss is not critical, such as scientific computing.",y
When is RAID level 1 commonly preferred?,"RAID level 1 is popular for applications requiring high reliability with fast recovery, such as small databases, despite its high space overhead.",y
When are RAID levels 0+1 and 1+0 used?,"They are used where both performance and reliability are important, such as with small databases, but at a higher cost due to the doubled drive requirement.",y
When is RAID level 5 often preferred?,RAID level 5 is often preferred for moderate data volumes.,y
Which RAID levels are most common in storage arrays today?,"RAID 6 and Multidimensional RAID 6 are most common in storage arrays due to their good performance, robust protection, and efficient space utilization compared to mirroring.",y
What is a characteristic innovation of the InServ storage array (HP 3Par)?,"It does not require drives to be configured at a specific RAID level. Instead, each drive is broken into 256-MB 'chunklets,' and RAID is applied at the chunklet level.",y
How does the chunklet approach in InServ arrays enhance flexibility?,"A single drive can participate in multiple and various RAID levels simultaneously, as its chunklets can be used for different volumes and RAID configurations.",y
What kind of snapshots does InServ provide?,"InServ provides both read-write and read-only snapshots, allowing multiple hosts to mount copies of a file system without own copies (changes handled by copy-on-write).",y
Define utility storage.,"Utility storage is an InServ feature where storage space can be increased as needed. An administrator configures a host with a large logical storage, but initially, only a small amount of physical storage is allocated, with more added on demand.",y
What are the benefits of utility storage?,"It reduces the drives needed by hosts initially, delays drive purchases, and allows drives to be added/removed without the file system noticing.",y
"Beyond traditional disk arrays, to what other storage devices have RAID concepts been generalized?",RAID concepts have been generalized to arrays of tapes and broadcast data over wireless networks (where blocks are split and broadcast with parity units).,y
What kind of problems does RAID NOT protect against?,"RAID does not protect against logical errors such as wrong file pointers, wrong pointers within file structure, incomplete writes ('torn writes'), or accidental overwrites of file system structures.",y
What is a significant risk with hardware RAID controller failures or software RAID bugs?,"Such failures or bugs can lead to total data loss, as RAID primarily protects against physical media errors, not other hardware or software errors.",y
What is Solaris ZFS?,"Solaris ZFS is an advanced file system, first included as part of Solaris, known for its innovative approach using checksums for data integrity.",y
How does ZFS use checksums for data integrity?,"ZFS maintains internal checksums of all blocks (data and metadata). These checksums are not kept with the checksummed block itself, but are stored with the pointer to the block (e.g., in an inode).",y
Define inode.,"In many file systems, an inode is a per-file data structure holding most of the metadata of the file.",y
How does ZFS detect and correct data corruption using checksums and mirroring?,"If ZFS reads a data block and its checksum is incorrect, the file system knows there's a problem. If the data is mirrored and one copy has an incorrect checksum while the other is correct, ZFS automatically updates the bad block with the good one.",y
What are the benefits of ZFS's comprehensive checksumming throughout its structures?,"It provides higher consistency, more robust error detection, and automatic error correction capabilities compared to traditional RAID implementations or standard file systems.",y
What other Linux file system has a similar checksum feature to ZFS?,The Linux BTRFS file system.,y
What is a common issue with most traditional RAID implementations regarding flexibility?,"They often lack flexibility in managing storage space, for example, making it difficult to change volume sizes or adapt to changing file system requirements over time.",y
How does ZFS address the lack of flexibility in traditional RAID and volume management?,"ZFS combines file-system management and volume management. Drives or partitions are gathered into 'pools' of storage, and the entire pool's free space is available to all ZFS file systems within that pool, eliminating artificial limits and the need to relocate/resize.",y
Define pool in ZFS.,"In ZFS, a pool refers to drives, partitions, or RAID sets that can contain one or more file systems.",y
What additional storage management features does ZFS provide for file systems within a pool?,"ZFS provides quotas to limit the size of a file system and reservations to assure its growth, both of which can be changed by the file-system owner at any time.",y
What is object storage?,"Object storage is an approach where data is placed into a storage pool as self-contained 'objects,' designed for programs and accessed via an object ID, rather than navigated through a traditional file system hierarchy.",y
How does object storage differ from traditional file systems?,"In object storage, there is no way for a user or program to navigate the pool directly to find objects; objects are typically accessed via a unique object ID.",y
What are two examples of object storage management software?,Hadoop file system (HDFS) and Ceph.,y
What kind of hardware is typically used for object storage systems?,"Object storage systems typically run on commodity hardware, not traditional RAID arrays.",y
What is a key advantage of object storage in terms of capacity?,"Horizontal scalability, meaning capacity can be scaled by adding more computers with internal or external disks to the storage pool, allowing for petabyte-scale pools.",y
Define horizontal scalability.,Horizontal scalability is the ability to scale capacity by adding more items (computers) rather than expanding one existing item.,y
What is a key feature of each object in object storage systems?,"Each object is self-describing, meaning it includes a description of its content.",y
What is another term for object storage based on its retrieval method?,Content-addressable storage.,y
Define content-addressable storage.,Content-addressable storage is another term for object storage; objects are retrieved based on their contents.,y
"What type of data is typically stored in object storage, and why?","Unstructured data, because there is no set format for the contents of objects.",y
Define unstructured data.,Unstructured data is data not in a fixed format but rather free-form.,y
Give examples of where huge amounts of data are stored in object stores.,"Google search contents, Dropbox files, Spotify songs, Facebook photos, and Amazon AWS S3 (for customer applications).",y
What are the major secondary storage I/O units?,Hard disk drives (HDDs) and nonvolatile memory (NVM) devices.,y
How is modern secondary storage structured?,As large one-dimensional arrays of logical blocks.,y
How can drives be attached to a computer?,"1. Through local I/O ports on the host.
2. Directly connected to motherboards.
3. Through a communications network or storage network connection.",y
What systems generate requests for secondary storage I/O?,The file system and the virtual memory system.,y
How does each secondary storage I/O request specify the device address?,As a logical block number.,y
What do disk-scheduling algorithms aim to improve for HDDs?,"Effective bandwidth, average response time, and variance in response time.",y
How do algorithms like SCAN and C-SCAN improve HDD performance?,Via disk-queue ordering strategies.,y
How does HDD performance relate to scheduling algorithms?,It varies greatly with scheduling algorithms.,y
What are the characteristics of Solid-state disks (SSDs) in relation to moving parts and scheduling algorithms?,"They have no moving parts, and their performance varies little among different scheduling algorithms.",y
Which scheduling strategy do SSDs often use?,"A simple FCFS (First-Come, First-Served) strategy.",y
What is a common characteristic and outcome of data storage and transmission?,They are complex and frequently result in errors.,y
Define Error detection.,"The process that attempts to spot problems, alert the system for corrective action, and avoid error propagation.",y
Define Error correction.,"The process that detects and repairs problems, depending on available correction data and the amount of corruption.",y
How are storage devices typically organized?,They are partitioned into one or more chunks of space.,y
What can each partition of a storage device hold?,"A volume, or it can be part of a multidevice volume.",y
Where are file systems created?,In volumes.,y
What manages a storage device's blocks?,The Operating System (OS).,y
How are new storage devices typically supplied?,Typically pre-formatted.,y
What are boot blocks and when are they allocated?,"Blocks allocated to store the system's bootstrap program, if the device contains the Operating System (OS).",y
What action must a system take if a block or page becomes corrupted?,The system must lock it out or logically replace it with a spare.,y
"What is key to good performance in some systems, related to memory management?",Efficient swap space.,y
How do some systems implement swap space?,By dedicating a raw partition to it.,y
How do other systems implement swap space?,By using a file within the file system.,y
What other options exist for swap space implementation?,"Some systems provide both dedicating a raw partition and using a file within the file system, allowing for user/admin decision.",y
How are secondary storage devices in large systems frequently made redundant?,Via RAID algorithms.,y
What do RAID algorithms allow for in storage systems?,"They allow more than one drive for operation, and enable continued operation or automatic recovery from drive failure.",y
How are RAID algorithms organized and what does each level provide?,"They are organized into different levels, with each level providing a specific combination of reliability and high transfer rates.",y
What is Object storage used for?,"It is used for big data problems, such as Internet indexing and cloud photo storage.",y
How are objects defined and addressed in object storage?,"They are self-defining collections of data, addressed by an object ID (not a file name).",y
What method is typically used for data protection in object storage?,Replication.,y
Where do computations based on data occur in object storage systems?,On systems where a copy of the data exists.,y
"What is a key scalability characteristic of object storage, and why is it important?","It is horizontally scalable, allowing for vast capacity and easy expansion.",y
What are the two main jobs of a computer?,I/O and computing.,y
"Which of the computer's main jobs is often primary, with the other being incidental?","I/O is often primary, with computing being incidental (e.g., browsing, editing).",y
What is the operating system's role concerning I/O?,To manage and control I/O operations and devices.,y
What aspect of I/O hardware provides constraints on OS internal facilities?,I/O hardware basics.,y
What gap is bridged by OS I/O services and application I/O interfaces?,The gap between hardware and application interfaces.,y
What is the UNIX System V STREAMS mechanism?,A mechanism involving dynamic driver code pipelines.,y
What is a major operating system design concern related to devices?,Device control.,y
How does the wide variation in I/O device function and speed impact control methods?,It requires varied control methods.,y
What forms the kernel's I/O subsystem?,The varied control methods for I/O devices.,y
What is the purpose of the kernel's I/O subsystem?,To separate the kernel from device management complexities.,y
What is a key trend in I/O device technology regarding interfaces?,Increasing standardization of software/hardware interfaces.,y
What is the benefit of increasing standardization of software/hardware interfaces in I/O device technology?,It helps incorporate new device generations.,y
What is another key trend in I/O device technology besides standardization?,Increasingly broad variety of I/O devices.,y
What challenge does the increasingly broad variety of I/O devices pose?,"It is a challenge to incorporate new, unlike devices.",y
What basic I/O hardware elements accommodate diverse devices?,"Ports, buses, and device controllers.",y
How is the kernel structured to encapsulate device details and meet I/O challenges?,With device-driver modules.,y
Define 'device driver'.,An OS component providing uniform access and managing I/O to various devices.,y
What kind of interface do device drivers provide to the I/O subsystem?,A uniform device-access interface.,y
What are device drivers' uniform device-access interfaces similar to for applications?,System calls.,y
What are some common types of devices computers operate?,"Storage (disks, tapes), transmission (network, Bluetooth), and human-interface (screen, keyboard, mouse, audio).",y
How do devices communicate with a computer?,Via signals transmitted over cable or air.,y
What is a **port** in I/O hardware?,"A connection point for devices to attach to computers (e.g., serial port).",y
What is a **bus** in computer systems?,"A communication system connecting computer components (CPU, I/O devices) for data and command transfer.",y
What defines a bus beyond just being a set of wires?,"A rigidly defined protocol for messages, including electrical voltages and timings.",y
What is a **daisy chain** in device communication?,"A connection method where devices are connected in a string (A to B, B to C), usually operating as a bus.",y
What characteristics can buses vary in?,"Signaling, speed, throughput, and connection.",y
What is the primary function of a **PCIe bus** in a typical PC structure?,It connects the processor-memory subsystem to fast devices.,y
What is the primary function of an **expansion bus** in a typical PC structure?,"It connects slow devices such as keyboards, serial ports, and USB ports.",y
What is **Serial-attached SCSI (SAS)**?,A common type of I/O bus used to connect disks to a SAS controller.,y
How does PCIe transfer data?,Over 'lanes'.,y
What constitutes a 'lane' in PCIe?,"Two signaling pairs (one for receive, one for transmit), forming a full-duplex byte stream.",y
"What format do PCIe data packets use, and in what direction can data be transferred?","Eight-bit byte format, simultaneously in both directions.",y
What are the possible physical link configurations for PCIe in terms of lanes?,"1, 2, 4, 8, 12, 16, or 32 lanes (e.g., x8).",y
"What do 'generations' refer to in PCIe, and what is an example of its impact?","Different versions of the PCIe standard, impacting throughput (e.g., PCIe gen3 x8 provides 8 GB/s throughput).",y
What is a **controller** in the context of I/O hardware?,"Electronics operating a port, bus, or device. (Alternatively: A special processor managing I/O devices.)",y
Describe a serial-port controller.,It is simple and typically implemented as a single chip.,y
"What is **Fibre Channel (FC)**, and how is its controller often implemented?",FC is a storage I/O bus used in data centers to connect computers to storage arrays. Its controller is complex and often a separate circuit board called a Host Bus Adapter (HBA).,y
What components are typically found in a **Host Bus Adapter (HBA)**?,"A processor, microcode, and private memory for managing the Fibre Channel (FC) protocol.",y
Can devices have built-in controllers? Provide an example.,"Yes, some devices like a disk drive board have built-in controllers.",y
What functions does a disk controller implement and manage?,"It implements disk-side protocols (like SAS, SATA), contains microcode and a processor for tasks such as bad-sector mapping, prefetching, buffering, and caching.",y
How does a processor communicate with a controller?,Via registers (data and control registers).,y
What is one method for a CPU to communicate with I/O devices using special instructions?,Special I/O instructions that transfer a byte or word to an I/O port address.,y
What is **memory-mapped I/O**?,A device I/O method where device-control registers are mapped into the processor's address space.,y
How does the CPU interact with device-control registers in memory-mapped I/O?,It uses standard data-transfer instructions (like load/store) to read from or write to the registers at their mapped memory locations.,y
How did past PCs typically handle I/O communication methods?,They often mixed special I/O instructions and memory-mapped I/O.,y
Why is writing to graphics memory via memory-mapped I/O often preferred over I/O instructions?,Writing millions of bytes to graphics memory using standard data-transfer instructions (memory-mapped) is much faster than executing millions of special I/O instructions.,y
"What is the trend in I/O communication methods for modern systems, and why?",Systems have largely moved to memory-mapped I/O for increased efficiency.,y
How is most I/O conducted in modern systems?,Most I/O is conducted via device controllers using memory-mapped I/O.,y
What are the typically four main registers found in an I/O device controller?,"Status, control, data-in, and data-out registers.",y
What is a **data-in register**?,A device I/O register read by the host to receive input.,y
What is a **data-out register**?,A device I/O register written by the host to send output.,y
"What is a **status register**, and what kind of information do its bits indicate?","A device I/O register indicating status. Its bits indicate states such as command complete, byte available, or an error.",y
"What is a **control register**, and what are some examples of device modes that can be changed via it?","A device I/O register for the host to place commands or change device mode. Examples include full/half-duplex communication, parity settings, word length, and communication speed.",y
What is the typical size of data registers in I/O controllers?,1 to 4 bytes.,y
"What are FIFO (First-In, First-Out) chips used for in some controllers?","They hold several bytes, expanding capacity and buffering data bursts.",y
What term describes the interaction between a host and a controller?,Handshaking.,y
Describe the host's actions in the first three steps of a typical polling handshaking sequence for sending data to a device.,1. The host repeatedly reads the `busy` bit until it is clear. 2. The host sets the `write` bit in the command register and writes the byte to the `data-out` register. 3. The host sets the `command-ready` bit.,y
Describe the controller's actions in a typical polling handshaking sequence after the host has prepared data.,"1. The controller notices `command-ready` is set and sets the `busy` bit. 2. The controller reads the command, reads the `data-out` byte, and performs the I/O operation. 3. The controller clears `command-ready`, clears any `error` bit, and clears the `busy` bit.",y
What action does the host perform in the first step of a polling handshaking sequence?,"The host is **busy-waiting** or **polling**, repeatedly reading the status register until the device is ready.",y
What is **busy waiting**?,"A thread or process continuously uses the CPU while waiting, typically by repeatedly reading a status register in an I/O loop.",y
What is **polling**?,"An I/O loop where an I/O thread continuously reads a status register, waiting for I/O completion.",y
When is polling considered efficient for I/O operations?,"If the controller and device are fast (e.g., completing in as few as 3 CPU cycles).",y
When is polling considered inefficient for I/O operations?,"If the wait for the device to be ready is long and there are other CPU tasks pending, or if the device is rarely ready.",y
What is a risk associated with the host waiting too long during polling?,Risk of data loss due to buffer overflow if the host doesn't process input fast enough.,y
What is an alternative to polling for a hardware controller to notify the CPU when it's ready?,An **interrupt**.,y
What is an **interrupt**?,A hardware mechanism for a device to notify the CPU that it needs attention.,y
How does the CPU detect an interrupt request?,It senses the **interrupt-request line** after each instruction it executes.,y
What happens immediately after a controller asserts an interrupt signal on the interrupt-request line?,The CPU saves its current state and jumps to an **interrupt-handler routine** at a fixed address.,y
What are the main actions performed by an interrupt handler routine?,"It determines the cause of the interrupt, processes it, restores the CPU's saved state, and then executes a `return from interrupt` instruction.",y
"Describe the sequence of actions and roles involved in an interrupt, using the terms 'raises', 'catches', 'dispatches', and 'clears'.","A device controller *raises* an interrupt, the CPU *catches* and *dispatches* it to the appropriate handler, and the handler *clears* the interrupt.",y
What is the typical frequency of interrupts in modern systems?,Hundreds of interrupts per second.,y
What are some sophisticated features needed for modern interrupt handling?,"Deferring interrupt handling during critical processing, efficient dispatch to the proper handler, multilevel interrupts to distinguish high/low priority, and instructions (traps) to get OS attention directly for events like page faults or errors.",y
What hardware components provide sophisticated interrupt handling features?,The CPU and **interrupt-controller hardware**.,y
What is a **nonmaskable interrupt**?,"An interrupt that cannot be delayed or blocked, typically used for unrecoverable errors (e.g., memory errors).",y
What does it mean for an interrupt to be **maskable**?,"It describes an interrupt that can be temporarily delayed or blocked by the CPU for critical sequences, commonly used by device controllers.",y
What is an **interrupt vector**?,"An OS data structure indexed by an interrupt address, pointing to interrupt handlers.",y
What is the purpose of an interrupt vector?,To reduce the need for a single handler to search all possible interrupt sources.,y
What is **interrupt chaining**?,"A mechanism where an interrupt vector element points to the head of a list of handlers, and these handlers are called in sequence until one services the request.",y
What is the benefit of using interrupt chaining?,"It avoids the need for a huge interrupt vector table while still improving dispatch efficiency, especially when there are more devices than vector elements.",y
What are **interrupt priority levels** used for?,"Prioritizing interrupts for handling order, allowing low-priority interrupts to be deferred and high-priority interrupts to preempt ongoing processing.",y
How does the OS interact with interrupts during boot time?,It probes buses and installs the appropriate interrupt handlers into the interrupt vector.,y
What kind of events cause controllers to raise interrupts during I/O operations?,"Output completion, input availability, or device failures.",y
What is an **exception** in the context of interrupts?,"A software-generated interrupt caused by an error (e.g., division by zero, protected memory access) or a user program's request for an OS service.",y
What are the main responsibilities of a **First-Level Interrupt Handler (FLIH)**?,"Performing context switching, saving CPU state, and queuing the interrupt for further processing.",y
What is the main responsibility of a **Second-Level Interrupt Handler (SLIH)**?,"It performs the actual, more complex handling of the interrupt.",y
"What is a **software interrupt**, also known as a **trap**?","A software-generated interrupt used, for example, by system calls.",y
What actions does a trap (software interrupt) typically perform?,"It saves the user process's state, switches the CPU to kernel mode, and dispatches control to the appropriate kernel routine.",y
What is the typical priority of traps compared to device interrupts?,"Traps usually have a lower priority compared to device interrupts, as they are generally less urgent.",y
How are interrupt handlers implemented in a threaded kernel architecture like Solaris?,"They are implemented as kernel threads with high scheduling priorities, allowing preemption and concurrent execution on multiprocessor systems.",y
What is **programmed I/O (PIO)**?,"A data transfer method where the CPU transfers data one byte or word at a time, often by watching status bits and feeding data to the device.",y
"Why is Programmed I/O (PIO) considered wasteful for large data transfers, such as disk operations?","Because the CPU wastes time watching status bits and feeding data byte-by-byte, which is inefficient for large volumes of data.",y
What is **direct memory access (DMA)**?,An operation allowing device controllers to transfer large amounts of data directly to or from main memory without involving the main CPU in the transfer.,y
How does the host initiate a DMA transfer?,"The host writes a DMA command block to memory, specifying details like the source address, destination address, and byte count.",y
What is **scatter-gather** in DMA?,An I/O method where a DMA command block specifies a list of non-contiguous sources and/or destinations for a single transfer operation.,y
"After initiating a DMA transfer, what does the CPU do?",The CPU writes the address of the DMA command block to the DMA controller and then continues with other work.,y
How does the DMA controller perform data transfers?,"It operates the memory bus directly, performing transfers to or from main memory without involving the main CPU.",y
Is a DMA controller a common component in modern computers?,"Yes, it is a standard component.",y
What is a potential risk when a DMA transfer targets user space memory?,"There is a risk that the user space memory region could be modified by the user program during the DMA transfer, leading to data corruption.",y
"What is **double buffering** in the context of I/O, and why can it be inefficient?","Copying data twice (e.g., from a device into kernel memory, then from kernel memory to user process memory). It is inefficient due to the overhead of the second copy operation.",y
What is the trend for OS handling of direct I/O between devices and user address space?,"The OS has moved towards using memory-mapping to allow direct I/O transfers between devices and user address space, avoiding double buffering.",y
What wires are typically used for handshaking between a DMA controller and a device controller?,DMA-request and DMA-acknowledge wires.,y
What happens during a DMA handshaking sequence when a device has data ready?,"The device places a signal on the DMA-request wire. The DMA controller seizes the memory bus, places the memory address, and signals DMA-acknowledge. The device then transfers the word of data and removes the DMA-request signal.",y
How does the DMA controller signal the CPU that a transfer is complete?,The DMA controller interrupts the CPU.,y
What is **cycle stealing**?,"The temporary prevention of CPU access to main memory when a device (e.g., DMA controller) seizes the bus for data transfer.",y
"Does cycle stealing slow down the CPU, and what is the overall impact of DMA on system performance?","Yes, cycle stealing does slow down the CPU momentarily, but DMA generally improves total system performance by freeing the CPU for other tasks.",y
What two types of addresses can DMA use for transfers?,Physical addresses or **direct virtual memory access (DVMA)**.,y
"What is **direct virtual memory access (DVMA)**, and what is a unique capability it provides?",DMA that uses virtual addresses (which are translated to physical addresses) as transfer sources/destinations. It can also enable transfers directly between memory-mapped devices without involving the CPU or main memory as an intermediary.,y
What are the key concepts of I/O hardware?,"Bus, Controller, I/O port and its registers, Handshaking (between host and device controller), Handshaking execution (polling or interrupts), and Offloading large transfers to a DMA controller.",y
What is a significant challenge for OS implementers regarding I/O hardware?,"The wide variety of devices, each with unique capabilities, control-bit definitions, and communication protocols.",y
What two critical questions arise for OS implementers concerning I/O device integration?,"How to attach new devices without requiring an OS rewrite, and how to provide a uniform I/O interface to applications.",y
What is **PHY**?,"A physical hardware component connecting to a network, corresponding to OSI layer 1.",y
What is the primary goal of the Application I/O interface regarding I/O devices?,To treat I/O devices uniformly.,y
What approaches are used to achieve uniform I/O device treatment and add new devices without OS disruption?,"Abstraction, encapsulation, and software layering.",y
How does the OS achieve abstraction for I/O devices?,By identifying general kinds of devices and abstracting away their differences.,y
What is an 'interface' in the context of I/O device access?,Standardized functions used to access each kind of I/O device.,y
What are 'device drivers' in the context of I/O?,"Kernel modules that encapsulate device differences, are custom-tailored to specific devices, and export standard interfaces.",y
What is the purpose of the device-driver layer in an OS?,To hide differences among device controllers from the kernel I/O subsystem.,y
How do I/O system calls relate to device behavior and hardware differences?,"They encapsulate device behavior in generic classes, hiding hardware differences from applications.",y
What are the benefits of the I/O interface structuring techniques?,Simplifies OS development and allows hardware manufacturers to design compatible devices or write drivers for popular OS.,y
What are the main dimensions along which I/O devices vary?,"Character-stream or block, sequential or random access, synchronous or asynchronous, sharable or dedicated, speed of operation, and read-write, read only, or write once.",y
Distinguish between 'character-stream' and 'block' devices.,"Character-stream devices transfer bytes one by one, while block devices transfer a block of bytes as a unit.",y
Distinguish between 'sequential' and 'random-access' I/O.,"Sequential I/O accesses data in a fixed order determined by the device, while random-access I/O allows a user to seek to any storage location.",y
Distinguish between 'synchronous' and 'asynchronous' I/O response times.,"Synchronous I/O has predictable response times and is coordinated, while asynchronous I/O has irregular/unpredictable response times and is not coordinated.",y
Distinguish between 'sharable' and 'dedicated' I/O devices.,"Sharable devices can be used concurrently by several processes/threads, while dedicated devices cannot be used concurrently.",y
What are the three categories for read/write capabilities of I/O devices?,"Read-write (both input/output), Read only (only one data transfer direction), and Write once (written once, then read-only).",y
What are the major application access conventions for I/O devices?,"Block I/O, Character-stream I/O, Memory-mapped file access, and Network sockets.",y
What is an 'escape' or 'back door' in the context of application access conventions for devices?,A method to transparently pass arbitrary commands to a device driver when the interface lacks a standard method.,y
What is the `ioctl()` system call in UNIX?,A system call that enables an application to access any driver functionality without needing a new system call for each specific function.,y
What arguments does the `ioctl()` system call typically take?,"A device identifier (major/minor numbers), a command integer, and a pointer to a data structure.",y
What is the 'major number' in a UNIX device identifier?,It identifies the device type and routes I/O requests to the appropriate driver.,y
What is the 'minor number' in a UNIX device identifier?,It identifies a specific device instance.,y
What is the 'block-device interface' used for?,I/O to disk drives and other block-oriented devices.,y
What are the common commands for a block-device interface?,"`read()`, `write()`, and `seek()` (for random-access devices).",y
How do applications typically access block devices?,Usually via the file-system interface.,y
What is 'raw I/O'?,"Direct access to secondary storage as a linear array of blocks, bypassing the file system.",y
Why might an OS or special application prefer raw I/O?,It avoids extra buffering and redundant locking.,y
What is 'direct I/O' in UNIX?,"A mode on a file that disables OS block features like buffering and locking, serving as a compromise for raw I/O benefits.",y
How does 'memory-mapped file access' work?,"It allows access to disk storage via a byte array in main memory. A system call maps the file to memory and returns a virtual address, with data transferred only when needed (demand-paged virtual memory access).",y
What are the benefits of memory-mapped file access?,"It is efficient, convenient for programmers (simple read/write to memory), and used for kernel services like executing programs or swap space access.",y
What is the 'character-stream interface' used for?,"I/O to character devices such as keyboards, mice, modems, printers, and audio boards.",y
What are the basic system calls for a character-stream interface?,`get()` and `put()` for one character at a time.,y
How does the network I/O interface differ from disk I/O?,It typically uses different system calls and paradigms than `read()`-`write()`-`seek()`.,y
What is a 'network socket'?,"A common interface and endpoint for communication, widely used for network I/O (e.g., in UNIX and Windows).",y
List common system calls associated with the network socket interface.,"Create socket, connect local socket to remote address, listen for remote application connection, send/receive packets, and `select()`.",y
What is the purpose of the `select()` system call in network I/O?,"It manages a set of sockets, returning information on which sockets are ready (e.g., a packet is waiting, or there is room to send), thereby eliminating polling/busy waiting for network I/O.",y
What do hardware clocks and timers provide?,"Current time, elapsed time, and the ability to set a timer for operation X at time T.",y
What is a 'programmable interval timer'?,"Hardware (often provided by CPUs) used to measure elapsed time and trigger operations, typically by setting it to wait and then generate an interrupt (once or periodically).",y
How are programmable interval timers used by the OS?,"By the scheduler to preempt processes, for disk I/O to flush dirty caches, and by network stacks to cancel slow operations.",y
How does the OS support more timer requests than available hardware channels?,By simulating virtual clocks: the kernel maintains a sorted list of wanted interrupts and sets the hardware timer for the earliest pending request.,y
What is a hardware clock?,"A high-frequency counter that can be read from a device register, offering accurate time intervals.",y
What is 'high-performance event timer (HPET)'?,"A modern hardware timer provided by some PCs, typically in the 10-megahertz range, with comparators that trigger interrupts when a value matches the HPET.",y
What protocol is used to correct system clock drift?,Network Time Protocol (NTP).,y
What is a 'blocking' system call?,An I/O request that suspends the calling thread (moving it to a wait queue) until the I/O operation completes.,y
How are physical I/O actions generally characterized regarding timing?,"They are generally asynchronous, meaning they have varying and unpredictable completion times.",y
Why does the OS often provide blocking calls for the application interface?,Blocking calls are generally easier for application programmers to write.,y
Why is 'nonblocking I/O' needed for some user processes?,For applications like user interfaces or video playback that need to overlap execution with I/O and cannot afford to halt the thread.,y
What is a 'nonblocking' I/O system call?,"An I/O request that returns quickly, indicating how many bytes were transferred (which could be full, fewer, or none), without halting the calling thread.",y
What is an 'asynchronous' system call?,"An I/O request that returns immediately without waiting for the I/O operation to complete, allowing the calling thread to continue execution.",y
How is I/O completion communicated for asynchronous system calls?,"Via variable setting, a signal/software interrupt, or a callback mechanism.",y
What is the key difference between a nonblocking `read()` and an asynchronous `read()`?,"A nonblocking `read()` returns available data immediately (full, fewer, or none), while an asynchronous `read()` requests a full transfer to complete later, with the thread continuing immediately.",y
How does OS buffering of I/O optimize performance?,"The OS returns to the application immediately after buffering the I/O, completing the actual request later.",y
What is 'Vectored I/O' (or 'scatter-gather')?,"A single system call that performs multiple I/O operations involving multiple locations, accepting a vector of multiple buffers to read to or write from.",y
What are the benefits of Vectored I/O?,"It avoids context-switching and system-call overhead, eliminates the need to transfer data to a larger contiguous buffer first, and can provide atomicity (all I/O done without interruption).",y
escape,Method of passing arbitrary commands when interface lacks standard method.,y
back door,Method of passing arbitrary commands when interface lacks standard method.,y
block-device interface,Interface for I/O to block devices.,y
raw I/O,"Direct access to secondary storage as array of blocks, no file system.",y
direct I/O,"Block I/O bypassing OS block features (buffering, locking).",y
character-stream interface,"Interface for I/O to character devices (e.g., keyboards).",y
socket,Endpoint for communication; interface for network I/O.,y
programmable interval timer,Hardware timer provided by many CPUs.,y
high-performance event timer (HPET),Hardware timer provided by some CPUs.,y
network time protocol (NTP),Network protocol for synchronizing system clocks.,y
blocking (I/O),I/O request that suspends calling thread until I/O completes.,y
nonblocking (I/O),"I/O request that returns immediately with available data, allowing thread to continue.",y
Vectored I/O,One system call performs multiple I/O operations involving multiple locations.,y
scatter-gather,I/O method specifying multiple sources/destinations in one command structure.,y
What are some of the I/O-related services provided by the kernel's I/O subsystem?,"Scheduling, buffering, caching, spooling, device reservation, and error handling.",y
On what infrastructure does the kernel I/O subsystem build?,Hardware and device-driver infrastructure.,y
What is a key responsibility of the I/O subsystem regarding system integrity?,Protecting itself from errant processes and malicious users.,y
What is I/O scheduling?,Determining a good execution order for I/O requests.,y
What are the benefits of I/O scheduling?,"Improving overall system performance, providing fair device access, and reducing average waiting time.",y
How is I/O scheduling typically implemented?,By maintaining a wait queue for each device.,y
What happens to a request from a blocking I/O system call in the context of I/O scheduling?,"The request is placed on the device queue, and the I/O scheduler rearranges the queue for efficiency and average response time.",y
"Can the OS prioritize certain I/O requests over others? If so, give an example.","Yes, the OS may prioritize delay-sensitive requests, such as those from the virtual memory subsystem over applications.",y
How does the kernel manage multiple requests in asynchronous I/O?,The kernel tracks many requests.,y
"Define ""device-status table"".",Kernel data structure tracking status and queues of operations for devices.,y
What information does an entry in the device-status table typically contain?,"Device type, address, and state (e.g., not functioning, idle, busy). If busy, the request type and parameters are also stored.",y
"Beyond direct request ordering, what else does scheduling I/O operations improve?","Computer efficiency, and it also uses storage space in the main memory/storage hierarchy via buffering, caching, and spooling.",y
"Define ""buffer"".",Memory area storing data being transferred.,y
What are the main reasons for using buffering in I/O operations?,"To cope with speed mismatches between producer and consumer, to provide adaptations for different data-transfer sizes, and to support copy semantics for application I/O.",y
Provide an example of how buffering copes with speed mismatch.,"Data from a slow network can be accumulated in a buffer before being written in a single, larger operation to a fast SSD.",y
"Define ""double buffering"".",Copying data twice or using two buffers to decouple producers/consumers.,y
How does double buffering work to relax timing between a producer and consumer?,"While one buffer is being filled by the producer (e.g., network), the other buffer is being processed by the consumer (e.g., drive), and vice versa.",y
How does buffering provide adaptations for different data-transfer sizes?,By handling issues like network fragmentation and reassembly.,y
"Define ""copy semantics"".","Meaning assigned to data copying (e.g., if data can be modified after write request).",y
"Explain ""copy semantics"" in the context of application I/O.","It means that the data written to disk is the version that existed at the time of the system call, independent of any subsequent changes to the application's buffer.",y
How does the OS typically guarantee copy semantics for a `write()` system call?,"The `write()` system call copies application data to a kernel buffer before returning, and the disk write occurs from this kernel buffer.",y
"Despite overhead, why is copying data between kernel and application space common?",Due to the clean semantics it provides.,y
What is a more efficient alternative to directly copying data for buffering purposes?,Using virtual memory mapping and copy-on-write page protection.,y
"Define ""cache"".",Temporary copy of data in fast memory to improve performance.,y
What is the primary benefit of accessing a cached copy of data?,It is more efficient than accessing the original data.,y
Provide an example of how caching is used in a computer system.,"Process instructions stored on disk are cached in physical memory, and then copied to CPU caches.",y
What is the key difference between a buffer and a cache?,"A buffer may hold the only copy of data being transferred, whereas a cache holds a copy of an item that also resides elsewhere.",y
Can a memory region serve as both a buffer and a cache?,"Yes, although caching and buffering are distinct concepts, a memory region can serve both purposes.",y
How does the OS use main memory buffers in a way that involves caching?,"OS uses main memory buffers for disk data (for copy semantics and efficient scheduling), and these buffers also act as a cache to improve I/O efficiency for shared files or rapid write/reread operations.",y
"What does the kernel do when it receives a file I/O request, regarding the buffer cache?","The kernel checks the buffer cache; if the data is available there, it avoids or defers physical disk I/O.",y
How does the buffer cache optimize disk writes?,"Disk writes are accumulated in the buffer cache for seconds, allowing for more efficient write schedules.",y
"Define ""spool"".",Buffer holding output for device that cannot accept interleaved data streams.,y
"Why is spooling necessary, using a printer as an example?","A printer can only serve one job at a time, but multiple applications may try to print concurrently. Spooling coordinates this concurrent output.",y
Describe the process of spooling for printer output.,"The OS intercepts printer output, spools each application's output to a separate secondary storage file, and then the spooling system queues and copies these files to the printer one at a time.",y
How is a spooling system typically managed?,By a system daemon process or an in-kernel thread.,y
What control interfaces does the OS provide for spooling?,"The ability to display the queue, remove jobs, and suspend printing.",y
Give examples of devices that cannot multiplex I/O requests.,Tape drives and printers.,y
"Besides spooling, what explicit coordination facilities does the OS provide for devices that cannot multiplex I/O?",Support for exclusive device access.,y
Give examples of how different operating systems provide exclusive device access.,"VMS allows a process to allocate an idle device and deallocate it when done. Other OSes might limit access to one open file handle to such a device, or provide functions like Windows' `wait` for a device object or specific `OpenFile()` parameters for access types.",y
What are applications responsible for when coordinating exclusive device access?,Avoiding deadlock.,y
How does a protected memory OS handle hardware and application errors?,It guards against them to prevent system failure from minor malfunctions.,y
What are the two main types of failures for devices and I/O transfers?,"Transient (e.g., network overloaded) and permanent (e.g., defective controller).",y
How does the OS compensate for transient I/O failures?,"By retrying operations, such as a disk `read()` retry or a network `send()` resend.",y
What is the OS's ability to recover from a permanent failure of an important component?,It is unlikely to recover.,y
How do I/O system calls typically indicate success or failure?,They return a success/failure bit.,y
How does UNIX report specific error codes for I/O system calls?,"Through an integer variable called `errno`, which returns hundreds of values indicating the error type (e.g., argument out of range, bad pointer, file not open).",y
Do all OSes convey detailed hardware error information to applications?,"No, some hardware provides detailed error info, but many OSes do not convey it to the application.",y
"Define ""sense key"".",SCSI protocol info in status register indicating error.,y
What three levels of detail does SCSI protocol error reporting provide?,"Sense key (general nature of failure), additional sense code (category of failure), and additional sense-code qualifier (more detail about the failure).",y
Do SCSI devices maintain internal error-log pages? Are they frequently used?,"Yes, many SCSI devices maintain internal error-log pages, but they are seldom requested.",y
How might a user process disrupt the system related to I/O?,By issuing illegal I/O instructions.,y
What is the primary prevention mechanism against user processes issuing illegal I/O instructions?,All I/O instructions are privileged.,y
How do user programs perform I/O instructions?,They cannot issue I/O instructions directly; they must use the OS by making a system call.,y
"When a user program makes a system call for I/O, what is the OS's role?","The OS, in monitor mode, checks the request's validity, performs the I/O, and then returns control to the user.",y
How are memory-mapped and I/O port memory locations protected from user access?,By the memory-protection system.,y
"Can the kernel deny all user access to I/O, even in specific cases like graphics?","No, the kernel cannot deny all user access; for example, graphics games need direct access to memory-mapped graphics memory.",y
How might the kernel manage direct access to a specific I/O resource like graphics memory while maintaining protection?,It might provide a locking mechanism to allocate a graphics memory section to one process at a time.,y
How does the kernel keep state information on I/O components?,"Via in-kernel data structures, such as an open-file table.",y
"Besides open files, what other I/O activities do kernel data structures track?","Network connections, character-device communications, and other I/O activities.",y
What various entities does UNIX file-system access cover?,"User files, raw devices, and process address spaces.",y
How does UNIX handle the differing `read()` semantics for various entities?,It encapsulates these differences using an object-oriented technique.,y
What does a UNIX open-file record contain to handle different file types?,A dispatch table with pointers to appropriate routines based on the file type.,y
"What alternative method do some OSes, like Windows, use for I/O communication?",Message-passing.,y
Describe the process of an I/O request using message-passing.,"An I/O request is converted to a message, sent through the kernel to the I/O manager, and then to the device driver. The message contents may change along the way.",y
What is a potential drawback of message-passing for I/O compared to procedural techniques (shared data structures)?,Message-passing can have higher overhead.,y
What are the benefits of using message-passing for I/O?,"It simplifies I/O system structure and design, and adds flexibility.",y
Why is power management a critical concern in data centers?,"Due to high power costs, greenhouse gas emissions, and significant heat generation, where cooling alone can use twice as much electricity as powering the equipment.",y
How does the OS contribute to power management in cloud computing environments?,"By adjusting processing loads, evacuating user processes, and idling or powering off systems.",y
"How does the OS manage power for individual components (CPUs, external I/O devices)?",It analyzes the load and powers off components if the load is low and the hardware supports it. CPU cores can be suspended and resumed based on load.,y
What is the benefit of disabling unneeded CPU cores in servers?,It decreases electricity and cooling needs.,y
Why is power management a high priority in mobile computing?,To maximize battery life.,y
"Describe ""power collapse"" in Android power management.","It is a deep sleep state that uses marginally more power than being off, but responds to external stimuli and allows for quick wake-up.",y
How does Android achieve power collapse?,"By powering off individual components (screen, speakers, I/O subsystem) and putting the CPU in its lowest sleep state.",y
"How much power does an idle Android phone use, and how quickly does it respond?","Very little power, and it wakes quickly for calls.",y
What is the basis for Android's component-level power management?,An infrastructure that understands component relationships and usage.,y
How does Android map out the physical device topology for power management?,It builds a device tree.,y
How does Android track usage for each component in its device tree?,"Each component is associated with a device driver that tracks its usage (e.g., I/O pending to flash, open audio reference).",y
How does Android's power management decide to power off components or enter power collapse?,"If a component is unused, it's turned off. If all components on a bus are unused, the bus is turned off. If all components in the device tree are unused, the system enters power collapse.",y
"What are ""wakelocks"" in Android power management?",A mechanism for applications to temporarily prevent the system from entering power collapse.,y
"How do applications use wakelocks, and how does the kernel respond?","Applications acquire and release wakelocks, and the kernel prevents power collapse while a wakelock is held.",y
Give an example of wakelock usage in Android.,Android Market holds a wakelock during an application update.,y
What is modern power management fundamentally based on?,Device management.,y
What happens at boot time regarding hardware analysis and device tree creation for power management?,Firmware analyzes the hardware and creates a device tree in RAM.,y
How does the kernel utilize the device tree after boot?,It uses the device tree to load drivers and manage devices.,y
"Besides driver loading and basic device management, what other activities are handled related to device management?","Hot-plug (adding/subtracting devices), device state management, and power management.",y
"Define ""advanced configuration and power interface (ACPI)"".","Firmware managing hardware aspects (power, device info).",y
"What is ACPI, and what does it provide?","ACPI is an industry standard firmware that provides callable routines for the kernel, covering device state discovery/management, error management, and power management.",y
Provide an example of how the kernel interacts with ACPI.,"The kernel calls a device driver, which then calls ACPI routines, which in turn communicate with the device.",y
What is the overall role of the Kernel I/O subsystem?,It coordinates extensive services for applications and the kernel.,y
What are the key areas supervised by the Kernel I/O subsystem?,"Management of name space for files/devices, access control, operation control (e.g., modem cannot `seek()`), file-system space allocation, device allocation, buffering, caching, spooling, I/O scheduling, device-status monitoring, error handling, failure recovery, device-driver configuration and initialization, and power management of I/O devices.",y
How do the upper levels of the I/O subsystem access devices?,Via a uniform interface provided by device drivers.,y
How does the OS connect an application's I/O request to hardware like network wires or a disk sector?,"The OS connects application requests to hardware through a series of mappings and lookups, transforming high-level file names into physical device addresses and operations.",y
How does an application refer to data when reading a file from disk?,By file name.,y
What is the role of the file system in connecting application requests to hardware?,The file system maps the file name through directories to space allocation on the storage device.,y
Describe the file name to disk block mapping in MS-DOS for FAT.,"File name maps to a number, which indicates an entry in a file-access table, which then tells which disk blocks are allocated.",y
Describe the file name to disk block mapping in UNIX.,"File name maps to an inode number, and the inode contains the space-allocation information.",y
"In MS-DOS for FAT, how is the hardware device identified within a file name?","The first part of the file name (before the colon) identifies the hardware device (e.g., 'C:' for primary hard disk).",y
How is a device name like 'C:' mapped in MS-DOS?,It is mapped to a specific port address via a device table.,y
How are device name space and file-system name space structured in MS-DOS?,They are separate due to the colon separator in file names.,y
What is a benefit of the separate device and file-system name spaces in MS-DOS?,"It is easy to associate extra functionality, such as spooling for printer files.",y
How is the device name space handled in UNIX compared to MS-DOS?,"In UNIX, the device name space is incorporated into the regular file-system name space, with no clear separation of the device portion in the path name.",y
"What is a 'mount table' in UNIX, and what is its purpose?","A mount table is an in-memory data structure that associates path name prefixes with specific device names, which are also in the file-system name space. It provides information about each mounted volume, tracking file systems and access.",y
How does UNIX resolve a path name to find the associated device?,It looks up the path name in the mount table for the longest matching prefix.,y
What does a mount table entry provide during UNIX path name resolution?,"It provides a device name, which is itself part of the file-system name space.",y
"When a device name is looked up in UNIX, what information is found?","A <major, minor> device number, not an inode.",y
What does the 'major device number' identify in UNIX?,It identifies the device driver responsible for handling I/O for that device.,y
What does the 'minor device number' identify in UNIX?,"It is passed to the device driver to index into a device-specific table, often identifying a specific instance of a device or a partition.",y
What does a device-table entry provide for a device number?,It provides the port address or memory-mapped address of the device controller.,y
How do modern OS designs achieve flexibility in I/O request handling?,They use multiple stages of lookup tables and employ general mechanisms for passing requests between applications and drivers.,y
What is a key benefit of general mechanisms for passing requests in modern OS?,New devices and drivers can be introduced without requiring kernel recompilation.,y
How do some modern operating systems handle the loading of device drivers?,"They load device drivers on demand, either immediately or upon the first request.",y
How are device drivers loaded during system boot time?,"The system probes the buses and loads necessary drivers, either immediately or on the first request for a device.",y
How are devices added after boot handled by the kernel?,"They are detected by error, the kernel inspects them, and loads the appropriate driver dynamically.",y
What are the complexities associated with dynamic loading and unloading of device drivers?,"It requires more complex kernel algorithms, device-structure locking, and robust error handling.",y
What is the first step in the life cycle of a blocking read request?,The process issues a blocking 'read()' system call to the file descriptor of an opened file.,y
"What does the kernel do after a 'read()' system call, regarding the buffer cache?","The kernel system-call code checks parameters. If the requested data is already in the buffer cache, the data is returned, and the I/O is completed without physical I/O.",y
What happens if the requested data for a blocking read is not in the buffer cache?,"Physical I/O is performed. The process is removed from the run queue, placed on a wait queue for the device, and the I/O request is scheduled.",y
How does the I/O subsystem send a request to the device driver?,It sends the request via a subroutine call or an in-kernel message.,y
What are the device driver's responsibilities after receiving an I/O request?,"The device driver allocates kernel buffer space, schedules the I/O, and sends commands to the device controller by writing to device-control registers.",y
What is the role of the device controller in a read request?,"The device controller operates the device hardware to perform the data transfer (e.g., reading from disk).",y
How does the device driver monitor or manage data transfer during a read operation?,"The driver may poll for status/data, or it may set up a DMA (Direct Memory Access) transfer to kernel memory. If DMA is used, the DMA controller generates an interrupt upon transfer completion.",y
What happens when an interrupt is generated upon I/O completion?,"The correct interrupt handler receives the interrupt via the interrupt-vector table, stores the data, signals the device driver, and then returns.",y
What does the device driver do after receiving a signal from the interrupt handler?,"The device driver receives the signal, determines the completed I/O request and its status, and then signals the kernel I/O subsystem.",y
What are the kernel's final actions in handling a completed read request?,The kernel transfers the data and/or return codes to the requesting process's address space and moves the process from the wait queue to the ready queue.,y
What happens to the process after it is moved to the ready queue upon I/O completion?,"Moving the process to the ready queue unblocks it. The scheduler then assigns the CPU to the process, and it resumes execution at the point where the system call completed.",y
Which UNIX systems have the STREAMS mechanism?,UNIX System V and subsequent releases.,y
What does the STREAMS mechanism enable?,Dynamic assembly of driver code pipelines.,y
"Define ""Stream"" in the context of STREAMS.",A full-duplex connection between a device driver and a user-level process.,y
What are the main components of a Stream?,"Stream head, Driver end, and zero or more stream modules.",y
What is the function of the Stream head?,It interfaces with the user process.,y
What is the function of the Driver end?,It controls the device.,y
Where are stream modules located within a Stream?,Between the stream head and the driver end.,y
How many stream modules can be present in a Stream?,Zero or more.,y
"What does each component of a Stream (stream head, driver end, modules) contain?",A pair of queues (read queue and write queue).,y
How is data transferred between components in STREAMS?,Via message passing between queues.,y
What functionality do modules provide in STREAMS?,STREAMS processing functionality.,y
How are modules added to a stream?,They are 'pushed' onto a stream using the `ioctl()` system call.,y
Provide an example of using a stream module.,Opening a USB device (like a keyboard) via a stream and pushing a module for input editing.,y
How do adjacent modules in a stream communicate?,Through message exchange between their queues.,y
What mechanism is used to prevent queue overflow in STREAMS?,Flow control.,y
How does a queue behave without flow control?,It accepts all messages and immediately sends them to the adjacent queue without buffering.,y
How does a queue behave with flow control enabled?,It buffers messages and does not accept new messages if there isn't sufficient buffer space.,y
How is flow control implemented between adjacent module queues?,It involves control message exchanges.,y
Which system calls can a user process use to write data to a device via a stream?,`write()` or `putmsg()`.,y
What kind of data does the `write()` system call send to a stream?,Raw data (unstructured byte stream).,y
What is the specific capability of the `putmsg()` system call for writing to a stream?,It allows the user to specify a message.,y
What happens after a user process writes data to the stream head?,The stream head copies the data into a message and delivers it to the next module's queue.,y
Where does data copying continue after the stream head?,"To the driver end, and then to the device.",y
Which system calls can a user process use to read data from a stream head?,`read()` or `getmsg()`.,y
How does the `read()` system call process data from a stream?,The stream head gets a message and returns ordinary data (an unstructured byte stream).,y
What does the `getmsg()` system call return to the user process?,The message itself.,y
What is the general nature of STREAMS I/O regarding blocking?,"It is asynchronous (or nonblocking), except when communicating with the stream head.",y
Under what condition does a user process block when writing to a stream?,"If the next queue uses flow control, the user process blocks until there is room to copy the message.",y
Under what condition does a user process block when reading from a stream?,Until data is available.,y
What queues does the driver end possess?,"A read queue and a write queue, similar to stream head and modules.",y
What is a key responsibility of the driver end regarding hardware?,"It must respond to interrupts (e.g., a frame ready from a network).",y
How does the driver end's data handling differ from the stream head?,"Unlike the stream head, which may block, the driver end must handle all incoming data.",y
Do drivers in STREAMS need to support flow control?,"Yes, drivers must support flow control.",y
What happens if a device's buffer is full when using STREAMS?,"The device typically drops incoming messages (e.g., a network card).",y
What is a major benefit of STREAMS?,"It provides a framework for modular, incremental device drivers and network protocols.",y
What is a key advantage of STREAMS modules regarding reusability?,"Modules are reusable by different streams/devices (e.g., a networking module for Ethernet and 802.11 wireless).",y
"What kind of data and information can STREAMS support transfer between modules, beyond just byte streams?",Message boundaries and control information.,y
How widely supported is STREAMS in UNIX variants?,"Most UNIX variants support STREAMS, and it is preferred for protocols and device drivers.",y
Provide an example of how STREAMS is used in specific UNIX implementations.,System V UNIX and Solaris implement the socket mechanism using STREAMS.,y
Define STREAMS.,A UNIX I/O feature allowing dynamic assembly of driver code pipelines.,y
Define stream head.,The interface between STREAMS and user processes.,y
Define driver end.,The interface between STREAMS and the controlled device.,y
Define stream modules.,Modules of functionality loadable into a STREAM.,y
Define flow control in STREAMS.,"A method to pause a sender of I/O, which limits the data flow rate.",y
What is a major factor in system performance?,I/O (Input/Output).,y
What are the heavy demands I/O places on the CPU?,Executing device-driver code and scheduling processes (blocking/unblocking).,y
How do context switches impact CPU and hardware caches?,They stress the CPU and hardware caches.,y
What inefficiencies does I/O expose in the kernel?,Inefficiencies in the kernel's interrupt-handling mechanisms.,y
How does I/O affect the memory bus?,It loads the memory bus with data copies between controllers/physical memory and kernel buffers/application space.,y
What is a major concern for computer architects regarding I/O?,Graceful coping with I/O demands.,y
Why is interrupt handling considered relatively expensive?,"It involves a state change, executing the handler, and restoring state.",y
When can Programmed I/O (PIO) be more efficient than interrupt-driven I/O?,If busy waiting is minimized.,y
What overhead results from an I/O completion unblocking a process?,Full context switch overhead.,y
What is characteristic of network traffic in terms of system performance?,High context-switch rate.,y
Describe the initial steps of a remote login character being typed on the local machine.,Character typed → keyboard interrupt → interrupt handler → device driver → kernel → user process.,y
Describe the local machine's process after a user process issues a network I/O system call for a remote login character.,User process issues network I/O system call → local kernel → network layers (packet construction) → network device driver.,y
What happens after a network device driver transfers a packet for a remote login character on the local machine?,"The network device driver transfers the packet to the controller, which sends the character and generates an interrupt, and the interrupt processes back up through the kernel to complete the network I/O system call.",y
Describe the initial steps when a remote system receives a network packet for a remote login character.,Network hardware receives packet → interrupt generated.,y
What happens on the remote system after an interrupt is generated for a received remote login character?,The character is unpacked from protocols → appropriate network daemon identifies the session → passes packet to subdaemon.,y
What types of overhead occur throughout the remote login character handling process?,Context switches and state switches.,y
How does the receiver echoing a character impact work in a remote login scenario?,It doubles the work.,y
Define front-end processors.,"Small computers that perform tasks in an overall system, typically managing I/O and offloading the main CPU.",y
What are 'front-end processors' used for in some systems?,To manage terminal I/O and reduce the main CPU's interrupt burden.,y
Define terminal concentrator.,"A type of front-end processor specifically designed for terminals, which multiplexes traffic from hundreds of remote terminals into one port.",y
Define I/O channel.,"A dedicated, special-purpose CPU found in mainframes and high-end systems used for I/O or offloading the main CPU.",y
What is the primary job of an I/O channel?,To offload I/O work from the main CPU and keep data flowing smoothly.,y
How do I/O channels differ from main CPUs in terms of program processing?,"Channels process more general and sophisticated programs, which are tuned for specific I/O workloads.",y
List principles for improving I/O efficiency.,"Reduce number of context switches; reduce data copies in memory; reduce interrupt frequency; increase concurrency; move processing primitives into hardware; balance CPU, memory, bus, and I/O performance.",y
How can the number of context switches be reduced to improve I/O efficiency?,By reducing their overall occurrence.,y
How can data copies in memory be reduced to improve I/O efficiency?,By minimizing copies between the device and application space.,y
How can interrupt frequency be reduced to improve I/O efficiency?,"By using large transfers, smart controllers, or polling (if busy waiting is minimal).",y
How can concurrency be increased to improve I/O efficiency?,By using DMA-knowledgeable controllers or channels to offload data copying from the CPU.,y
How does moving processing primitives into hardware improve I/O efficiency?,It enables concurrent operation with the CPU and bus.,y
"Why is balancing CPU, memory subsystem, bus, and I/O performance important for efficiency?","Overload in one area causes idleness in others, hindering overall performance.",y
How does I/O device complexity vary?,From simple (like a mouse) to very complex (like a Windows disk driver).,y
What functionalities does a Windows disk driver manage?,"Individual disks, RAID arrays, converting requests to disk I/O, error handling, data recovery, and optimizing performance.",y
What are the three main locations where I/O functionality can be implemented?,"Device hardware, device driver (kernel), or application software (user level).",y
What are the advantages of implementing experimental I/O algorithms at the application level?,"Flexibility, bugs are unlikely to crash the system, and no reboot/reload drivers are needed after code changes.",y
What are the disadvantages of implementing experimental I/O algorithms at the application level?,"Inefficiency due to context switch overhead and lack of internal kernel data/functionality (messaging, threading, locking).",y
What is an example of a system that allows user-mode file systems for I/O functionality?,FUSE system interface.,y
What happens to I/O algorithms after they are proven at the application level?,They are often reimplemented in the kernel.,y
What is the primary advantage of implementing I/O functionality in the kernel?,Improved performance.,y
What are the challenges of implementing I/O functionality in the kernel?,"More challenging development (due to large, complex kernel) and the need for thorough debugging to avoid data corruption or system crashes.",y
Where is the highest I/O performance achieved?,With specialized implementation in hardware (device or controller).,y
What are the disadvantages of implementing I/O functionality in hardware?,"Difficulty/expense of improvements/bug fixes, increased development time, and decreased flexibility.",y
Provide an example of decreased flexibility when I/O functionality is implemented in hardware.,A hardware RAID controller may not allow the kernel to influence I/O order or location.,y
"How are I/O device speeds changing, and what is the impact?","I/O devices are increasing in speed (e.g., NVM devices nearing DRAM speed), which increases pressure on I/O subsystems and OS algorithms to leverage read/write speeds.",y
What components are crucial for I/O performance related to storage and network latency?,"CPU, caches, DRAM, NVM, PCIe, SSD, SAA, HDD.",y
What are the basic I/O hardware elements?,"Buses, device controllers, and devices.",y
How is data typically moved in an I/O system?,By the CPU (programmed I/O) or by a DMA (Direct Memory Access) controller.,y
Define a device driver.,A kernel module responsible for controlling a specific hardware device.,y
List the basic hardware categories handled by the system-call interface.,"Block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers.",y
What is the default behavior of system calls regarding process execution?,"They usually block processes, causing the calling process to sleep until the I/O operation completes.",y
When are nonblocking or asynchronous system calls utilized?,"By the kernel or applications that must not be blocked (i.e., cannot sleep) while waiting for an I/O operation.",y
Name the services provided by the kernel's I/O subsystem.,"I/O scheduling, buffering, caching, spooling, device reservation, and error handling.",y
"What is the purpose of ""name translation"" in the context of I/O?",To connect hardware devices to their symbolic file names.,y
Describe the multiple mapping levels involved in I/O name translation.,"Character-string names map to device drivers/addresses, which then map to physical addresses (I/O ports/bus controllers).",y
How is I/O name mapping handled in UNIX versus MS-DOS?,"In UNIX, mapping is typically within the file-system name space. In MS-DOS, it's in a separate device name space.",y
What is STREAMS in UNIX?,A UNIX mechanism for the dynamic assembly of driver code pipelines.,y
How do drivers function within a STREAMS pipeline?,"Drivers can be stacked, and data passes sequentially and bidirectionally through the pipeline.",y
List the reasons why I/O system calls are costly.,"Context switching across the kernel protection boundary, signal/interrupt handling, and CPU/memory load for data copying between kernel buffers and application space.",y
What is a file?,A collection of related information defined by its creator.,y
How does an OS handle files in relation to physical storage?,It maps files onto physical mass-storage devices.,y
What is a file system?,A system that describes how files map to physical devices and how they are accessed/manipulated.,y
What is a primary design goal for file systems related to physical storage?,"Efficient access, as physical storage can be slow.",y
"Besides efficient access, what are other requirements for file systems?",File sharing support and remote access.,y
What is the most visible aspect of an OS for users?,The file system.,y
What mechanism does the file system provide?,Mechanism for on-line storage and access to OS data/programs and user data.,y
What are the two main components of a file system?,A collection of files (storing related data) and a directory structure (organizing and providing information about files).,y
Where do most file systems reside?,"On nonvolatile, persistent storage devices.",y
How does the OS present stored information?,It provides a uniform logical view.,y
What logical storage unit does the OS define by abstracting physical properties?,The file.,y
Are file contents persistent? Why?,"Yes, because storage devices are usually nonvolatile.",y
Define a file from the perspective of secondary storage.,A named collection of related information recorded on secondary storage.,y
"From a user's perspective, what is the smallest allotment of logical secondary storage?","A file, as data is written only within a file.",y
What do files commonly represent?,Programs (source/object) and data.,y
What are common types of data files?,"Numeric, alphabetic, alphanumeric, and binary.",y
How can file structures vary?,They can be free form (like text) or rigidly formatted.,y
"Generally, what is a file from a data perspective?","A sequence of bits, bytes, lines, or records, with meaning defined by its creator or user.",y
Give an example of how the file concept's use has been extended beyond its original confines.,The UNIX `proc` file system uses file-system interfaces for system information access.,y
Who defines the information contained within a file?,Its creator.,y
"Does a file have a defined structure, and what does it depend on?","Yes, it has a defined structure that depends on its type.",y
What is a text file?,A sequence of characters organized into lines.,y
What is a source file?,"A sequence of functions, including declarations and executable statements.",y
What is an executable file?,A series of code sections that a loader can bring into memory and execute.,y
How are files named and referred to for human users?,"They are named and referred to by symbolic, human-readable names (e.g., `example.c`).",y
Do all operating systems differentiate file names by case?,"No, some systems differentiate case, while others do not.",y
"What is a key characteristic of a file regarding its creator, user, or system?","It is independent of its creator process, user, and system.",y
Do file attributes vary by OS?,"Yes, file attributes vary by OS.",y
"What is the ""Name"" attribute of a file?","A symbolic, human-readable name.",y
"What is the ""Identifier"" attribute of a file?","A unique, non-human-readable tag (number) that identifies the file within the file system.",y
"What is the ""Type"" attribute of a file?","An attribute indicating the file type, for systems that support different file types.",y
"What is the ""Location"" attribute of a file?",A pointer to the device and the file's specific location on that device.,y
"What is the ""Size"" attribute of a file?","The current size of the file (in bytes, words, or blocks), and possibly the maximum allowed size.",y
"What is the ""Protection"" attribute of a file?","Access-control information, specifying permissions such as read, write, or execute.",y
"What information do ""Timestamps and user identification"" attributes provide, and why are they useful?","They provide creation time, last modification time, and last use time, useful for protection, security, and monitoring.",y
"What are extended file attributes, and what are examples?","Additional metadata supported by newer file systems, such as character encoding and file checksum.",y
What is a file info window?,"A GUI view of a file's metadata (e.g., as seen in macOS).",y
Where is information about all files kept?,"In the directory structure, typically on the same device as the files themselves.",y
What does a directory entry typically contain for a file?,The file name and a unique identifier (which locates other attributes of the file).,y
How large can directory sizes be?,"They can be large, often in megabytes or gigabytes.",y
How are directories handled in memory?,They are stored on the device and brought into memory piecemeal.,y
What kind of data type is a file considered to be?,An abstract data type.,y
What are the primary system calls provided by the OS for file operations?,"Create, write, read, reposition, delete, and truncate files.",y
What two main steps are involved in creating a file?,1. Find space in the file system. 2. Make an entry for the new file in the directory.,y
Which file operations require the `open()` system call first?,All operations except create and delete.,y
What does the `open()` system call return?,"A file handle, which is used as an argument in subsequent file operation calls.",y
Describe the process of writing to a file.,"A system call is made with the open file handle and information to write. The system searches the directory for the file's location, keeps a write pointer to the next write location (for sequential access), and updates this pointer after each write.",y
What is a write pointer?,A pointer kept by the system to indicate the next location in a file for writing (for sequential access).,y
Describe the process of reading from a file.,"A system call is made with the file handle and a memory location for the next block. The directory is searched for the file entry. The system keeps a read pointer to the next read location (for sequential access), and this pointer is updated after each read.",y
What is a read pointer?,A pointer kept by the system to indicate the next location in a file for reading (for sequential access).,y
What is the current-file-position pointer?,"A per-process pointer that indicates the current location for read and write operations, shared by both.",y
"What is repositioning within a file, and what is it also known as?","It involves repositioning the current-file-position pointer to a given value, with no actual I/O involved. It is also known as file seek.",y
What is another term for repositioning within a file?,File seek.,y
Describe the process of deleting a file.,"Search the directory for the named file, release all its allocated space for reuse, and erase or mark its directory entry as free.",y
How do hard links affect file deletion?,Hard links allow multiple names for the same file; the actual content is only deleted when the last hard link to it is removed.,y
What does it mean to truncate a file?,"To erase its contents while keeping its attributes, resetting the file length to zero, and releasing its file space.",y
"Besides the minimal set (create, write, read, reposition, delete, truncate), what are other common file operations?",Appending and renaming.,y
Can primitive file operations be combined? Give an example.,"Yes, primitive operations can be combined for more complex tasks, such as copying a file.",y
What other types of operations are available for files besides content manipulation?,"Operations to get or set file attributes, such as length or owner.",y
Why is the `open()` system call used before the first use of a file?,To avoid constant directory searching.,y
What data structure does the OS use to keep track of all open files?,The open-file table.,y
How is a file specified in subsequent I/O calls after it's opened?,"By an index into the open-file table, eliminating the need for further directory searching.",y
What happens when a file is closed?,The OS removes its entry from the open-file table and releases any associated locks.,y
Do `create()` and `delete()` operations require an open file?,"No, `create()` and `delete()` operations work with closed files.",y
Do all systems require explicit `open()` and `close()` calls?,"No, some systems implicitly open/close files (e.g., upon job termination), but most systems require explicit `open()` and `close()` calls.",y
Describe the detailed steps of the `open()` system call.,"It takes the file name, searches the directory for it, and copies the file's entry to the open-file table.",y
What kind of information can the `open()` system call accept besides the file name?,"Access-mode information, such as create, read-only, read-write, or append-only.",y
What happens after access-mode info is provided to `open()`?,"The mode is checked against the file's permissions; if allowed, the file is opened.",y
What does `open()` return that is used in all subsequent I/O operations?,A pointer to the open-file table entry for that file.,y
What complicates `open()` and `close()` operations?,Simultaneous opens by multiple processes.,y
What two levels of internal tables does the OS use for open files?,"A per-process table (tracks files a process has open, current file pointer, access rights, accounting) and a system-wide open-file table (stores process-independent info like disk location, access dates, and size).",y
"When a file is opened by another process, how do the tables interact?","A new entry is created in the opening process's per-process table, which points to the existing system-wide open-file table entry for that file.",y
"What is the ""open count"" in the open-file table?",A count of the number of processes that currently have the file open.,y
"What happens to the ""open count"" when a file is closed, and what is the consequence?","The `close()` operation decreases the open count; when the count reaches zero, the file's entry is removed from the system-wide open-file table.",y
What is the purpose of file locks?,"They allow one process to lock a file or sections of a file, preventing others from accessing them.",y
When are file locks particularly useful?,"For shared files, such as a system log.",y
What is a shared lock?,"A type of file lock that multiple processes can acquire concurrently, similar to a reader lock.",y
What is an exclusive lock?,"A type of file lock that only one process can acquire at a time, similar to a writer lock.",y
What is a mandatory file-locking mechanism?,"A mechanism where the OS prevents other processes from accessing a file that is locked (e.g., in Windows).",y
What is an advisory file-locking mechanism?,"A mechanism where the OS does not prevent access to a locked file; applications must manually acquire and respect the lock (e.g., in UNIX).",y
Who is responsible for ensuring locking integrity in mandatory vs. advisory file-locking?,"In mandatory locking, the OS ensures integrity. In advisory locking, developers must ensure locks are properly used.",y
What precautions should be taken when using file locks?,"They require the same precautions as process synchronization, such as holding exclusive locks only during actual access and avoiding deadlocks.",y
Why should an OS recognize and support file types?,"To perform reasonable operations, such as preventing a binary-object program from being output as garbage.",y
What is a common technique for indicating a file's type?,"Including the type as part of the file name, using an extension (e.g., `name.extension`).",y
How does the OS use file extensions?,"To indicate the file type and allowed operations (e.g., `.com`, `.exe`, `.sh` for execution).",y
What is a shell script?,A file (often with a `.sh` extension) containing a series of ASCII commands for a shell.,y
How do application programs use file extensions?,"They use extensions to identify expected file types (e.g., Java compilers expect `.java` files).",y
What is the nature of file extensions regarding OS enforcement?,"They are generally ""hints"" to applications, not always strictly enforced by the OS.",y
How does macOS handle file type and creator information?,"Each file has a type (e.g., `.app`) and a creator attribute (the program that created it).",y
Is the macOS creator attribute enforced?,"Yes, it is set by the OS during the `create()` call and is enforced.",y
How does macOS leverage the creator attribute for user interaction?,"If a word processor file has the word processor as its creator, double-clicking the file opens the application and loads the file.",y
"What is a ""magic number"" in UNIX, and what is its purpose?","A specific number or sequence of bytes at the beginning of some binary files that indicates the data type (e.g., image format). There can also be text magic numbers for text files.",y
Do all UNIX files have magic numbers?,"No, not all files have magic numbers, and system features are not solely based on them.",y
Does UNIX record the program that created a file?,"No, UNIX does not record the creating program.",y
How does UNIX treat file-name extensions?,"UNIX allows file-name extensions as hints, but they are not enforced or depended on by the OS; they primarily aid users.",y
What do file types generally indicate about a file?,"They indicate the internal structure, which must match the expectations of programs reading them (e.g., source/object files).",y
What is an example of a file that must conform to an OS-understood structure?,"An executable file, which must conform to a structure the OS can load and run.",y
What are the disadvantages of an OS supporting multiple file structures?,"It leads to a large and cumbersome OS, requires code for each supported structure, may necessitate defining every file as one of the supported types, and can cause problems for new applications with unsupported structures.",y
Provide an example of a file type that might cause issues with a rigid OS file-type mechanism.,"An encrypted file, which is neither ASCII text nor executable binary, may require circumventing or misusing the OS file-type mechanism.",y
Which operating systems tend to impose minimal file structures?,UNIX and Windows.,y
Describe the internal file structure in UNIX.,"Each file is treated as a sequence of 8-bit bytes, with no interpretation by the OS.",y
What is the tradeoff of UNIX's minimal file structure approach?,"It provides maximum flexibility but offers little OS support, requiring the application to interpret the file's structure.",y
What is the minimum file structure that all operating systems must support?,The executable file structure.,y
What can be complicated for the OS internally regarding files?,Locating an offset within a file.,y
What is the standard unit of I/O for disk systems?,"Units of one block (or physical record), which have a well-defined and uniform size (sector size).",y
How do logical record length and physical block size typically compare?,"The physical record (block) size is unlikely to match the desired logical record length, and logical records themselves may vary in length.",y
How do file systems handle the difference between logical record length and physical block size?,By packing logical records into physical blocks.,y
How does UNIX view the internal structure of files regarding addressability?,"All files are streams of bytes, with each byte individually addressable by its offset.",y
How does the file system handle byte-level addressing with disk blocks?,"It automatically packs and unpacks bytes into physical disk blocks (e.g., 512 bytes per block).",y
What factors determine how many logical records fit into a physical block?,"Logical record size, physical block size, and the packing technique used.",y
Who can be responsible for packing logical records into blocks?,Either the user application or the OS.,y
What units do basic I/O functions typically operate in?,In terms of blocks.,y
Is the conversion from logical records to physical blocks complex?,"No, it's considered a simple software problem.",y
What is internal fragmentation in the context of file storage?,"Wasted disk space in the last allocated block of a file because disk space is allocated in fixed-size blocks, and the file size is not an exact multiple of the block size.",y
What is the relationship between block size and internal fragmentation?,"All file systems suffer from internal fragmentation, and a larger block size generally leads to greater fragmentation.",y
"Define ""file"".",Smallest logical storage unit; collection of related information.,y
"Define ""text file"".",File containing text (alphanumeric characters).,y
"Define ""source file"".",File containing program source code.,y
"Define ""executable file"".",File containing program ready for loading/execution.,y
"Define ""extended file attributes"".",Extended metadata such as character encoding and checksums.,y
"Define ""file info window"".",A GUI view of file metadata.,y
"Define ""write pointer"".",The location in a file for the next write operation.,y
"Define ""read pointer"".",The location in a file for the next read operation.,y
"Define ""current-file-position pointer"".",A per-process pointer that indicates the next read or write location within a file.,y
"Define ""seek"" (file operation).",The operation of changing the current-file-position pointer.,y
"Define ""hard links"".",File-system links where a file has two or more names pointing to the same inode.,y
"Define ""open-file table"".",An OS data structure that contains details of every currently open file.,y
"Define ""open count"".",The number of processes that currently have a specific file open.,y
"Define ""shared lock"".","A type of file lock that allows concurrent acquisition by multiple processes (e.g., for reading).",y
"Define ""exclusive lock"".","A type of file lock that allows only one process to acquire it at a time (e.g., for writing).",y
"Define ""advisory file-lock mechanism"".",A file-locking system where the OS does not enforce the locking; applications must cooperate.,y
"Define ""shell script"".",A file containing a set series of commands specific to a shell.,y
"Define ""magic number"".",A number or specific byte sequence at the start of a file indicating its data type.,y
"Define ""internal fragmentation"".","Wasted disk space in the last block of a file, caused by allocating disk space in fixed-size blocks when the file size is not an exact multiple of the block size.",y
Why do files need to be accessed and read into memory?,Files store information that must be processed.,y
How many file access methods do systems typically offer?,"Some systems provide only one access method, while others provide many.",y
What is a major design problem related to file access methods?,Choosing the right access method for a given application.,y
Define sequential access.,"A file-access method where contents are read in order, from beginning to end.",y
What is the characteristic processing order of sequential access?,"Information is processed one record after another, in order.",y
Name common applications that use sequential access.,Editors and compilers.,y
What is the function of `read_next()` in sequential access?,Reads the next portion of the file and automatically advances the file pointer.,y
What is the function of `write_next()` in sequential access?,Appends data to the end of the file and advances the file pointer to the end of the newly written material.,y
Can a sequential file be reset to its beginning?,Yes.,y
What optional capabilities might some sequential access systems offer for navigation?,The ability to skip forward or backward `n` records.,y
On what conceptual model of a file is sequential access based?,The tape model of a file.,y
On what types of storage devices does sequential access work?,It works on both sequential-access devices and random-access devices.,y
Define direct access (or relative access).,A file-access method where contents are read in random order.,y
How are files structured for direct access?,As fixed-length logical records.,y
What is the main advantage of direct access regarding read/write operations?,"Programs can read and write records rapidly in no particular order, with no restrictions on order.",y
On what conceptual model of a file is direct access based?,"The disk model of a file, which allows random access.",y
How is a file viewed when using direct access?,As a numbered sequence of blocks or records.,y
What is a significant application area for direct access?,"Immediate access to large amounts of information, such as in databases (e.g., airline reservation systems).",y
How do direct-access file operations specify the target block?,"They include a block number as a parameter, like `read(n)` or `write(n)`.",y
What is an alternative way to implement direct access operations while keeping sequential-like commands?,"Retain `read_next()` and `write_next()`, but add a `position_file(n)` operation.",y
What is a relative block number?,"An index relative to the beginning of the file (first block is 0), provided by the user.",y
"What is the ""allocation problem"" in the context of file systems?",The operating system's determination of where to store file blocks.,y
What security benefit does using relative block numbers provide?,It prevents the user from accessing non-file portions of the file system.,y
Do all systems use 0 as the starting relative block number?,"No, some systems start relative block numbers at 0, while others start at 1.",y
How is a request for record N translated into an I/O request in direct access?,It is turned into an I/O request for `N` bytes starting at `N * (logical record length)`.,y
Why are fixed-size logical records beneficial in direct access?,"They make it easy to read, write, and delete records.",y
Is it universal for operating systems to support both sequential and direct access?,"No, not all operating systems support both. Some require a file to be defined as sequential or direct at creation.",y
How can sequential access be simulated on a direct-access file?,By maintaining a `cp` (current position) variable.,y
What are the implications of trying to simulate direct access on a sequential-access file?,It is extremely inefficient and clumsy.,y
What access method is built on top of direct access?,Indexed access methods.,y
Define an index as an access method.,"An access method built on direct access where a file contains an index with pointers to its contents, similar to a book index.",y
What is the general procedure to find a record using an index?,"Search the index, then use the pointer to access the file directly.",y
Provide an example scenario for using an index.,"A retail-price file sorted by UPC, where the index contains the first UPC in each block, which can be kept in memory.",y
How is record access achieved with an index when the index itself fits in memory?,"Binary search the index to find the relevant block, then access that block.",y
What is the solution when an index file is too large to fit in memory?,"Construct an index for the index file, creating a hierarchical structure (e.g., primary index pointing to secondary index, which points to data).",y
Name an example of an indexed sequential-access method.,IBM ISAM.,y
Describe the structure of a hierarchical index system like IBM ISAM.,"A small main index points to disk blocks of a secondary index, and these secondary index blocks then point to the actual file blocks. The file itself is sorted on a key.",y
Outline the step-by-step process to find an item using a two-level indexed system like ISAM.,1. Binary search the main index. 2. Get the secondary index block. 3. Binary search the secondary index. 4. Find the block containing the record. 5. Perform a sequential search within that block.,y
What is the maximum number of direct-access reads needed to locate any record using a two-level indexed method (like ISAM's secondary index)?,At most two direct-access reads (after the initial index searches).,y
What is a directory in a file system?,A symbol table translating file names to file control blocks.,y
What organizational capabilities must a directory allow?,"Insert entries, Delete entries, Search for named entry, List all entries.",y
List common operations performed on a directory.,"Search for a file, Create a file, Delete a file, List a directory, Rename a file, Traverse the file system.",y
What is a potential consequence of deleting a file from a directory and what might be needed afterward?,"It may leave a hole, requiring defragmentation.",y
What are typical purposes for traversing the file system?,For backup or space release.,y
Describe the structure of a single-level directory.,All files are stored in the same directory.,y
What are the advantages of a single-level directory structure?,It is the simplest structure and is easy to support and understand.,y
What are the limitations of a single-level directory structure?,Files must have unique names (leading to a name collision problem for multiple users) and it is difficult for a single user to remember many file names.,y
Describe the structure of a two-level directory.,It uses a separate directory for each user.,y
What is a User File Directory (UFD) in a two-level directory system?,The per-user directory of files.,y
What is the Main File Directory (MFD) in a two-level directory system?,"The system's main file directory, indexed by user name/account, which points to each user's UFD.",y
How does the operating system search for a file when a user refers to it in a two-level directory system?,Only the user's UFD is searched.,y
Can different users have files with the same name in a two-level directory system?,"Yes, file names are unique within each UFD.",y
Who is typically responsible for creating and deleting UFDs in a two-level directory system?,"Special system programs, restricted to administrators.",y
What is a disadvantage of the two-level directory system regarding user cooperation?,"It isolates users, which is a disadvantage for cooperation.",y
How can one user access another user's file in a two-level directory system?,They must specify both the user name and the file name.,y
How can a two-level directory be visualized as a tree?,"The MFD acts as the root, UFDs as descendants, and files as leaves.",y
What is a 'path name' in the context of a two-level directory system?,"The combination of the user name and the file name (e.g., /userb/test.txt or C:\userb\test).",y
What problem arises when managing system files in a two-level directory system?,Copying system files to each UFD wastes space.,y
What is a solution to the system files problem in a two-level directory system?,"Creating a special user directory for system files (e.g., user 0).",y
Describe the search sequence for files (including system files) in a two-level directory system with a dedicated system directory.,"The OS first searches the local UFD, then the special system directory.",y
What is a 'search path'?,A sequence of directories searched for an executable file when a command is executed.,y
Can search paths be customized by users?,"Yes, search paths can be extended, and users can have their own search paths.",y
What is the most common directory structure?,Tree-structured directories.,y
How are tree-structured directories related to two-level directories?,They are a generalization of two-level directories to arbitrary height.,y
"In a tree-structured directory, how is a file's identity ensured?",Every file has a unique path name.,y
What types of entries can a directory or subdirectory contain in a tree-structured directory system?,Files or subdirectories.,y
"How is a directory often treated in a tree-structured system, and how is its entry defined?",A directory is often treated as a special file; one bit defines its entry as a file (0) or subdirectory (1).,y
How are directories created and deleted in tree-structured directory systems?,Using special system calls.,y
What is a 'current directory' in a tree-structured file system?,"Each process has a current directory, which is the default location for file references.",y
How can a user reference a file not located in their current directory in a tree-structured system?,By specifying the path name or by changing the current directory.,y
Where is the initial current directory for a process typically determined from?,From the accounting file.,y
What is an 'absolute path name'?,"A path name that begins at the root (e.g., '/') and follows the path down to the file.",y
What is a 'relative path name'?,"A path name that defines a path from the current directory (e.g., if current is /spell/mail, prt/first is same as /spell/mail/prt/first).",y
How do users typically organize their files in tree-structured directories?,"By defining subdirectories for organization, such as by topic or information type.",y
How is an empty directory deleted in a tree-structured system?,Its entry is simply deleted.,y
How do some systems handle the deletion of a non-empty directory?,"They only allow deletion if the directory is empty, requiring the user to delete its contents recursively first.",y
"How do other systems (e.g., UNIX `rm -r`) handle the deletion of a non-empty directory, and what are the implications?",They delete the directory and all its files/subdirectories recursively. This is more convenient but also more dangerous.,y
How can users access other users' files in a tree-structured directory system?,By specifying the path name or by changing their current directory to that location.,y
What is a key feature and constraint of acyclic-graph directories?,"They allow directories to share subdirectories and files, but contain no cycles (loops) in the graph.",y
What is the behavior of a shared file in an acyclic-graph directory structure?,"One actual file exists, and any changes made to it are visible to all locations it is shared from.",y
What is the behavior of a shared subdirectory in an acyclic-graph directory structure?,New files appearing in one instance of the shared subdirectory will also appear in all other shared instances.,y
How are shared files/subdirectories typically implemented in acyclic-graph directories?,"Using a 'link', which is a pointer (e.g., an absolute/relative path name) to another file or subdirectory.",y
What does it mean to 'resolve' a link?,To use the path name in the link to locate the real file.,y
How does the OS handle links during directory traversal to preserve the acyclic structure?,It ignores links during directory traversal.,y
"What is an alternative to using links for sharing in directories, and what is its primary issue?",Duplicating all info in both sharing directories; this leads to consistency issues when modifications occur.,y
What is the 'aliasing' problem in acyclic-graph directories?,The existence of multiple absolute path names for the same file.,y
What is a concern when traversing an entire file system that contains shared structures?,Avoiding traversing shared structures more than once.,y
What problem arises during deletion in acyclic-graph directories related to shared files?,"Determining when space can be deallocated, as deleting a file might leave dangling pointers if other links to it exist.",y
What is the consequence of deleting a symbolic link versus deleting the original file it points to?,"Deletion of a symbolic link doesn't affect the original file. If the original file is deleted, the symbolic links pointing to it will dangle.",y
"How do systems ensure that a file is preserved until all references to it are deleted, even when shared?","By using a 'reference count', which is incremented for new links/entries and decremented on deletion. The file is deleted only when the count reaches 0.",y
Which type of link in UNIX utilizes a reference count for file preservation?,Hard links.,y
What is the distinguishing characteristic of a general graph directory structure?,It allows cycles (loops) in the directory structure.,y
What is the primary advantage of acyclic-graph directories compared to general graph directories?,They offer simpler traversal and deletion algorithms.,y
What are the problems associated with cycles in a general graph directory?,"Infinite loops during search/traversal, reference counts may not be 0 even if a file/directory is inaccessible, and it requires garbage collection (which is time-consuming for disk-based systems).",y
Why is avoiding cycles by detection often not preferred in general graph directories?,Detecting cycles is computationally expensive.,y
What is a simpler approach to handling cycles in a general graph directory during traversal?,Bypassing links during directory traversal.,y
Define 'user file directory (UFD)'.,Per-user directory of files in two-level directory implementation.,y
Define 'main file directory (MFD)'.,Index pointing to each UFD in two-level directory implementation.,y
Define 'path name'.,"File-system name for a file, containing mount-point and directory-entry info to locate it (e.g., 'C:/foo/bar.txt').",y
Define 'search path'.,Sequence of directories searched for an executable file when a command is executed.,y
Define 'absolute path name'.,Path name starting at the top of the file system hierarchy.,y
Define 'relative path name'.,"Path name starting at a relative location (e.g., current directory).",y
Define 'acyclic graph'.,Directory structure implementation that contains no cycles (loops).,y
Define 'link' in the context of file systems.,File that has no contents but points to another file.,y
Define 'resolve' in the context of file systems.,To follow a link and find the target file.,y
Define 'hard links'.,File-system links where a file has two or more names pointing to the same inode.,y
Define 'garbage collection' in the context of file systems.,Recovery of space containing no-longer-valid data.,y
How is information safety addressed against physical damage?,"Through reliability, which involves duplicate copies and backups.",y
How is information safety addressed against improper access?,Through protection mechanisms.,y
List common protection mechanisms.,"User name/password authentication, encrypting secondary storage, firewalling network access, and advanced mechanisms for valid data access in multiuser systems.",y
Define the 'Read' file access operation.,To read from a file.,y
Define the 'Write' file access operation.,To write or rewrite a file.,y
Define the 'Execute' file access operation.,To load and execute a file.,y
Define the 'Append' file access operation.,To write new information at the end of a file.,y
Define the 'Delete' file access operation.,To delete a file and free its space.,y
Define the 'List' file access operation.,To list a file's name and attributes.,y
Define the 'Attribute change' file access operation.,To change a file's attributes.,y
"How are higher-level file functions (e.g., rename, copy, edit) typically implemented, and at what level is protection applied?","They are often implemented by system programs using lower-level calls, with protection applied at the lower level.",y
On what is file access typically dependent?,User identity.,y
What is the most general scheme for access control?,Access-control list (ACL).,y
What information does an Access-Control List (ACL) specify?,User names and their allowed access types.,y
How does an Operating System (OS) use an ACL to grant or deny access?,"The OS checks the ACL; if a user is listed with the requested access type, it allows access, otherwise it denies.",y
What is an advantage of using Access-Control Lists (ACLs)?,They support complex access methodologies.,y
What are the disadvantages of Access-Control Lists (ACLs)?,"Lengthy lists (tedious to construct, especially if users are unknown) and variable-size directory entries (leading to complicated space management).",y
"In condensed ACLs, define 'Owner'.",The user who created the file.,y
"In condensed ACLs, define 'Group'.",A set of users sharing a file who need similar access.,y
"In condensed ACLs, define 'Other'.",All other users (not owner or in the group).,y
What is a common approach for access control that combines different schemes?,"Combining Access-Control Lists (ACLs) with an owner, group, and universe scheme (e.g., as seen in Solaris).",y
Describe the structure of UNIX permissions.,"UNIX permissions consist of three fields: owner, group, and universe. Each field uses three bits (`rwx`) to represent read, write, and execute permissions respectively.",y
"In UNIX permissions, what do 'r', 'w', and 'x' stand for?","'r' stands for read, 'w' for write, and 'x' for execution.",y
What does 'd' as the first character in a UNIX permission string indicate?,It indicates a subdirectory.,y
What does a UNIX permission string like `rwxrwxr--` signify?,"It signifies `rwx` permissions (read, write, execute) for the owner, `rw-` permissions (read, write, no execute) for the group, and `r--` permissions (read-only) for others.",y
What user interface challenge arises when combining ACLs with regular permissions?,How to visibly indicate the presence of optional ACLs.,y
How does Solaris indicate the presence of ACLs alongside regular permissions?,"By appending a `+` symbol to the regular permission string (e.g., `-rw-r--r--+`).",y
What commands are used to manage ACLs in systems like Solaris?,Commands such as `setfacl` and `getfacl`.,y
How does Windows manage ACLs?,Through a Graphical User Interface (GUI).,y
"When ACLs and group permissions conflict, which typically takes precedence?",ACLs typically take precedence over group permissions due to specificity priority.,y
What is a potential advantage of using a password with each file for protection?,It can be effective if passwords are random and changed often.,y
What are the disadvantages of using a password with each file for protection?,"Users would have too many passwords to remember, and if a single password is used for all files, it results in all-or-none protection.",y
How do some systems implement password protection for groups of files?,By associating a password with a subdirectory.,y
What is a more common approach to file protection involving passwords today?,"Encryption of partitions or files, managed with key passwords.",y
What aspects does directory protection control in multilevel structures?,"It controls the creation and deletion of files within the directory, and a user's ability to determine file existence (by listing directory contents).",y
What access is required if a path name refers to a file in a multilevel directory structure?,The user needs access to both the directory and the file itself.,y
"How might access rights vary in multilevel directory structures, particularly with acyclic or general graphs?",Access rights can vary depending on the specific path name used to refer to a file.,y
"Define ""access-control list"" (ACL).",A list of user names allowed to access a file.,y
What is memory mapping in the context of file access?,"An alternative file access method where a file is mapped into a process's memory space for direct memory access, treating file I/O as routine memory accesses using virtual memory techniques.",y
What is a key benefit of using memory mapping for file I/O?,It can lead to significant performance increases.,y
Describe the initial step in the basic mechanism of memory-mapped files.,A disk block is mapped to one or more pages in memory.,y
How is initial access to a memory-mapped file handled?,"Via demand paging, which results in a page fault.",y
What happens after an initial access causes a page fault in a memory-mapped file?,A page-sized portion of the file is read into a physical page.,y
How are subsequent reads and writes to a memory-mapped file processed?,As routine memory accesses.,y
How do memory-mapped files simplify and speed up file access?,By avoiding `read()` and `write()` system call overhead.,y
When are writes to a memory-mapped file typically written back to secondary storage?,"Generally, updates are written back when the file is closed. They are not necessarily immediate.",y
What happens to intermediate changes in a memory-mapped file under memory pressure?,They may go to swap space.,y
"How do some operating systems, like Solaris, handle all file I/O?","They memory-map all file I/O, even with standard calls, to kernel address space.",y
How can multiple processes share data using memory-mapped files?,Multiple processes can map the same file concurrently for data sharing.,y
"If multiple processes map the same section of a file, are writes by one process visible to others?","Yes, writes by one process are visible to others mapping the same section.",y
How is concurrent access to a memory-mapped file implemented at a low level?,By the virtual memory map pointing to the same physical page.,y
What specific feature related to sharing and modification do memory-mapped files support?,"Copy-on-write: processes share read-only data, but get their own copies for modification.",y
What mechanism should processes use for shared data coordination when using memory-mapped files?,Mutual exclusion.,y
How is shared memory often implemented?,By memory mapping files.,y
"In Windows, what is 'file mapping'?","The first step in memory-mapping a file, involving the creation of a file mapping object for the file.",y
"In Windows, define 'view' in the context of memory-mapped files.","An address range mapped in shared memory; the second step in memory-mapping a file, establishing access in the process's virtual address space.",y
Outline the two main steps for using shared memory with memory-mapped files in the Windows API.,1. Create a file mapping for the file. 2. Establish a view of the mapped file in the process's virtual address space.,y
How does a second process access a shared memory-mapped file in Windows?,It opens and creates a view of the same mapped file.,y
What role does a mapped file play in inter-process communication (IPC) in Windows?,It acts as a shared-memory object for inter-process communication.,y
What is the first specific Windows API call used to set up a memory-mapped file for shared memory?,"`CreateFile()`, which returns a `HANDLE` to the file.",y
"What is the second specific Windows API call used to set up a memory-mapped file for shared memory, and what does it use?","`CreateFileMapping()`, which uses the file `HANDLE` obtained from `CreateFile()`.",y
"What is the third specific Windows API call used to set up a memory-mapped file for shared memory, and what does it use?","`MapViewOfFile()`, which uses the mapped object `HANDLE` obtained from `CreateFileMapping()`.",y
"In the Windows API, what is a 'named shared-memory object'?","A section of a memory-mapped file accessible by name from multiple processes, typically created by `CreateFileMapping()` (e.g., `SharedObject`).",y
"What does `MapViewOfFile()` return, and what is its significance?",It returns a pointer to the shared-memory object; accesses to this memory address are direct accesses to the file data.,y
Can an entire file or only a portion of it be mapped using memory mapping?,Either the entire file or a portion can be mapped.,y
What Windows API call is used to clean up and remove a view of a memory-mapped file?,`UnmapViewOfFile()`.,y
What is a file?,"An abstract data type, representing a sequence of logical records (e.g., bytes, lines, complex data).",y
What is the operating system's role concerning file record types?,"The OS may support specific record types, or it may leave the management of record types to the application.",y
What is a primary task of the OS regarding files?,"To map the logical file concept to physical storage devices (e.g., hard disk, Non-Volatile Memory (NVM)).",y
How might the OS manage logical records in relation to physical storage?,It may order logical records into physical records for storage.,y
What is the purpose of directories?,To organize files.,y
What is a characteristic and problem of a single-level directory system?,"It requires unique names for all files, leading to naming problems in multiuser systems.",y
What is a two-level directory system?,"A directory system where each user has a separate directory, which solves naming problems found in single-level systems.",y
What kind of information might a directory entry typically list for a file?,"File name, location, length, type, owner, and creation/modification times.",y
What is a tree-structured directory system?,"A generalization of the two-level directory, allowing for subdirectories to organize files hierarchically.",y
What is an acyclic-graph directory system?,"A directory system that allows sharing of subdirectories and files, but complicates operations like searching and deletion.",y
What is a general graph structure directory system?,"A directory system offering complete flexibility in sharing, but which may require garbage collection to reclaim unused space.",y
What are the primary challenges associated with remote file systems?,"Reliability, performance, and security.",y
What is the role of distributed information systems in the context of remote file systems?,"They manage user, host, and access information to maintain a shared state across the system.",y
Why is file protection necessary?,It is needed on multiuser systems to control access to files.,y
What are common types of access control for files?,"Read, write, execute, append, delete, and list directory.",y
What are common techniques used for file protection?,"Access lists, passwords, and other security techniques.",y
What is a multiprogramming environment?,An environment where multiple threads compete for finite resources.,y
What happens when a thread requests a resource that is unavailable?,The thread enters a waiting state.,y
Define deadlock.,A situation where a waiting thread can never change state because its requested resources are held by other waiting threads.,y
Provide the formal definition of deadlock.,Every process in a set is waiting for an event that can only be caused by another process in the set.,y
How is a system composed in the context of resource management?,A finite number of resources are distributed among competing threads.,y
How are resources typically partitioned in a system model?,"Resources are partitioned into types (classes), each with identical instances.",y
What is true about instances within a resource type?,"All instances within a resource type are identical, and any instance of a resource type should satisfy a request.",y
Give examples of resource types.,"CPU cycles, files, I/O devices.",y
"If a system has 4 CPUs, how is the resource type 'CPU' characterized?",The resource type 'CPU' has 4 instances.,y
What synchronization tools are common sources of deadlock?,Mutex locks and semaphores.,y
How are individual lock instances typically treated as resources?,"Each lock instance is typically its own resource class (e.g., one lock for a queue, another for a linked list).",y
What are the three steps in the resource utilization sequence for a thread?,"1. Request, 2. Use, 3. Release.",y
"Describe the ""Request"" step in the resource utilization sequence.",A thread requests a resource and waits if it is not immediately available.,y
"Describe the ""Use"" step in the resource utilization sequence.",A thread operates on the resource.,y
"Describe the ""Release"" step in the resource utilization sequence.",A thread releases the resource.,y
How can resource requests and releases be made in a system?,"Via system calls (e.g., \texttt{request()}, \texttt{release()}, \texttt{open()}, \texttt{close()}, \texttt{allocate()}, \texttt{free()}) or via semaphore operations (\texttt{wait()}, \texttt{signal()}) and mutex locks (\texttt{acquire()}, \texttt{release()}).",y
What is the role of the OS regarding resource allocation?,The OS checks for resource allocation via a system table.,y
What information does the OS's system table track regarding resources?,It tracks free/allocated resources and the owning thread.,y
How are waiting threads managed by the OS in relation to resources?,Waiting threads are queued for requested resources.,y
Define a deadlocked state in terms of threads.,Every thread in a set is waiting for an event that can only be caused by another thread in the set.,y
What are the main events that threads wait for in a deadlocked state?,Resource acquisition and release.,y
Give an example of a problem that illustrates a deadlocked state.,"The Dining-philosophers problem, where each philosopher holds one chopstick and waits for another, creating a circular wait.",y
What is the developer's responsibility regarding deadlock?,Developers must be aware of deadlock possibilities.,y
What is an important consideration when using locking tools to prevent race conditions?,Locking tools require careful management of lock acquisition/release to avoid deadlocks.,y
"From the section glossary, define deadlock.",The state in which two processes or threads are stuck waiting for an event that can only be caused by one of the processes or threads.,y
What does `pthread_mutex_init()` do?,Initializes an unlocked POSIX mutex lock.,y
What does `pthread_mutex_lock()` do?,Acquires a POSIX mutex lock; blocks the calling thread if the lock is currently held.,y
What does `pthread_mutex_unlock()` do?,Releases a POSIX mutex lock.,y
Describe a classic deadlock scenario involving two threads and two mutexes.,"Two mutexes (`first_mutex`, `second_mutex`) and two threads (`thread_one`, `thread_two`). `thread_one` locks `first_mutex` then `second_mutex`. `thread_two` locks `second_mutex` then `first_mutex`. Deadlock is possible if `thread_one` acquires `first_mutex` and `thread_two` acquires `second_mutex`, causing both to block indefinitely waiting for the other's lock.",y
Why are deadlocks difficult to identify and test for?,Deadlocks have an intermittent nature; their occurrence depends on the CPU scheduler and thread timing. They might not occur consistently even under similar conditions.,y
Define livelock.,"A liveness failure where a thread continuously attempts an action that fails. It's similar to deadlock, but threads are not blocked; they are active but make no progress.",y
How is livelock similar to and different from deadlock?,Both are liveness failures. Deadlock involves blocked threads. Livelock involves active threads continuously attempting failing actions without making progress.,y
Provide an analogy for livelock.,"Two people trying to pass in a hallway, repeatedly moving into each other's way, active but making no progress.",y
What does `pthread_mutex_trylock()` do?,"Attempts to acquire a POSIX mutex lock without blocking. It returns immediately, indicating success or failure.",y
Describe a livelock scenario involving `pthread_mutex_trylock()`.,"`thread_one` acquires `first_mutex`, `thread_two` acquires `second_mutex`. Both then call `trylock` on the other mutex, which fails. They release their currently held locks and repeat the cycle indefinitely, never making progress.",y
How can livelock often be avoided?,By having threads retry failing operations at random times instead of simultaneously.,y
What real-world example demonstrates a mechanism to avoid issues similar to livelock?,"In Ethernet, hosts involved in a network collision 'backoff' for a random period before retransmitting data.",y
Is livelock more or less common than deadlock?,"Livelock is generally less common than deadlock, but both are challenges in concurrent application design.",y
What are the four necessary conditions that must hold simultaneously for a deadlock situation to arise?,"Mutual exclusion, Hold and wait, No preemption, and Circular wait.",y
"Define ""Mutual exclusion"" as a necessary condition for deadlock.",At least one resource must be held in a nonsharable mode.,y
"Define ""Hold and wait"" as a necessary condition for deadlock.",A thread must be holding at least one resource and waiting to acquire additional resources held by other threads.,y
"Define ""No preemption"" as a necessary condition for deadlock.",A resource can be released only voluntarily by the thread holding it.,y
"Define ""Circular wait"" as a necessary condition for deadlock.","A set of waiting threads {T0, T1, ..., Tn} must exist such that T0 is waiting for a resource held by T1, T1 is waiting for a resource held by T2, ..., Tn-1 is waiting for a resource held by Tn, and Tn is waiting for a resource held by T0.",y
Is it true that all four necessary conditions for deadlock must hold for it to occur?,"Yes, all four conditions (Mutual exclusion, Hold and wait, No preemption, and Circular wait) must hold simultaneously.",y
"Which of the necessary deadlock conditions implies the ""Hold and wait"" condition?",The circular-wait condition.,y
What is a system resource-allocation graph?,A directed graph used for the precise description of deadlocks.,y
What are the two main components of a system resource-allocation graph?,A set of vertices V and a set of edges E.,y
How are the vertices (V) in a system resource-allocation graph partitioned?,Into two types: T (the set of all active threads) and R (the set of all resource types).,y
"Define a ""request edge"" in a system resource-allocation graph.","A directed edge from a thread Ti to a resource type Rj (Ti -> Rj), signifying that Ti has requested an instance of Rj.",y
"Define an ""assignment edge"" in a system resource-allocation graph.","A directed edge from a resource type Rj to a thread Ti (Rj -> Ti), signifying that an instance of Rj has been allocated to Ti.",y
What does it imply if a system resource-allocation graph contains no cycles?,No thread is deadlocked.,y
What does it imply if a system resource-allocation graph contains a cycle?,A deadlock may exist.,y
"In a system resource-allocation graph, if each resource type has exactly one instance and a cycle exists, what does this imply?",A deadlock has occurred.,y
"In a system resource-allocation graph, if each resource type has several instances and a cycle exists, what does this imply?",A cycle is a necessary but not a sufficient condition for deadlock.,y
What are the three main ways to deal with deadlocks?,"Ignore the problem, Prevent/Avoid, and Detect/Recover.",y
Which operating systems commonly ignore the deadlock problem?,"Most OS, such as Linux and Windows.",y
Why is ignoring the deadlock problem a common solution in many operating systems?,Due to the infrequency of deadlocks and the high cost of implementing other methods.,y
What is the core principle of the 'Prevent/Avoid' approach to deadlocks?,To use a protocol to ensure the system never enters a deadlocked state.,y
What is the core principle of the 'Detect/Recover' approach to deadlocks?,"To allow the system to enter a deadlocked state, then detect it and recover.",y
Which systems commonly use the 'Detect/Recover' approach for deadlocks?,"Some systems, such as databases.",y
Can different deadlock handling approaches be combined?,"Yes, basic approaches can be combined for an optimal solution per resource class.",y
deadlock prevention,Methods to ensure at least one necessary condition for deadlock cannot hold.,y
How does Deadlock Prevention prevent deadlocks?,By constraining resource request methods.,y
deadlock avoidance,"An OS method where processes inform the OS of resource use, and the system approves or denies requests to avoid deadlock.",y
What advance information does the OS need for Deadlock Avoidance?,Information on resources a thread will request/use.,y
What factors does the OS consider when deciding to satisfy or delay a resource request in Deadlock Avoidance?,"Currently available resources, resources allocated to each thread, and future requests/releases of each thread.",y
When might Deadlock Detection and Recovery be necessary?,If no prevention or avoidance mechanisms are in place.,y
What two main algorithms does a system provide for Deadlock Detection and Recovery?,Algorithms to examine the system state to determine if deadlock occurred and to recover from deadlock.,y
What are the consequences of an undetected deadlock?,"System performance deteriorates, resources are held, more threads deadlock, and eventually, a manual restart is needed.",y
"Besides specific deadlock recovery algorithms, what other method might be used for deadlock recovery?","Manual recovery for other liveness failures (e.g., livelock).",y
When does deadlock occur?,Deadlock occurs if all four necessary conditions for deadlock hold.,y
How can deadlock be prevented?,Deadlock can be prevented by ensuring that at least one of the four necessary conditions for deadlock cannot hold.,y
What is the role of mutual exclusion in deadlock?,The mutual-exclusion condition must hold for deadlock to occur.,y
Can deadlocks involve sharable resources?,"No, sharable resources (e.g., read-only files) do not require mutual exclusion, and thus cannot be involved in deadlock.",y
Is denying mutual-exclusion a general strategy for deadlock prevention?,"No, denying mutual-exclusion cannot generally prevent deadlocks because some resources are intrinsically nonsharable (e.g., mutex locks).",y
"Describe Protocol 1 to prevent the ""hold and wait"" condition.",A thread requests and allocates all required resources before it begins execution.,y
"What is a major impracticality of Protocol 1 for ""hold and wait"" prevention?","It is impractical for dynamic resources, where a thread may not know all required resources beforehand.",y
"Describe Protocol 2 to prevent the ""hold and wait"" condition.",A thread requests resources only when it is holding none. It must release all current resources before requesting more.,y
"What are the disadvantages of both protocols for preventing ""hold and wait""?",Low resource utilization (resources allocated but unused for long periods) and possible starvation (thread waits indefinitely for popular resources).,y
"Describe Protocol 1 to prevent the ""no preemption"" condition.","If a thread requests a resource and must wait, all currently held resources are preempted (implicitly released). The thread restarts when its old and new resources become available.",y
"Describe Protocol 2 to prevent the ""no preemption"" condition.","If resources are not available, check if they are held by a waiting thread. If so, preempt them from the waiting thread and allocate them to the requesting thread. If not, the requesting thread waits, and its resources may be preempted by other requests. The thread restarts when new resources are allocated and preempted resources recovered.",y
"To which types of resources is the ""no preemption"" prevention often applied?","Resources whose state can be saved and restored (e.g., CPU registers, database transactions).",y
"To which types of resources can the ""no preemption"" prevention generally NOT be applied?","Mutex locks and semaphores, where deadlocks commonly occur.",y
"What is a practical solution to prevent the ""circular wait"" condition?",Impose a total ordering of all resource types and require threads to request resources in increasing order of enumeration.,y
Give an example of how ordered resource requests prevent circular wait.,"If F(first_mutex) = 1 and F(second_mutex) = 5, a thread must request first_mutex then second_mutex.",y
"What is an alternative rule for preventing ""circular wait"" using resource ordering?",A thread requesting resource R_j must have released any R_i such that F(R_i) >= F(R_j).,y
"How are multiple instances of the same resource type handled when preventing ""circular wait"" with ordered requests?",A single request for all needed instances of that resource type must be issued.,y
Does the total ordering protocol definitively prevent circular wait?,"Yes, this protocol prevents circular wait (proof by contradiction).",y
What is a challenge in implementing circular wait prevention using resource ordering?,Developing a robust and effective ordering can be difficult for many locks.,y
How does Java address lock acquisition ordering for deadlock prevention?,Java uses `System.identityHashCode(Object)` for lock acquisition ordering.,y
Does lock ordering always guarantee deadlock prevention?,"No, lock ordering does not guarantee deadlock prevention if locks are acquired dynamically (e.g., within a `transaction()` function).",y
"Define ""deadlock prevention"".",A set of methods intended to ensure that at least one of the necessary conditions for deadlock cannot hold.,y
"Define ""deadlock avoidance"".",An operating system method in which processes inform the operating system of which resources they will use during their lifetimes so the system can approve or deny requests to avoid deadlock.,y
What is the primary goal of deadlock avoidance?,"To dynamically examine the resource-allocation state to prevent circular-wait, by requiring additional information on resource requests.",y
What information does a system need for deadlock avoidance algorithms to function?,The system needs to know the maximum resources each thread may need (a priori information).,y
How does deadlock prevention differ from deadlock avoidance?,"Deadlock prevention limits how requests are made to ensure no necessary condition occurs, while deadlock avoidance dynamically examines the state to prevent circular-wait.",y
What are the common side effects of deadlock prevention?,Low device utilization and reduced system throughput.,y
How is the resource-allocation state defined?,"By the currently available resources, resources allocated to each thread, and the maximum demands of each thread.",y
"Define a ""safe state"" in the context of deadlock avoidance.",A state is safe if the system can allocate resources to each thread (up to its maximum need) in some order and avoid deadlock.,y
When is a system considered to be in a safe state?,A system is in a safe state if a safe sequence exists.,y
"Define a ""safe sequence"".","A safe sequence <T₁, T₂, …, Tₙ> is an ordering of threads such that for each T₁, its resource requests can be met by currently available resources plus the resources held by all threads Tₗ where j < i.",y
"What is the relationship between safe states, unsafe states, and deadlocks?","A safe state is not deadlocked. A deadlocked state is unsafe. Not all unsafe states are deadlocks, but unsafe states may lead to deadlock.",y
What is the operating system's role regarding safe and unsafe states?,"The OS avoids unsafe states as long as the system state is safe. In an unsafe state, the OS cannot prevent deadlocks; thread behavior controls these states.",y
For what kind of systems is the Resource-Allocation Graph Algorithm applicable?,Systems with only one instance of each resource type.,y
"What is a ""claim edge"" in a resource-allocation graph?","A claim edge (T₁ → Rₗ, represented by a dashed line) indicates that thread T₁ may request resource Rₗ in the future.",y
Describe the transitions of edges in the Resource-Allocation Graph Algorithm.,A claim edge T₁ → Rₗ converts to a request edge when T₁ requests Rₗ. A request edge converts to an assignment edge when Rₗ is allocated to T₁. An assignment edge Rₗ → T₁ converts back to a claim edge when Rₗ is released by T₁.,y
What is a key requirement for resource claims in the Resource-Allocation Graph Algorithm?,Resources must be claimed a priori.,y
How does the Resource-Allocation Graph Algorithm determine if a resource request can be granted?,A request is granted only if granting it does not form a cycle in the graph. The presence of a cycle indicates an unsafe state.,y
What is the time complexity of the Resource-Allocation Graph Algorithm?,"O(n²) operations, where n is the number of threads.",y
For what kind of systems is the Banker's Algorithm applicable?,Systems with multiple instances of each resource type.,y
How does the efficiency of the Banker's Algorithm compare to the Resource-Allocation Graph Algorithm?,It is generally less efficient than the resource-allocation graph scheme.,y
What is the initial requirement for a new thread entering a system using the Banker's Algorithm?,"A new thread must declare its maximum instances of each resource type it may need, which cannot exceed total system resources.",y
Under what condition is a resource request granted in the Banker's Algorithm?,A request is granted only if the allocation leaves the system in a safe state.,y
Describe the 'Available' data structure in the Banker's Algorithm.,A vector of length m (number of resource types) indicating the number of available resources of each type.,y
Describe the 'Max' data structure in the Banker's Algorithm.,An n × m matrix (where n is the number of threads and m is the number of resource types) representing the maximum demand of each thread.,y
Describe the 'Allocation' data structure in the Banker's Algorithm.,An n × m matrix (where n is the number of threads and m is the number of resource types) representing the resources currently allocated to each thread.,y
Describe the 'Need' data structure in the Banker's Algorithm and how it's calculated.,An n × m matrix (where n is the number of threads and m is the number of resource types) representing the remaining resource need of each thread. It is calculated as Need[i][j] = Max[i][j] - Allocation[i][j].,y
Outline the steps of the Safety Algorithm used within the Banker's Algorithm.,"1. Initialize Work = Available and Finish[i] = false for i = 0, …, n-1.
2. Find an index i such that Finish[i] == false and Need₁ ≤ Work. If no such i exists, go to step 4.
3. Update Work = Work + Allocation₁ and set Finish[i] = true. Go to step 2.
4. If Finish[i] == true for all i, the system is in a safe state.",y
What is the time complexity of the Safety Algorithm in the Banker's Algorithm?,"O(m × n²) operations, where m is the number of resource types and n is the number of threads.",y
Outline the steps of the Resource-Request Algorithm for thread T₁ in the Banker's Algorithm.,"1. If Request₁ ≤ Need₁, proceed. Otherwise, an error occurs (thread exceeded its maximum claim).
2. If Request₁ ≤ Available, proceed. Otherwise, thread T₁ must wait (resources are unavailable).
3. Pretend to allocate the resources: Update Available = Available - Request₁, Allocation₁ = Allocation₁ + Request₁, and Need₁ = Need₁ - Request₁.
4. If the resulting state is safe (checked using the Safety Algorithm), grant the request. Otherwise, thread T₁ waits and the old state is restored.",y
What two algorithms are needed for deadlock management if a system does not use deadlock-prevention or deadlock-avoidance?,"An algorithm to determine if a deadlock occurred, and an algorithm to recover from the deadlock.",y
What constitutes the overhead of deadlock detection and recovery?,Run-time costs and potential losses from recovery.,y
What graphical tool is used for deadlock detection when there is a single instance of each resource type?,A wait-for graph.,y
How is a wait-for graph derived from a resource-allocation graph?,By removing resource nodes and collapsing edges.,y
What does an edge Tᵢ → Tⱼ signify in a wait-for graph?,It implies that thread Tᵢ is waiting for thread Tⱼ to release a resource R_q that Tᵢ needs.,y
How is a deadlock identified using a wait-for graph?,A deadlock exists if the wait-for graph contains a cycle.,y
What is the general approach to deadlock detection using a wait-for graph?,Maintain the wait-for graph and periodically invoke an algorithm to search for cycles.,y
What is the computational complexity of cycle detection in a graph?,"O(n²) operations, where n is the number of vertices.",y
What is the `deadlock_detector` tool from the BCC toolkit used for?,Detecting deadlocks for Pthreads mutex locks on Linux.,y
How does the `deadlock_detector` tool work?,"It inserts probes to trace `pthread_mutex_lock()` and `pthread_mutex_unlock()` calls, constructs a wait-for graph, and reports deadlock if a cycle is detected.",y
Why is the wait-for graph scheme not applicable for deadlock detection when there are several instances of a resource type?,The wait-for graph scheme is only suitable for single instances of each resource type.,y
What three data structures are used in the deadlock detection algorithm for several instances of a resource type?,"`Available` (vector), `Allocation` (matrix), and `Request` (matrix).",y
Define the `Available` vector in the context of the deadlock detection algorithm for multiple resource instances.,A vector of length m (number of resource types) indicating the number of available instances of each resource type.,y
Define the `Allocation` matrix in the context of the deadlock detection algorithm for multiple resource instances.,An n × m matrix where `Allocation[i][j]` is the number of resources of type Rⱼ currently allocated to thread Tᵢ.,y
Define the `Request` matrix in the context of the deadlock detection algorithm for multiple resource instances.,An n × m matrix where `Request[i][j] = k` means thread Tᵢ is requesting k more instances of resource type Rⱼ.,y
Describe the initialization step (Step 1) of the deadlock detection algorithm for several instances of a resource type.,"Initialize `Work` = `Available`. For each thread `i`, if `Allocation[i]` is not zero, set `Finish[i]` = `false`; otherwise, set `Finish[i]` = `true`.",y
Describe the iterative search step (Step 2) of the deadlock detection algorithm for several instances of a resource type.,"Find an index `i` such that `Finish[i]` is `false` and `Request[i]` ≤ `Work`. If no such `i` exists, proceed to Step 4.",y
Describe the resource update step (Step 3) of the deadlock detection algorithm for several instances of a resource type.,"Update `Work` = `Work` + `Allocation[i]`, set `Finish[i]` = `true`, and then go back to Step 2.",y
Describe the deadlock determination step (Step 4) of the deadlock detection algorithm for several instances of a resource type.,"If `Finish[i]` == `false` for any thread `i` (0 ≤ i < n), then thread Tᵢ is deadlocked.",y
What is the computational complexity of the deadlock detection algorithm for several instances of a resource type?,"O(m × n²) operations, where m is the number of resource types and n is the number of threads.",y
"What is the ""optimistic attitude"" principle applied in the deadlock detection algorithm for multiple resource instances?","If a thread's `Request` is less than or equal to `Work`, it is optimistically assumed that the thread will complete its execution and return its resources.",y
"In the example given for multiple resource instance deadlock detection, what sequence of threads demonstrates that the initial state is not deadlocked?","<T₀, T₂, T₃, T₁, T₄>.",y
"In the example given for multiple resource instance deadlock detection, if thread T₂ requests an additional instance of resource C, which threads become involved in a deadlock?","Threads T₁, T₂, T₃, T₄.",y
What two factors determine when to invoke a deadlock detection algorithm?,"How often a deadlock is likely to occur, and how many threads will be affected by a deadlock when it happens.",y
What are the consequences if deadlocks are frequent but not detected promptly?,"Resources allocated to deadlocked threads become idle, and the number of threads in the deadlock cycle may grow.",y
"What is an extreme approach to invoking a deadlock detection algorithm, and what are its pros and cons?",Invoking it every time a resource request cannot be granted immediately. Pros: Identifies deadlocked threads and the specific 'causing' thread. Cons: High computational overhead.,y
"What is a less expensive approach to invoking a deadlock detection algorithm, and what is its potential drawback?","Invoking it at defined intervals (e.g., hourly, or when CPU utilization drops below 40%). Drawback: May not identify the specific 'causing' thread.",y
How do database systems typically manage deadlocks?,Using deadlock detection and recovery.,y
"In database systems, what are updates referred to as, and what mechanism is used for data integrity?","Updates are referred to as transactions, and locks are used for data integrity.",y
How does a database server detect deadlocks?,It periodically searches for cycles in the wait-for graph.,y
What is the first step a database system takes when a deadlock is detected?,A victim transaction is selected.,y
"After a victim transaction is selected in a database deadlock, what happens to it?","The victim transaction is aborted and rolled back, which releases its locks.",y
What is the outcome for the remaining transactions after a victim is aborted in a database deadlock?,The remaining transactions are freed from the deadlock.,y
What happens to an aborted transaction after it's rolled back in a database deadlock scenario?,The aborted transaction is reissued.,y
How does MySQL typically choose a victim transaction during deadlock resolution?,"It minimizes the number of rows inserted, updated, or deleted by the victim transaction.",y
"Define ""wait-for graph"".","In deadlock detection, a variant of the resource-allocation graph with resource nodes removed; indicates a deadlock if the graph contains a cycle.",y
"Define ""thread dump"".","In Java, a snapshot of the state of all threads in an application; a useful debugging tool for deadlocks.",y
What are the two general options when deadlock is detected?,Inform operator (manual recovery); System recovers automatically.,y
What are the two primary options for breaking a deadlock?,Abort one or more threads (to break circular wait); Preempt resources from deadlocked threads.,y
How can deadlocks be eliminated through process/thread termination?,"By aborting one or more processes or threads, which allows the system to reclaim all their held resources.",y
Describe the 'Abort all deadlocked processes' method for resolving deadlock.,This method immediately breaks the deadlock cycle but is expensive due to discarded computations and the need for recomputation.,y
Describe the 'Abort one process at a time until deadlock eliminated' method for resolving deadlock.,"This method involves aborting processes sequentially until the deadlock is resolved, but it incurs high overhead because deadlock detection must be performed after each abort.",y
What are potential issues when aborting a process to resolve a deadlock?,"Files may be left in an incorrect state if they were being updated; Shared data integrity issues can arise if the process was updating data while holding a mutex lock, requiring the lock status to be restored.",y
What factors influence the decision of which process to terminate during partial termination to resolve a deadlock?,"It is a policy decision, often based on economic factors to minimize cost.",y
"List the factors considered when choosing a victim process to terminate for deadlock recovery, aiming for minimum cost.","Process priority; Computation time (how long computed, how much longer); Resources used (types, ease of preemption); Resources needed to complete; Number of processes to terminate.",y
What is the concept of 'resource preemption' in deadlock recovery?,It involves successively taking resources away from one or more processes and allocating them to others until the deadlock is broken.,y
What is the 'selecting a victim' issue in resource preemption for deadlock recovery?,"It involves determining which resources or processes to preempt, with the goal of minimizing the cost (e.g., considering resources held or time consumed).",y
Explain the 'rollback' issue in resource preemption for deadlock recovery.,"A preempted process cannot continue normal execution due to missing resources. The solution is to roll the process back to a safe state and restart it. This can be a total rollback (abort and restart) or a more effective partial rollback (only as necessary), which requires more state information.",y
What are the two main approaches to 'rollback' in resource preemption for deadlock recovery?,"Total rollback (simplest, involves aborting and restarting the process); Partial rollback (more effective, involves rolling back only as necessary, requires more state information).",y
Describe the 'starvation' issue in resource preemption for deadlock recovery.,"Starvation occurs if resources are always preempted from the same process, preventing it from ever completing its execution.",y
How is the 'starvation' issue typically addressed in resource preemption for deadlock recovery?,By ensuring that a process is picked as a victim only a finite number of times. A common solution is to include the number of times a process has been rolled back in the cost factor used for victim selection.,y
Define 'recovery mode'.,A system boot state that provides limited services and is designed to enable the system administrator to repair system problems and debug system startup.,y
What is a deadlock?,A set of processes where each process is waiting for an event caused by another process in the set.,y
List the four necessary conditions for a deadlock to occur.,"Mutual exclusion, Hold and wait, No preemption, Circular wait.",y
When is a deadlock possible?,"Only if all four necessary conditions (mutual exclusion, hold and wait, no preemption, and circular wait) are present simultaneously.",y
How are deadlocks modeled?,With resource-allocation graphs.,y
What indicates a deadlock in a resource-allocation graph?,A cycle in the graph.,y
What is the goal of deadlock prevention?,To ensure that one of the four necessary conditions for deadlock cannot occur.,y
What is a practical method for deadlock prevention?,Eliminating circular wait.,y
What is deadlock avoidance?,A method that uses algorithms to avoid granting resources if doing so would lead to an unsafe state.,y
Which algorithm is commonly used for deadlock avoidance?,Banker's algorithm.,y
What is deadlock detection?,An algorithm that evaluates processes and resources on a running system to find a deadlocked state.,y
What are the two main methods for deadlock recovery?,"Aborting one process in a circular wait, or preempting resources assigned to a deadlocked process.",y
What is the main purpose of a computer system?,To execute programs.,y
Where must programs and data reside during execution?,Partially in main memory.,y
What is a characteristic of modern computer systems regarding processes and memory?,They maintain several processes in memory concurrently.,y
How does the effectiveness of memory-management schemes vary?,It depends on the specific situation.,y
What do most memory-management algorithms require?,Hardware support.,y
How is the CPU shared among processes?,Through CPU scheduling.,y
What are the benefits of CPU scheduling?,It improves CPU utilization and response speed.,y
What is required to effectively implement CPU scheduling?,Keeping many processes in memory (sharing memory).,y
What is the role of memory in a modern computer system?,It is central to the system's operation.,y
Describe memory from the CPU's perspective.,"A large array of bytes, each with its own address.",y
How does the CPU execute a program involving memory?,The CPU fetches instructions from memory as indicated by the program counter. Instructions may cause loading or storing to specific memory addresses.,y
List the stages of an instruction-execution cycle.,"Fetch instruction, decode, fetch operands, execute, store results.",y
What does the memory unit see during operation?,"A stream of addresses, without knowing their generation or purpose.",y
What are the only general-purpose storage components the CPU can access directly?,Main memory and registers.,y
Where must instructions and data be for the CPU to operate on them?,In direct-access storage (main memory or registers).,y
How quickly are registers accessible by the CPU?,Within one CPU clock cycle.,y
"How is main memory accessed, and what is its access time relative to registers?","Via the memory bus, which may take many CPU cycles.",y
What is a 'stall' in the context of CPU operation?,"CPU state when the CPU is waiting for data from main memory, which delays execution.",y
What is a 'cache'?,A temporary copy of data in a reserved memory area to improve performance.,y
How is cache management typically handled?,"By hardware automatically to speed up memory access, without OS control.",y
How can a multithreaded core mitigate memory stalls?,By switching threads during the memory stall.,y
What are the primary concerns regarding memory operation and protection?,"Correct operation, protection of the OS from user processes, and protection of user processes from each other.",y
How is memory protection achieved?,"By hardware, which determines the legal address range for a process and ensures access only to legal addresses. The OS doesn't intervene for performance during typical access.",y
What is needed for process protection and concurrent execution in memory?,Each process needs a separate memory space.,y
What is a 'base register'?,A CPU register with the starting address of an address space. It defines the logical address space along with the limit register.,y
What is a 'limit register'?,A CPU register defining the size of a range. It defines the logical address space along with the base register.,y
How does CPU hardware enforce memory protection in user mode?,It compares every address generated in user mode with the base and limit registers.,y
What happens if a user process attempts to access OS or another user's memory?,"It results in a trap to the OS, which is a fatal error.",y
What does the use of base and limit registers prevent?,Accidental or deliberate modification of the OS or other user code/data.,y
Who can load the base and limit registers?,"Only the OS, using privileged instructions in kernel mode.",y
What kind of memory access does the OS have?,Unrestricted access to both OS and user memory.,y
What tasks does the OS perform with its unrestricted memory access?,"Loading programs, dumping memory on errors, accessing system call parameters, performing I/O, and facilitating context switches.",y
What are the initial steps for a program to run from disk?,"It's brought into memory as a binary executable, placed in a process context, and then becomes eligible for execution.",y
What happens to a process's memory when it terminates?,The memory is reclaimed.,y
Where can a user process reside in physical memory in most systems?,Anywhere in physical memory.,y
What is 'bind' in the context of addresses?,"To tie together. It refers to the mapping from one address space to another, such as a compiler binding symbolic addresses to relocatable addresses.",y
How are addresses represented in a source program?,"Symbolically (e.g., 'count').",y
What does a compiler bind symbolic addresses to?,"Relocatable addresses (e.g., '14 bytes from module start').",y
What do the linker/loader bind relocatable addresses to?,"Absolute addresses (e.g., 74014).",y
Describe compile-time address binding.,"If the process's physical memory location is known in advance, the compiler generates 'absolute code' with absolute memory addresses.",y
What is 'absolute code'?,Code with bindings to absolute memory addresses.,y
Describe load-time address binding.,"If the process's physical memory location is unknown at compile time, the compiler generates 'relocatable code', and binding occurs when the program is loaded into memory.",y
What is 'relocatable code'?,Code with bindings to memory addresses changed at loading time to reflect location in main memory.,y
Describe execution-time address binding.,"If a process can be moved during its execution, binding is delayed until run time.",y
What is a 'logical address'?,An address generated by the CPU; it is translated to a physical address before use. Also called a virtual address.,y
What is a 'physical address'?,The actual location in physical memory of code or data.,y
What is a 'virtual address'?,An address generated by the CPU; it is translated to a physical address before use. Also called a logical address.,y
What is a 'logical address space'?,The set of all logical addresses generated by a program.,y
What is a 'physical address space'?,The set of all physical addresses corresponding to the logical addresses generated by a program.,y
When are logical and physical addresses identical?,With compile-time and load-time binding.,y
When do logical and physical addresses differ?,With execution-time binding.,y
What is a 'memory-management unit (MMU)'?,A hardware component of the CPU or motherboard allowing memory access by mapping logical addresses to physical addresses at run-time.,y
How does a simple MMU scheme work?,It uses a relocation register (a base register generalization). The value in the relocation register is added to every logical address generated by a user process to create the physical address.,y
What kind of addresses does a user program deal with?,Logical addresses; it never accesses real physical addresses directly.,y
When is the final physical location of a referenced memory address determined in an execution-time binding system?,At the time of the memory reference.,y
What concept is central to proper memory management?,The concept of a logical address space bound to a separate physical address space.,y
What was a limitation of traditional program loading?,"The entire program and its data had to be in physical memory for execution, limiting process size by physical memory size.",y
What is 'dynamic loading'?,"The loading of a process routine when called, not at process start. This improves memory-space utilization.",y
How does dynamic loading work?,"All routines are kept on disk in relocatable load format. The main program is loaded and executed. When a routine calls another, it checks if it's loaded. If not, a relocatable linking loader loads the routine, updates address tables, and passes control.",y
What is the main advantage of dynamic loading?,"Routines are loaded only when needed. This is useful for large programs with infrequent code paths (e.g., error routines), as the total program size can be large but the portion used (loaded) much smaller.",y
Does dynamic loading require special OS support?,"No, it is primarily the user's responsibility, though the OS may provide library routines to help.",y
What are 'dynamically linked libraries (DLLs)'?,System libraries linked to user programs at run time; linking is postponed until execution time.,y
What is 'static linking'?,"Linking where system libraries are treated like object modules, combined by the loader into the binary program image.",y
What are the disadvantages of static linking?,"Each program includes a copy of the language library in its executable image, which increases executable size and wastes main memory.",y
What is another significant advantage of dynamically linked libraries (DLLs)?,"They can be shared among multiple processes, with only one instance loaded into memory.",y
What are 'shared libraries'?,"Libraries loaded once, used by many processes; used in systems supporting dynamic linking. DLLs are an example of shared libraries.",y
How does a program reference a dynamic library routine?,"The loader locates the DLL, loads it if needed, and adjusts the addresses in the program that reference the DLL functions to the DLL's memory location.",y
How do DLLs simplify library updates?,"If a library is replaced by a new version, all programs referencing it automatically use the new version without needing to be relinked.",y
How do DLLs handle compatibility issues with updates?,"Programs and libraries include version information to prevent incompatible versions. Multiple library versions can be loaded, and a program uses its specific version info. Minor changes keep the same version number; major changes increment it.",y
Who is affected by incompatible changes in a dynamic library?,Only programs compiled with the new library version. Programs linked before the new library continue using the older version.,y
Does dynamic linking and shared libraries generally require OS help?,"Yes, especially if processes are protected. The OS needs to check if a routine is in another process's memory and allow multiple processes to access the same addresses.",y
What is contiguous memory allocation?,A memory allocation method where each process is in a single contiguous memory section.,y
Define 'variable-partition' scheme in memory allocation.,A memory-allocation scheme where each memory partition contains exactly one process.,y
"In variable partition memory allocation, what is a 'hole'?",A contiguous section of unused memory.,y
What is the 'dynamic storage-allocation problem'?,The problem of satisfying a memory request of size n from a list of free holes.,y
Explain the 'first-fit' memory allocation strategy.,"In memory allocation, selecting the first hole large enough for a request. Search is from the beginning or last search end, stopping when a large enough hole is found.",y
Explain the 'best-fit' memory allocation strategy.,"In memory allocation, selecting the smallest hole large enough for a request. Requires searching the entire list (unless ordered by size) and produces the smallest leftover hole.",y
Explain the 'worst-fit' memory allocation strategy.,"In memory allocation, selecting the largest hole available. Requires searching the entire list (unless sorted by size) and produces the largest leftover hole (which may be more useful).",y
Define 'external fragmentation'.,"A type of fragmentation where available memory has holes that together are enough to satisfy a request, but no single hole is large enough because the storage is fragmented.",y
What is the '50-percent rule' in the context of memory fragmentation?,"A statistical finding that fragmentation, particularly external fragmentation with first-fit, may result in 50 percent space loss (one-third of memory unusable).",y
Define 'internal fragmentation'.,Unused memory internal to a partition.,y
What is 'compaction' in memory management?,A technique to shuffle storage contents to consolidate used space and create one or more large contiguous holes.,y
How is main memory typically divided?,Into two partitions: one for the OS and one for user processes.,y
Where can the Operating System (OS) reside in memory?,"In either low memory or high memory (many OS, including Linux/Windows, use high memory).",y
What is a characteristic of user processes residing in memory concurrently?,Several user processes can reside in memory concurrently.,y
What is the primary purpose of memory protection in contiguous memory allocation?,To prevent a process from accessing memory it does not own.,y
Which two registers are combined for memory protection in contiguous allocation?,The relocation register and the limit register.,y
What does the relocation register specify?,The smallest physical address a process can access (base address).,y
What does the limit register specify?,The range of logical addresses a process can access (size of the process).,y
How is a logical address checked for validity in memory protection?,"Each logical address generated by the CPU must fall within the range defined by the limit register (i.e., be less than the limit value).",y
How does the MMU (Memory Management Unit) map a logical address to a physical address dynamically?,By adding the value of the relocation register to the logical address.,y
What is the role of the CPU scheduler regarding relocation and limit registers?,It loads the appropriate relocation and limit registers during a context switch to protect memory for the newly running process.,y
What happens to every CPU-generated address in a memory-protected system?,Every CPU-generated address is checked against the relocation and limit registers before being sent to memory.,y
What does the relocation-register scheme protect?,The OS and other user programs/data from modification by a running process.,y
What is a benefit of the relocation-register scheme concerning OS size?,It allows for dynamic changes in OS size.,y
Why is the relocation-register scheme desirable for device drivers?,"It allows device drivers to be loaded only when needed and removed when no longer needed, optimizing memory usage.",y
What is the simplest method for memory allocation in contiguous schemes?,Assigning processes to variably sized partitions.,y
How does the OS manage memory parts in a variable-partition scheme?,It keeps a table of available (holes) and occupied memory parts.,y
What happens when a process arrives if there is insufficient memory?,The process can either be rejected or placed in a wait queue.,y
What happens if a selected hole is too large for an arriving process?,"The hole is split into two parts: one allocated to the process, and the other (the leftover) is returned to the list of holes.",y
What happens to a memory block when a process terminates?,The memory block is released and placed back into the list of holes.,y
"What action is taken if a new hole, formed by a terminating process, is adjacent to other existing holes?","The new hole is merged with the adjacent holes to form a larger, contiguous hole.",y
Which memory allocation strategies produce the smallest leftover hole?,Best-fit.,y
Which memory allocation strategies produce the largest leftover hole?,Worst-fit.,y
"According to simulations, which memory allocation strategies are generally better than worst-fit in terms of time and storage utilization?",First-fit and Best-fit.,y
"Between First-fit and Best-fit, which is generally faster?",First-fit.,y
Which memory allocation strategies commonly suffer from external fragmentation?,First-fit and Best-fit.,y
What causes external fragmentation?,"As processes are loaded and removed from memory, free memory is broken into many small, noncontiguous pieces.",y
What is the practical impact of external fragmentation?,"There might be enough total free memory to satisfy a request, but it is scattered in small pieces, preventing allocation of a large contiguous block.",y
What is the primary cause of internal fragmentation?,"It occurs when allocated memory is slightly larger than the requested memory, such as when using fixed-sized blocks or rounding up to a multiple of a page size.",y
Under what condition is compaction possible as a solution to external fragmentation?,Only if relocation is dynamic (can happen during execution time).,y
Why is compaction not possible if relocation is static?,Because memory addresses are fixed at assembly or load time and cannot be changed during execution.,y
How does compaction work if dynamic relocation is possible?,"Programs and data are moved in memory, and their base (relocation) registers are updated accordingly.",y
What is a disadvantage of compaction?,"It can be an expensive operation, especially if many processes need to be moved.",y
What is another solution to external fragmentation besides compaction?,Permitting a noncontiguous logical address space for processes.,y
Which memory-management technique uses the strategy of permitting noncontiguous logical address space?,"Paging, which is the most common memory-management technique.",y
Is fragmentation a problem unique to memory management?,"No, fragmentation is a general problem in computing, particularly in storage management.",y
What was a requirement for memory management prior to paging?,Contiguous physical address space.,y
Define Paging.,A memory-management scheme that allows a process's physical address space to be noncontiguous.,y
What issues does paging avoid?,External fragmentation and compaction issues.,y
Why is paging widely used in operating systems?,"Due to its advantages, it is used in most operating systems, from servers to mobile devices.",y
How is paging implemented?,Through cooperation between the operating system and hardware.,y
What are 'frames' in the context of paging?,Fixed-sized blocks into which physical memory is broken.,y
What are 'pages' in the context of paging?,Fixed-sized blocks into which logical memory is broken (same size as frames).,y
How are pages loaded during process execution in a paging system?,"Pages are loaded into any available memory frames, which can come from the file system or backing store.",y
How is the backing store divided in a paging system?,"Into fixed-sized blocks, the same size as frames or clusters.",y
What is the relationship between logical and physical address space in paging?,Logical address space is totally separate from physical address space.,y
What are the two parts of a CPU-generated address in a paged system?,Page number (p) and page offset (d).,y
What is the function of the page number (p)?,It serves as an index into the per-process page table.,y
What does a page table contain?,The base address of each frame in physical memory.,y
What is the function of the page offset (d)?,It specifies the location within the referenced frame.,y
How is a physical memory address calculated in a paging system?,Base address of the frame + page offset.,y
Describe the MMU steps to translate a logical address to a physical address.,1. Extract page number (p) and use it as an index into the page table. 2. Extract the corresponding frame number (f) from the page table. 3. Replace the page number (p) with the frame number (f).,y
Which part of the CPU-generated address does not change during logical-to-physical address translation?,The page offset (d).,y
How are page and frame sizes determined?,They are defined by hardware.,y
What are the typical characteristics of page size?,"A power of 2, typically ranging from 4 KB to 1 GB.",y
What is the advantage of a page size being a power of 2?,It makes the translation of a logical address to a page number and offset easier.,y
"Given a logical address space of 2^m bytes and a page size of 2^n bytes, how are the page number and page offset determined from the logical address?","The high-order (m-n) bits represent the page number, and the low-order (n) bits represent the page offset.",y
What type of relocation is paging considered?,A form of dynamic relocation.,y
How are logical addresses bound to physical addresses in paging?,Every logical address is bound to a physical address by the paging hardware.,y
Does paging suffer from external fragmentation?,"No, because any free frame can be allocated.",y
Does paging suffer from internal fragmentation?,"Yes, the last frame allocated for a process may not be entirely full, leading to internal fragmentation.",y
What is the average internal fragmentation per process in a paging system?,One-half page per process.,y
What is an advantage of small page sizes?,They result in less internal fragmentation.,y
What is an advantage of larger page sizes regarding page-table entries?,The overhead per page-table entry is reduced with larger page sizes.,y
What is an advantage of larger page sizes regarding disk I/O?,Disk I/O becomes more efficient with larger data transfers.,y
How have page sizes evolved over time and why?,"Page sizes have grown over time because processes, data sets, and main memory have become larger.",y
What are typical page sizes in modern systems?,"Typically 4 KB or 8 KB, though some systems support multiple sizes (e.g., Windows 10: 4 KB, 2 MB; Linux: default 4 KB, huge pages).",y
What is a common size for a page-table entry on a 32-bit CPU?,Typically 4 bytes.,y
How many physical page frames can a 32-bit page-table entry point to?,2^32 physical page frames.,y
"With a 4 KB frame size (2^12 bytes) and 4-byte page-table entries, how much physical memory can a system address?","2^44 bytes, which is 16 TB (2^32 frames * 2^12 bytes/frame = 2^44 bytes).",y
Is the physical memory size of a system typically the same as the maximum logical size of a process?,"No, physical memory size is typically different from the maximum logical size of a process.",y
"Besides frame addresses, what other information can page-table entries contain?","Other information, which reduces the number of bits available for frame addresses.",y
What happens when a process arrives in a paging system regarding memory allocation?,"Its size in pages is examined, and each page requires one available frame.",y
Describe the loading process for pages of a new process.,"The first page is loaded into an allocated frame, and its frame number is recorded in the page table. Subsequent pages are loaded into other frames, with their frame numbers also recorded in the page table.",y
What is a key concept regarding memory views in paging?,There is a clear separation between the programmer's view of memory and the actual physical memory.,y
How does a programmer typically view memory for a single program?,As a single contiguous space.,y
How is a user program typically stored in physical memory?,"It is scattered throughout physical memory, which also holds other programs.",y
What component reconciles the programmer's view of memory with the actual physical memory?,The address-translation hardware.,y
"Who controls the translation of logical addresses to physical addresses, and is it visible to the programmer?","The operating system controls it, and it is hidden from the programmer.",y
How does paging prevent a user process from accessing memory it doesn't own?,"A user process has no way to address memory outside of its own page table, preventing access to unowned memory.",y
What is the OS's role in managing physical memory in a paging system?,"The OS manages physical memory, being aware of allocation details such as allocated/available frames and the total number of frames.",y
What system-wide data structure holds information about physical page frames?,The frame table.,y
What kind of information is kept in the frame table?,"One entry per physical page frame, indicating if it's free or allocated, and if allocated, to which process and page it belongs.",y
How does the OS handle system calls with address parameters in a paging environment?,The address parameter provided in the system call is mapped to the correct physical address by the OS.,y
Why does the OS maintain a copy of the page table for each process?,"For manual logical-to-physical translation by the OS, and for the CPU dispatcher to define the hardware page table when a process is allocated the CPU.",y
What is a drawback of paging regarding context switching?,Paging increases context-switch time.,y
Are page tables per-process or system-wide data structures?,Page tables are per-process data structures.,y
Where is the pointer to a process's page table stored?,"In the process control block, along with other registers.",y
What does the CPU scheduler do when it selects a process in a paging system?,It reloads user registers and hardware page-table values from the stored user page table.,y
What is the simplest hardware implementation of a page table?,Dedicated high-speed hardware registers.,y
What is a drawback of using dedicated hardware registers for page tables?,It increases context-switch time because the entire set of registers must be exchanged.,y
For what size of page tables is the dedicated hardware register implementation feasible?,"Only for small page tables (e.g., 256 entries).",y
How large can page tables be in contemporary CPUs?,"Much larger, for example, 2^20 entries.",y
"Given the size of contemporary page tables, where are they typically kept?",In main memory.,y
What CPU register points to the in-memory page table?,The page-table base register (PTBR).,y
How does using a PTBR reduce context-switch time?,"When changing page tables, only the PTBR needs to be changed, rather than reloading an entire set of registers.",y
What is the consequence of storing the page table in main memory?,It leads to slower memory access times.,y
Why does storing the page table in main memory result in two memory accesses for data?,"One memory access is needed for the page-table entry, and a second access is needed for the actual data.",y
What is the standard solution to mitigate the performance impact of two memory accesses per data access?,"A special, small, fast-lookup hardware cache called a translation look-aside buffer (TLB).",y
What are the characteristics of a TLB?,"It is an associative, high-speed memory.",y
What does each TLB entry consist of?,A key (tag) and a value.,y
How does associative memory in a TLB perform lookups?,"An item presented to the associative memory is compared with all keys simultaneously. If found, the corresponding value is returned rapidly.",y
How does TLB lookup affect performance in the instruction pipeline?,"It is typically part of the instruction pipeline, resulting in no additional performance penalty.",y
What is the typical size range for a TLB?,"32 to 1,024 entries.",y
What is an optimization some CPUs use regarding TLBs?,"Having separate instruction and data address TLBs, effectively doubling the number of entries.",y
Describe the process of using a TLB with page tables when the CPU generates a logical address.,"The MMU first checks if the page number is in the TLB. If it is (TLB hit), the frame number is immediately available. If not (TLB miss), a memory reference to the page table is made to get the frame number, which is then added to the TLB.",y
What happens when the TLB is full and a new entry needs to be added?,"An existing entry is replaced using policies like LRU (Least Recently Used), round-robin, or random.",y
What are 'wired down' entries in a TLB?,"Entries that cannot be removed from the TLB by the usual replacement algorithms, typically used for critical kernel code.",y
What are ASIDs (Address-Space Identifiers) in a TLB entry?,"Unique identifiers for a process that provide address-space protection. They ensure the current process's ASID matches the virtual page's ASID, otherwise, it's treated as a TLB miss.",y
What is the main benefit of ASIDs in TLB entries?,They allow the TLB to contain entries for multiple processes simultaneously without requiring a flush on every context switch.,y
What is the consequence for a TLB without ASIDs during a context switch?,It must be flushed (erased) on each context switch to prevent the next process from using invalid translation information from previous processes.,y
Define 'hit ratio' in the context of a TLB.,"The percentage of times a page number is found in the TLB, indicating its effectiveness.",y
"Calculate the effective memory-access time for an 80% TLB hit ratio, where a TLB hit takes 10 ns and a TLB miss takes 20 ns.",Effective memory-access time = (0.80 * 10 ns) + (0.20 * 20 ns) = 8 ns + 4 ns = 12 ns.,y
"Calculate the effective memory-access time for a 99% TLB hit ratio, where a TLB hit takes 10 ns and a TLB miss takes 20 ns.",Effective memory-access time = (0.99 * 10 ns) + (0.01 * 20 ns) = 9.9 ns + 0.2 ns = 10.1 ns.,y
Describe TLB levels in modern CPUs.,"Modern CPUs may have multiple TLB levels (e.g., L1 instruction TLB, L1 data TLB, L2 TLB). A miss at one level results in checking the next level.",y
What happens if a TLB miss occurs at all levels?,The system must walk page-table entries in main memory (which can take hundreds of cycles) or interrupt the OS.,y
How do hardware features and OS improvements relate in memory management?,"Hardware features (like TLBs) significantly affect memory performance, and OS improvements (like paging) affect and are affected by these hardware changes.",y
Why is it important for OS designers to understand TLB function?,"Although TLBs are a hardware feature, OS designers must understand their function and features to optimally implement paging according to the TLB design of the platform.",y
How is memory protection implemented in a paged environment?,"Through protection bits associated with each frame, typically stored in the page table.",y
What is a basic protection bit functionality in paging?,A single bit can designate a page as either read-write or read-only.,y
When are protection bits checked during memory access?,"Every memory reference goes through the page table to compute the physical address, and during this process, the protection bits are checked.",y
What happens if a process attempts to write to a read-only page?,"The hardware generates a trap to the OS, indicating a memory-protection violation.",y
What kind of finer protection can be implemented with paging?,"Separate bits can be used for read-only, read-write, and execute-only access types.",y
What is the purpose of the 'valid-invalid' bit in a page-table entry?,It indicates whether the page is part of the process's logical address space (valid) or not (invalid).,y
How does the valid-invalid bit contribute to protection?,"Illegal addresses (those for which the bit is 'invalid') are trapped by this bit, leading to an OS trap.",y
Who sets the valid-invalid bit for each page?,The operating system sets this bit to allow or disallow access.,y
What problem arises if a process does not use its entire allocated logical address range in a paging system?,"It can be wasteful to create a full page table for every possible page in the address range, even if many are unused.",y
What is the purpose of the Page-Table Length Register (PTLR)?,It indicates the size of the page table and is checked against every logical address to verify that it falls within a valid range.,y
What happens if a logical address fails the PTLR check?,An error trap is generated to the OS.,y
"What is a significant advantage of paging, especially in multi-process environments?",The possibility of sharing common code among multiple processes.,y
What is an example of common code often shared using paging?,The standard C library (libc).,y
What kind of code can be shared in a paging system?,Reentrant code.,y
Define 'reentrant code'.,"Non-self-modifying code that never changes during execution, allowing two or more processes to execute the same code simultaneously.",y
How does sharing reentrant code like libc benefit memory usage?,"Only one copy of the code needs to reside in physical memory, saving significant memory. For example, 40 processes using a 2 MB libc would use 2 MB total, instead of 80 MB.",y
How is shared code implemented with page tables?,The page table for each user process maps to the same physical copy of the shared code.,y
What are other examples of programs that can be shared using paging?,"Compilers, window systems, and database systems.",y
How are shared libraries typically implemented?,Using shared pages.,y
What must the OS enforce regarding shared code to ensure proper operation?,The read-only nature of shared code.,y
What is 'paging'?,Memory management scheme avoiding external fragmentation by splitting physical memory into fixed-sized frames and logical memory into pages.,y
What are 'frames'?,Fixed-sized blocks of physical memory.,y
What is a 'page'?,Fixed-sized block of logical memory.,y
What is a 'page number (p)'?,Part of a CPU-generated memory address in a paged system; used as an index into the page table.,y
What is a 'page offset (d)'?,Part of a CPU-generated memory address in a paged system; it's the offset of the location within the referenced page.,y
What is a 'page table'?,"A table in paged memory containing the base address of each physical memory frame, indexed by the logical page number.",y
What are 'huge pages'?,A feature designating a region of physical memory for especially large pages.,y
What is a 'frame table'?,"A table in paged memory containing frame details (e.g., whether it's allocated/free, and which process/page it belongs to), and the total number of frames.",y
What is the 'page-table base register (PTBR)'?,A CPU register that points to the in-memory page table.,y
What is a 'translation look-aside buffer (TLB)'?,"A special, small, fast-lookup hardware cache used in paged memory address translation for fast access to a subset of addresses.",y
What is a 'TLB miss'?,The event where a TLB lookup fails to provide an address translation because the required entry is not in the TLB.,y
What does it mean for a TLB entry to be 'wired down'?,It means the TLB entry is locked into the TLB and cannot be removed by the usual replacement algorithm.,y
What are 'address-space identifiers (ASIDs)'?,"A part of a TLB entry that uniquely identifies the associated process, providing address-space protection. If the requesting process ID doesn't match, it causes a TLB miss.",y
What does it mean to 'flush' a TLB?,The erasure of entries in the TLB or other cache to remove invalid data.,y
What is 'hit ratio'?,"The percentage of times a cache provides a valid lookup; it measures the effectiveness of a cache, such as a TLB.",y
What is 'effective memory-access time'?,"A statistical or real measure of the CPU time required to read from or write to memory, taking into account cache hits and misses.",y
What is the 'valid-invalid' bit in a page table?,A page-table bit indicating if an entry points to a page that is within the process's legal logical address space.,y
What is the 'page-table length register (PTLR)'?,A CPU register that indicates the size of the page table.,y
What is 'reentrant code'?,Code that supports multiple concurrent threads because it is non-self-modifying (never changes during execution) and can therefore be shared.,y
What are common techniques for structuring the page table?,"Hierarchical paging, hashed page tables, and inverted page tables.",y
What is the typical range for logical address spaces in modern computer systems?,$2^{32}$ to $2^{64}$,y
What problem arises with page tables when logical address spaces are very large?,The page table itself becomes excessively large.,y
Consider a 32-bit logical address space with a 4 KB page size. How many entries would a standard page table have?,Over 1 million entries ($2^{20}$).,y
"In a 32-bit logical address space with a 4 KB page size, if each page table entry is 4 bytes, how much physical address space would a page table alone consume for each process?",Up to 4 MB.,y
What is the general solution to the problem of excessively large page tables?,Divide the page table into smaller pieces.,y
What is a two-level paging algorithm?,A scheme where the page table itself is paged.,y
How is a 32-bit logical address space divided into page number and offset in a two-level paging scheme with a 4 KB page size?,Page number: 20 bits; Page offset: 12 bits.,y
"In a two-level paging scheme for a 32-bit logical address space and 4 KB page size, how is the 20-bit page number further divided?",$p_1$: 10-bit outer page number (index into outer page table); $p_2$: 10-bit inner page offset (displacement within inner page table).,y
How does address translation occur in a two-level paging scheme?,From the outer page table inward.,y
What is another common name for a two-level paging scheme?,Forward-mapped page table.,y
Define 'forward-mapped' in the context of hierarchical page tables.,A scheme for hierarchical page tables where address translation starts at the outer page table and moves inward.,y
Why is a two-level paging scheme generally inappropriate for a 64-bit logical address space?,"For a 4 KB page size, it would have up to $2^{52}$ entries, and even the outer page table would still be $2^{44}$ bytes (16 GB), making it too large.",y
What is a three-level paging scheme?,"A hierarchical paging scheme where the outer page table itself is paged, typically into standard-size pages ($2^{10}$ entries, or $2^{12}$ bytes).",y
"How many levels of paging would a 64-bit UltraSPARC system potentially require with a hierarchical scheme, and why is this problematic?","It would require seven levels of paging, which leads to a prohibitive number of memory accesses.",y
For what address space size are hierarchical page tables generally inappropriate?,64-bit architectures.,y
"What is the primary approach for handling address spaces larger than 32 bits, besides hierarchical paging?",Hashed page tables.,y
What value is used as the hash value in a hashed page table?,The virtual page number.,y
How do hashed page tables resolve collisions?,Each entry in the hash table contains a linked list of elements.,y
What three fields make up each element in a hashed page table's linked list?,1. Virtual page number. 2. Value of mapped page frame. 3. Pointer to next element in linked list.,y
Describe the algorithm for address translation using a hashed page table.,"The virtual page number is hashed into the hash table. The virtual page number is compared with the first field of the first element in the linked list. If a match is found, the corresponding page frame (field 2) is used. If no match, subsequent entries in the linked list are searched.",y
Define 'hashed page table'.,A page table that is hashed for faster access; the hash value is the virtual page number.,y
What is a clustered page table?,"A variation of hashed page tables for 64-bit address spaces, where each entry refers to several pages (e.g., 16) instead of a single page.",y
What is the benefit of a clustered page table compared to a standard hashed page table?,A single page-table entry stores mappings for multiple physical-page frames.,y
For what type of address spaces are clustered page tables particularly useful?,Sparse address spaces (memory references are noncontiguous or scattered).,y
Define 'sparse' in memory management.,"Describes a page table with noncontiguous, scattered entries; an address space with many holes.",y
What is the typical structure of standard page tables regarding processes?,"Each process has an associated page table, with one entry for each page the process is using (or each virtual address).",y
What is a major drawback of standard page tables?,"Each page table can consist of millions of entries, consuming large amounts of physical memory.",y
Define 'inverted page table'.,"A page-table scheme with one entry for each real physical page frame in memory, mapping to a logical page (virtual address) value.",y
What information does each entry in an inverted page table contain?,"The virtual address of the page stored in that real memory location, plus process information (e.g., address-space identifier).",y
How many page tables are typically present in a system that uses inverted page tables?,"Only one page table for the entire system, with one entry per physical memory page.",y
Why is an address-space identifier (process-id) often included in an inverted page table entry?,It ensures that a logical page for a particular process maps to its corresponding physical page frame.,y
Name two operating systems/CPUs that use inverted page tables.,64-bit UltraSPARC and PowerPC.,y
"In the IBM RT simplified version of inverted page tables, what is the structure of a virtual address?","<process-id, page-number, offset>",y
"In the IBM RT simplified version of inverted page tables, what is the structure of an inverted page-table entry?","<process-id, page-number>",y
Describe the memory reference process in the IBM RT simplified version of inverted page tables.,"The <process-id, page-number> from the virtual address is presented to the memory subsystem. The inverted page table is searched for a match. If a match is found at entry 'i', the physical address <i, offset> is generated. If no match, it's an illegal address access.",y
What is a primary drawback of inverted page tables regarding search time?,"It increases the time to search the table because the table is sorted by physical address, but lookups are performed by virtual address.",y
How is the search time drawback of inverted page tables typically alleviated?,By using a hash table to limit the search.,y
What is the cost in terms of memory references when using a hash table with inverted page tables?,"Each access to the hash table adds a memory reference, requiring at least two real memory reads for one virtual memory reference (one for the hash-table entry and one for the page table entry).",y
What mechanism is typically searched first to improve performance with inverted page tables?,The Translation Lookaside Buffer (TLB).,y
"What issue do inverted page tables have with shared memory, compared to standard paging?","Standard paging allows multiple virtual addresses to map to the same physical address. Inverted page tables, having only one entry per physical page, mean a physical page cannot have multiple shared virtual addresses. A reference by another process sharing memory would cause a page fault, replacing the existing mapping.",y
How does Oracle SPARC Solaris efficiently solve the virtual memory problem for its 64-bit OS?,It uses hashed page tables.,y
"How many hash tables does Solaris use for virtual to physical memory mapping, and what are their purposes?",Two hash tables: one for the kernel and one for all user processes.,y
What specific area of memory does each hash-table entry in Solaris map?,A contiguous area of mapped virtual memory (more efficient than per-page entry).,y
What information does an entry in Solaris's hash table typically include?,A base address and a span (number of pages represented).,y
What is the TLB (Translation Lookaside Buffer) in the context of Solaris?,It holds translation table entries (TTEs) for fast hardware lookups.,y
What is the Translation Storage Buffer (TSB) in Solaris?,"A cache of Translation Table Entries (TTEs), including an entry for each recently accessed page.",y
Define 'TLB walk'.,The steps involved in traversing page-table structures to locate a needed translation and copying the result into the TLB.,y
Describe the full process of a virtual address reference in Oracle SPARC Solaris.,"1. Hardware searches TLB for translation. 2. If not found, hardware performs a 'TLB walk' by searching the in-memory TSB for the TTE. 3. If a match is found in the TSB, the CPU copies the TSB entry into the TLB, and memory translation completes. 4. If no match in the TSB, the kernel is interrupted to search the hash table. 5. The kernel creates a TTE from the hash table and stores it in the TSB for automatic loading into the TLB by the MMU. 6. The interrupt handler returns control to the MMU, which completes address translation and retrieves data.",y
Define 'Solaris'.,"A UNIX derivative, main operating system of Sun Microsystems (now Oracle); active open source version called Illumos.",y
Define 'SPARC'.,A proprietary RISC CPU created by Sun Microsystems (now Oracle); active open source version called OpenSPARC.,y
What is a fundamental requirement for process instructions and data during execution?,They must be in memory for execution.,y
"Define the term ""swapped"" in the context of memory management.","To be temporarily moved out of main memory to a backing store, typically to free up main memory, and then brought back into memory for continued execution.",y
"What is a ""backing store"" in the context of swapping, and what are its key characteristics?","A fast secondary storage area used for process swapping, large enough for process parts, and providing direct access to memory images. It's where processes or their parts are temporarily moved.",y
What is the primary purpose or benefit of swapping in an operating system?,It allows the total physical address space of all processes to exceed the real physical memory available.,y
How does swapping affect the degree of multiprogramming?,It increases the degree of multiprogramming.,y
"Describe the mechanism of ""standard swapping"".",It involves moving entire processes between main memory and a backing store.,y
"When a process or part is swapped to a backing store, what associated data structures must be written?","Associated data structures, including per-thread data for multithreaded processes, must be written.",y
What does the OS maintain for swapped-out processes?,Metadata for restoration.,y
What is a significant advantage of standard swapping in terms of memory allocation?,"It allows physical memory to be oversubscribed, accommodating more processes than actual physical memory is available.",y
Which types of processes are considered good candidates for swapping out?,Idle or mostly idle processes.,y
What is the benefit of swapping out inactive processes for active processes?,Memory allocated to inactive processes can be dedicated to active processes.,y
What happens if a swapped-out inactive process becomes active?,It must be swapped back into memory.,y
Is standard swapping commonly used in contemporary operating systems?,"Generally no, with Solaris under dire circumstances being an exception.",y
What is the main reason standard swapping is generally no longer used in contemporary OS?,The time required to move entire processes is prohibitive.,y
"What variation of swapping do most contemporary systems (e.g., Linux, Windows) use?","Pages of a process are swapped, not the entire process.",y
"Does ""swapping with paging"" still allow for physical memory oversubscription?",Yes.,y
What is a cost advantage of swapping with paging compared to standard swapping?,"It does not incur the high cost of swapping entire processes, as only a small number of pages are involved.",y
"In contemporary contexts, what does the term ""swapping"" generally refer to?",Standard swapping (moving entire processes).,y
"In contemporary contexts, what does the term ""paging"" refer to?",Swapping with paging (moving individual pages).,y
"Define ""page out"".",Moving a page from memory to backing store.,y
"Define ""page in"".",Moving a page from backing store back into memory.,y
How does swapping with paging relate to virtual memory?,It works well with virtual memory.,y
Do mobile systems typically support swapping?,No.,y
What type of nonvolatile storage do mobile systems typically use that contributes to their lack of swapping support?,"Flash memory (not hard disks), which has space constraints.",y
What is a limitation of flash memory regarding writes that discourages swapping on mobile systems?,It tolerates a limited number of writes before becoming unreliable.,y
What is the issue with throughput between main memory and flash memory in mobile systems that discourages swapping?,Poor throughput.,y
"How does Apple's iOS manage memory when free memory is low, instead of swapping?",It asks applications to voluntarily relinquish allocated memory.,y
"In iOS, what happens to read-only data (like code) when memory is low?",It can be removed from main memory and reloaded from flash if needed.,y
"In iOS, what happens to modified data (like stack) when memory is low?",It is never removed from main memory.,y
What is the consequence if iOS applications fail to voluntarily free memory when requested?,They may be terminated by the OS.,y
"How does Android manage memory when free memory is insufficient, similar to iOS?","It uses a similar strategy, potentially terminating processes.",y
What does Android do before terminating a process due to insufficient free memory?,"It writes the ""application state"" to flash memory for a quick restart.",y
"Define ""application state"".",A software construct for data storage.,y
What is a key responsibility for developers designing applications for mobile systems regarding memory?,They must carefully allocate and release memory to avoid excessive use or leaks.,y
What does swapping (in any form) often indicate about system performance?,It is often a sign of more active processes than available physical memory.,y
What are two general approaches to address a system that is swapping excessively?,1. Terminate some processes. 2. Get more physical memory.,y
What Intel chips dominated the PC landscape for decades?,"Intel chips, including the 16-bit Intel 8086/8088 and 32-bit IA-32 (Pentium processors), and later 64-bit x86-64 architectures.",y
What were the early 16-bit Intel chips mentioned?,Intel 8086 (late 1970s) and 8088 (used in the original IBM PC).,y
What is IA-32?,"Intel's 32-bit chip architecture, which included Pentium processors.",y
What architecture are Intel's 64-bit chips based on?,x86-64 architecture.,y
What architecture is successful in mobile systems where Intel does not dominate?,ARM architecture.,y
What are the two major memory-management concepts used in IA-32 architecture?,Segmentation and paging.,y
"Describe the address translation process in IA-32, starting from the CPU.","CPU generates logical addresses which go to the segmentation unit. The segmentation unit produces a linear address, which goes to the paging unit. The paging unit then generates the physical address in main memory.",y
What components form the Memory-Management Unit (MMU) in IA-32?,The segmentation and paging units.,y
What type of address does the CPU generate in the IA-32 translation process?,Logical addresses.,y
What type of address does the segmentation unit produce in IA-32?,Linear address.,y
What type of address does the paging unit generate in IA-32?,Physical address.,y
What is the maximum segment size in IA-32 segmentation?,Up to 4 GB.,y
What is the maximum number of segments allowed per process in IA-32?,16 K segments.,y
How is the logical address space divided in IA-32 segmentation?,"Into two partitions: one for up to 8 K segments private to a process, and another for up to 8 K segments shared among all processes.",y
Where is information for segments private to a process stored in IA-32?,In the local descriptor table (LDT).,y
Where is information for segments shared among all processes stored in IA-32?,In the global descriptor table (GDT).,y
"What is an entry in the LDT or GDT called, and what is its size?",An 8-byte segment descriptor.,y
What information does a segment descriptor contain?,"Detailed information, such as the base location and limit of a segment.",y
What are the two components of a logical address in IA-32 segmentation?,Selector and offset.,y
What is the size of the selector in an IA-32 logical address?,16 bits.,y
"What do 's', 'g', and 'p' represent within an IA-32 selector?","'s' is the segment number, 'g' indicates GDT or LDT, and 'p' indicates protection.",y
What is the size and purpose of the offset in an IA-32 logical address?,"32 bits, representing the byte location within the segment.",y
"How many segment registers does an IA-32 machine have, and what is their function?","Six segment registers, allowing six segments to be addressed at once.",y
What do the six 8-byte microprogram registers (LDT/GDT cache) hold in IA-32 segmentation?,Segment descriptors.,y
What is the benefit of the LDT/GDT cache in IA-32 segmentation?,"It avoids reading the descriptor from memory for every reference, improving performance.",y
What is the length of a linear address in IA-32?,32 bits long.,y
How is a linear address generated from a logical address in IA-32 segmentation?,"A segment register points to an LDT/GDT entry. The base and limit obtained from the segment descriptor are used. If the offset is within the limit, it is added to the base to generate the 32-bit linear address.",y
What happens if an address is invalid during the limit check in IA-32 segmentation?,"A memory fault occurs, which causes a trap to the OS.",y
What are the possible page sizes in IA-32 paging?,4 KB or 4 MB.,y
Describe the 32-bit linear address division for 4-KB pages in IA-32's two-level paging scheme.,"It is divided into: page number p1 (10 high-order bits), page number p2 (10 inner bits), and page offset d (12 low-order bits).",y
What does the 10 high-order bits of a linear address reference in IA-32 two-level paging?,"An entry in the outermost page table, known as the page directory.",y
Which register points to the page directory for the current process in IA-32?,The CR3 register.,y
How is the inner page table referenced in IA-32 two-level paging?,"A page directory entry points to the inner page table, which is then indexed by the inner 10 bits (p2) of the linear address.",y
What do the low-order bits 0-11 of a linear address represent for a 4-KB page in IA-32?,The offset within the 4-KB page.,y
What flag in an IA-32 page directory entry indicates a 4 MB page frame?,The Page_Size flag.,y
What happens if the Page_Size flag is set in an IA-32 page directory entry?,"The page frame is 4 MB, bypassing the inner page table.",y
What do the 22 low-order bits in a linear address represent when using a 4-MB page frame in IA-32?,The offset within the 4-MB page frame.,y
How does IA-32 handle page tables for efficiency when not in active use?,IA-32 page tables can be swapped to disk.,y
How is it indicated whether an IA-32 page table is in memory or on disk?,By an invalid bit in the page directory entry.,y
"What is PAE, and why was it developed?","PAE (Page Address Extension) is Intel IA-32 CPU hardware developed to overcome the 4-GB memory limitations of 32-bit architectures, allowing 32-bit processors to access physical address space larger than 4 GB.",y
How does PAE change the paging scheme in IA-32?,PAE changes paging from a two-level to a three-level scheme.,y
What do the top two bits refer to in a PAE-enabled paging scheme?,The page directory pointer table.,y
How did PAE increase the address space?,"It increased page-directory and page-table entries from 32 to 64 bits, allowed the base address of page tables/frames to extend from 20 to 24 bits, and combined with the 12-bit offset, increased the address space to 36 bits.",y
What is the maximum physical memory supported by PAE?,Up to 64 GB.,y
Is OS support required for PAE?,"Yes, OS support is required for PAE. Linux and Mac support it, but 32-bit Windows desktop versions often have a 4 GB limit.",y
"What was Intel's initial 64-bit architecture, and was it widely adopted?","IA-64 (later Itanium), and it was not widely adopted.",y
Who developed the x86-64 architecture?,"AMD, by extending the existing IA-32 instruction set.",y
Why did Intel adopt AMD's x86-64 architecture?,Because it supported larger logical/physical address spaces and included architectural advances.,y
What is the general term used for the class of 64-bit CPUs running identical instruction sets common in desktop/server systems?,x86-64.,y
What is the potential size of a 64-bit address space?,"2^64 bytes, or 16 quintillion / 16 exabytes.",y
How many bits are practically used for address representation in x86-64 architecture?,"Fewer than 64 bits (specifically, 48-bit virtual addresses).",y
What is the virtual address size in x86-64 architecture?,48 bits.,y
What page sizes does x86-64 support?,"4 KB, 2 MB, or 1 GB.",y
How many levels of paging hierarchy does x86-64 use?,Four levels.,y
What addressing scheme does x86-64 use?,PAE (Page Address Extension).,y
What physical address space do x86-64 systems with 48-bit virtual addresses support?,"52-bit physical addresses (4,096 terabytes).",y
"Define ""page directory"".","In Intel IA-32 CPU architecture, the outermost page table.",y
"Define ""page address extension (PAE)"".",Intel IA-32 CPU hardware allowing 32-bit processors to access physical address space larger than 4GB.,y
"What does ""PAE"" stand for and what is its function?",Page Address Extension; Intel IA-32 CPU hardware allowing 32-bit processors to access physical address space larger than 4GB.,y
"Define ""page directory pointer table"".",PAE pointer to page tables.,y
"Define ""Itanium"".",Intel IA-64 CPU.,y
"Define ""AMD 64"".",A 64-bit CPU designed by Advanced Micro Devices; part of x86-64 class.,y
"Define ""Intel 64"".","Intel 64-bit CPUs, part of x86-64 class.",y
"Define ""x86-64"".",Class of 64-bit CPUs running identical instruction set; common in desktop/server systems.,y
What type of devices commonly use ARM processors?,Mobile devices like smartphones and tablets.,y
How does Intel's business model differ from ARM's regarding chip production?,"Intel designs and manufactures chips, whereas ARM only designs and licenses architectural designs to manufacturers.",y
What is ARM's primary business model regarding chip production?,"ARM only designs, licensing architectural designs to manufacturers.",y
Name some examples of devices/companies that use ARM architecture.,"Apple (iPhone, iPad), and most Android devices.",y
"Besides mobile devices, what other systems commonly use ARM processors?",Real-time embedded systems.,y
What is the significance of ARM architecture in terms of production quantity?,"Over 100 billion ARM processors have been produced, making it the most widely used architecture by quantity.",y
What specific ARM architecture is the focus of this material?,The 64-bit ARM v8 architecture.,y
What are translation granules in ARM v8 CPUs?,Features of ARM v8 CPUs defining page sizes and regions.,y
"How many translation granules does ARM v8 have, and what are their sizes?","Three: 4 KB, 16 KB, and 64 KB.",y
What do translation granules provide in ARM v8?,Different page sizes and larger contiguous memory sections called regions.,y
What are regions in ARM v8 CPUs?,Contiguous memory areas with separate privilege and access rules.,y
"For a 4 KB translation granule in ARM v8, what are the associated page and region sizes?","Page Size: 4 KB; Region Sizes: 2 MB, 1 GB.",y
"For a 16 KB translation granule in ARM v8, what are the associated page and region sizes?",Page Size: 16 KB; Region Size: 32 MB.,y
"For a 64 KB translation granule in ARM v8, what are the associated page and region sizes?",Page Size: 64 KB; Region Size: 512 MB.,y
How many levels of paging do 4-KB and 16-KB translation granules support in ARM v8?,Up to four levels of paging.,y
How many levels of paging do 64-KB translation granules support in ARM v8?,Up to three levels of paging.,y
"Although ARM v8 is a 64-bit architecture, how many bits are currently used?",Only 48 bits are currently used.,y
What is the TTBR register in ARM v8?,"It is the translation table base register, an ARM v8 CPU register pointing to the level 0 (outer) page table for the current thread.",y
"When using a 4-KB granule with all four paging levels, which bits represent the offset within the page?",Bits 0-11 represent the offset within the 4-KB page.,y
What can table entries for paging levels 1 and 2 refer to in ARM v8?,Another table or a region.,y
"If a Level-1 page table entry refers to a 1-GB region, which bits are used as the offset?",The low-order 30 bits (0-29).,y
"If a Level-2 page table entry refers to a 2-MB region, which bits are used as the offset?",The low-order 21 bits (0-20).,y
How many levels of TLBs does ARM architecture support?,Two levels.,y
Describe the inner level of TLBs in ARM architecture.,"It consists of two micro TLBs (one for data, one for instructions), and they support ASIDs.",y
What is a micro TLB in ARM CPUs?,"ARM CPU inner-level TLBs, one for instructions and one for data.",y
Describe the outer level of TLBs in ARM architecture.,It consists of a single main TLB.,y
What is the main TLB in ARM CPUs?,ARM CPU outer-level TLB; checked after micro TLB lookup and before page table walk.,y
Where does the address translation process begin in ARM architecture TLBs?,At the micro-TLB level.,y
What happens if there's a micro-TLB miss during address translation in ARM?,The main TLB is checked.,y
What happens if both the micro-TLB and main TLB miss during address translation in ARM?,A page table walk is performed in hardware.,y
What is a key characteristic of memory in modern computer systems?,"It is central to modern computer systems and is a large array of bytes, each with its own address.",y
What mechanism is used for address space allocation?,Base and limit registers.,y
"Define ""Base register"".",The smallest legal physical memory address.,y
"What does ""Limit"" specify in the context of memory address allocation?",The size of the address range.,y
List the different times at which symbolic address references can be bound to physical addresses.,"Compile time, Load time, Execution time.",y
"What is a ""Logical address"" and by what is it generated?",An address generated by the CPU.,y
What is the purpose of the Memory Management Unit (MMU)?,It translates a logical address to a physical address.,y
"Define ""Memory Management Unit (MMU)"".",A hardware component that translates logical addresses to physical addresses.,y
What kind of address does the MMU output?,Physical address.,y
Describe a common memory allocation approach for contiguous memory.,Using contiguous memory partitions of varying sizes.,y
Name the common partition allocation strategies.,"First fit, Best fit, Worst fit.",y
"What are ""First fit"", ""Best fit"", and ""Worst fit""?",Common strategies for allocating memory partitions.,y
How do modern operating systems typically manage memory?,They use paging.,y
How is physical memory divided in systems using paging?,Into fixed-sized blocks called frames.,y
"Define ""Frames"" in the context of memory management.",Fixed-sized blocks into which physical memory is divided in systems using paging.,y
How is logical memory divided in systems using paging?,Into blocks of the same size called pages.,y
"Define ""Pages"" in the context of memory management.","Fixed-sized blocks into which logical memory is divided in systems using paging, where each block is the same size as a frame.",y
How is a logical address structured in a paging system?,It is divided into a page number and a page offset.,y
"What is the ""Page number"" used for in paging?",It serves as an index into a per-process page table.,y
"What information does a ""Page table"" contain?",It contains the frame in physical memory that holds the corresponding page.,y
"Define ""Page table"".","A data structure, typically per-process, that maps logical page numbers to physical frames.",y
"What does the ""Offset"" represent in a logical address in paging?",It represents the specific location within a frame.,y
"Define ""Translation Look-aside Buffer (TLB)"".",A hardware cache of the page table.,y
What is the purpose of a TLB?,To speed up address translation by caching frequently accessed page table entries.,y
What information does each entry in a TLB contain?,A page number and its corresponding frame.,y
Describe the process of address translation using a TLB.,1. Get the page number from the logical address. 2. Check if the frame for the page is in the TLB. 3. If in TLB: frame obtained from TLB (TLB hit). 4. If not in TLB: retrieve from page table (TLB miss).,y
"Define ""Hierarchical paging"".",A memory management technique where the logical address is divided into multiple parts for different page table levels.,y
What problem arises with hierarchical paging when expanding addresses beyond 32 bits?,"It leads to a large number of hierarchical levels, increasing overhead.",y
What strategies are used to address the problem of many hierarchical levels with expanding addresses?,Hashed page tables and Inverted page tables.,y
"Define ""Swapping"".",The process of moving pages from physical memory to disk to increase the degree of multiprogramming.,y
What is the purpose of swapping?,To increase the degree of multiprogramming by moving less active pages to disk.,y
Describe the paging characteristics of Intel's 32-bit architecture.,It uses two levels of page tables and supports 4-KB or 4-MB page sizes.,y
"What is ""Page-address extension"" (PAE)?",A feature that allows 32-bit processors to access a physical address space greater than 4 GB.,y
What memory management technique do x86-64 and ARM v8 architectures use?,They are 64-bit architectures that use hierarchical paging.,y
