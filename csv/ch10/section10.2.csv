Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary characteristic of demand paging?,Loading the entire program into physical memory before execution.,Loading program pages into memory only when they are needed during execution.,Storing all program pages permanently in physical memory.,Executing programs directly from secondary storage without loading them into RAM.,Prioritizing the loading of kernel pages over user program pages.,B,"Demand paging specifically loads pages into memory only when they are accessed or 'demanded' by the running program, rather than loading the entire program at once."
Which problem is primarily addressed by the use of demand paging?,Insufficient CPU processing speed for large programs.,"The need to load an entire program into physical memory, even if not all parts are immediately required.",Difficulty in managing multiple processes simultaneously.,The high cost of secondary storage devices.,Lack of proper security mechanisms for memory access.,B,Demand paging solves the problem of needing to load an entire program (which may include unneeded parts like unselected options) by only loading portions as they are accessed.
"In a system utilizing demand paging, what happens to pages that are never accessed during a program's execution?",They are loaded into a special cache for future use.,They remain in secondary storage and are never loaded into physical memory.,They are loaded into physical memory at program startup but later swapped out.,They cause a page fault upon program termination.,They are marked as invalid and immediately deleted from secondary storage.,B,"A key benefit of demand paging is that unaccessed pages are never loaded into physical memory, saving memory resources."
What hardware support is essential for distinguishing between pages that are in memory and those that are in secondary storage in a demand paging system?,A dedicated memory management unit (MMU) with a translation lookaside buffer (TLB).,A valid-invalid bit scheme in the page table.,High-speed solid-state drives for secondary storage.,Multiple CPU cores for parallel processing.,A large amount of RAM.,B,The valid-invalid bit in each page-table entry is used by hardware to indicate whether a page is legal and in memory (valid) or not (invalid).
"In the context of demand paging's valid-invalid bit scheme, what does a ""valid bit"" typically signify?",The page is corrupted and needs to be reloaded.,The page is legal and currently resides in physical memory.,The page is protected and cannot be modified.,The page is in secondary storage and needs to be swapped in.,The page is part of the operating system kernel.,B,A valid bit indicates that the corresponding page is both part of the process's logical address space and is currently loaded into a physical memory frame.
"What does an ""invalid bit"" in a page-table entry signify in a demand paging system?",The page contains invalid data and should be discarded.,"The page is legal and in memory, but read-only.","The page is either not a valid part of the logical address space, or it is valid but currently in secondary storage.",The page has been recently accessed and is likely to be accessed again.,The page is exclusively reserved for operating system use.,C,"An invalid bit indicates one of two possibilities: either the page address is illegal (not in the process's logical address space), or it is legal but currently resides in secondary storage."
"What immediately triggers a ""page fault"" in a demand paging system?",A process attempting to write to a read-only page.,The operating system deciding to swap out a less-used page.,An access attempt to a page marked as invalid in the page table.,The CPU requesting an instruction that is already in memory.,A system administrator manually initiating a page swap.,C,A page fault is explicitly defined as occurring when an access attempt is made to a page whose corresponding page-table entry is marked invalid.
What is the first action taken by the system immediately after a page fault occurs?,The process is immediately terminated.,The requested page is read from secondary storage.,A trap to the operating system is generated.,The page table is updated to mark the page as valid.,A new free frame is allocated.,C,"The text states, ""Access to invalid page → page fault. Page fault causes trap to OS."" This is the immediate consequence before any handling procedure begins."
"According to the provided text, what is the first step the operating system performs when handling a page fault?",Find a free frame in physical memory.,Schedule a secondary storage operation to read the page.,Check an internal table (like the process control block) to validate the memory access.,Modify the page table to mark the page as valid.,Restart the interrupted instruction.,C,"The first step in the page fault handling procedure is ""Check internal table (process control block) for valid/invalid memory access."""
"During the page fault handling procedure, if the OS determines that the memory access causing the fault is invalid (e.g., beyond the process's logical address space), what action is taken?",The page is loaded into memory regardless.,The process is terminated.,The page is moved to swap space.,The page table is updated with a valid bit.,"An error log is created, and the instruction is retried.",B,"Step 2 of the page fault handling procedure states: ""If invalid, terminate process."""
What is the final step in the page fault handling procedure as described in the text?,The process control block is updated.,The operating system finds a free frame.,The page is read from secondary storage.,The interrupted instruction is restarted.,The page is marked as invalid in the page table.,D,"The last step listed in the procedure is ""Restart interrupted instruction; process accesses page as if always in memory."""
"What defines ""pure demand paging""?",All pages are pre-loaded into memory before execution begins.,No pages are ever swapped out once loaded into memory.,"The process starts with no pages in memory, and pages are faulted in as needed.",Only read-only pages are loaded into memory on demand.,"Memory pages are only loaded from the file system, not swap space.",C,"Pure demand paging is defined as starting a process with no pages in memory, and then faulting for pages only as they are referenced."
"How does the ""locality of reference"" principle relate to the performance of demand paging?",It guarantees that all pages will be loaded into memory at startup.,"It increases the probability of page faults, thus degrading performance.","It suggests that processes access memory in patterns, which allows demand paging to perform reasonably well.","It indicates that memory access times are constant, regardless of paging.",It is irrelevant to the efficiency of demand paging.,C,"The text states, ""Programs tend to have locality of reference → reasonable demand paging performance,"" meaning the non-random access patterns make demand paging viable."
"What is the primary role of ""secondary memory"" (or swap device/swap space) in a demand paging system?",To store the entire operating system kernel.,To serve as a temporary cache for frequently accessed pages.,To hold pages that are not currently resident in main memory.,To execute programs directly without loading them into RAM.,To maintain a log of all page faults.,C,"Secondary memory, specifically swap space, is explicitly described as holding non-main-memory pages."
A crucial requirement for the successful implementation of demand paging is the ability to:,Pre-allocate all required memory frames at compile time.,Completely ignore the state of a process after a page fault.,Restart any instruction after a page fault has been handled.,Always keep the entire program in main memory.,Prevent any process from accessing pages in secondary storage.,C,"The text highlights this as a ""Crucial requirement: ability to restart any instruction after page fault,"" which involves saving and restoring process state."
"For instructions that modify multiple memory locations (like IBM System 360/370 MVC), how can a page fault be handled to ensure correct process state restoration?","The entire instruction is always aborted, and the process is restarted from scratch.",The instruction is immediately retried without any state restoration.,"The system uses microcode to check both ends of blocks before modification, or uses temporary registers to restore overwritten values.",Such instructions are prohibited in demand-paged systems.,The CPU automatically re-executes only the failed part of the instruction.,C,The text provides two solutions for this difficulty: microcode checks before modification or using temporary registers to restore old values on fault.
"From the perspective of the running process, how should paging be perceived?",It should be explicitly managed by the process's code.,It should be visible and require process intervention for page swaps.,"It should be transparent, meaning the process is unaware of it.",It should cause noticeable delays and require user interaction.,It should only occur during process startup.,C,"The text states, ""Paging should be transparent to process."""
"What is the primary purpose of the ""free-frame list"" maintained by the operating system?",To track all pages currently loaded into memory.,To store information about processes terminated due to page faults.,To provide a pool of available physical memory frames for allocation to processes.,To list all pages currently residing in secondary storage.,To manage the cache memory hierarchy.,C,"The free-frame list is described as a ""pool of free frames for page faults,"" and also for stack/heap segment expansion."
"What is the purpose of ""zero-fill-on-demand"" in the context of allocating free frames?",To fill unused frames with random data for testing purposes.,To prevent memory fragmentation.,To ensure security by clearing previous data from a frame before allocating it to a new process.,To optimize memory access by pre-fetching data.,To count the number of available frames.,C,"Zero-fill-on-demand is described as ""frames 'zeroed-out' before allocation (security)."""
"What does ""effective access time"" refer to in the context of demand-paged memory performance?",The time it takes for the CPU to access its internal registers.,"The average time required to access a memory location, considering both hits and page faults.",The maximum possible time for a memory access in the worst-case scenario.,The time it takes to transfer data between the CPU and cache.,The time it takes for a page to be written back to secondary storage.,B,"Effective access time is defined as the measured/calculated time to access something, and the formula explicitly combines memory access time with page fault time based on the probability of a fault."
Which of the following is NOT listed as a component of page fault service time?,Servicing the page-fault interrupt.,Reading the page into memory from secondary storage.,Restarting the interrupted process.,Compressing the page data before writing to swap space.,All listed are components.,D,"The three listed components are servicing the interrupt, reading the page, and restarting the process. Compressing data is not mentioned as a direct component of service time."
"Approximately how long does a typical HDD page-switch operation (including latency and seek time) take, as stated in the text?",10 nanoseconds,100 microseconds,8 milliseconds,3 seconds,200 nanoseconds,C,"The text explicitly states, ""HDD page-switch time: ~8 milliseconds (3ms latency, 5ms seek, 0.05ms transfer)."""
How does the page-fault rate (p) affect the effective access time in a demand paging system?,It is inversely proportional to the effective access time.,It has no significant impact on effective access time.,It is directly proportional to the effective access time.,It only affects the seek time of the hard disk.,It reduces the memory access time (ma).,C,"The formula and subsequent example clearly show that as 'p' increases, the effective access time also increases, making it directly proportional."
"To maintain acceptable performance in a demand paging system (e.g., less than 10% slowdown with an 'ma' of 200ns and page fault time of 8ms), what must be true about the page-fault rate (p)?",p must be exactly 1.,p must be greater than 0.1.,"p must be very low, specifically less than 0.0000025.",p should be close to 1/1000.,p should be around 8 milliseconds.,C,"The example calculation explicitly states that for a slowdown less than 10% (220ns effective access time), ""p < 0.0000025 (fewer than 1 fault per 399,990 accesses)."""
"Generally, how does I/O to swap space compare to I/O to the file system?",Swap space I/O is slower due to complex file system structures.,Swap space I/O is faster because it often involves larger blocks and no file lookups.,Both have identical performance characteristics.,File system I/O is always preferred for paging operations.,"Swap space is only used for caching, not for actual paging.",B,"The text states, ""Swap space I/O generally faster than file system I/O (larger blocks, no file lookups)."""
"In some operating systems like Linux and BSD UNIX, where are binary executables demand-paged from, and what acts as their backing store?","They are copied entirely to swap space at startup, which acts as the backing store.","They are demand-paged directly from the file system, which acts as their backing store.",They are kept entirely in RAM and never paged out.,They are always generated on-the-fly from source code.,They use anonymous memory backed by swap space.,B,"The text states: ""Demand-page binary executables directly from file system; overwrite frames when replaced (never modified); file system acts as backing store (Linux, BSD UNIX)."""
For what type of memory is swap space typically always used as a backing store when pages are modified and paged out?,Read-only code segments of binary executables.,Shared library pages.,"Anonymous memory, such as stack and heap.",Pages that have been compressed.,Files mapped into memory by multiple processes.,C,"The text states, ""Anonymous memory (stack, heap) still uses swap space."" The glossary also defines anonymous memory as ""Memory not associated with a file; stored in swap space if dirty and paged out."""
How do mobile operating systems like iOS typically handle memory management without traditional swapping?,They pre-load all necessary pages into memory.,They demand-page from the file system and reclaim read-only pages if memory is constrained.,They primarily use compressed memory as their only form of virtual memory.,They store all anonymous memory in non-volatile storage.,They rely solely on larger physical memory to avoid paging altogether.,B,"The text states: ""Mobile OS (e.g., iOS) typically no swapping: demand-page from file system, reclaim read-only pages if memory constrained."""
What alternative memory management technique is mentioned as being used in mobile systems in place of traditional swapping?,Memory pooling.,Compressed memory.,Static memory allocation.,Direct memory access (DMA).,Disk caching.,B,"The text explicitly mentions, ""Compressed memory is an alternative to swapping in mobile systems."""
"According to the glossary, what is ""swap space""?",The portion of RAM used for caching frequently accessed data.,Secondary storage backing-store space for paged-out memory.,A temporary directory for downloaded files.,The area in physical memory where the operating system kernel resides.,A list of available free memory frames.,B,"The glossary defines swap space as ""Secondary storage backing-store space for paged-out memory."""
"What does ""page-fault rate"" measure?",The speed at which pages can be loaded into memory.,The total number of page faults that have occurred.,How often a page fault occurs per memory access attempt.,The amount of memory occupied by invalid pages.,The average time taken to service a page fault.,C,"The glossary defines page-fault rate as ""Measure of how often a page fault occurs per memory access attempt."""
"In the context of memory management, what is ""anonymous memory""?",Memory that is shared between multiple processes.,"Memory not associated with a file, typically stored in swap space if paged out and dirty.",Memory segments containing only operating system code.,Memory used for storing file system metadata.,Memory that has been encrypted for security purposes.,B,"The glossary defines anonymous memory as ""Memory not associated with a file; stored in swap space if dirty and paged out."""
"At system startup, what is the initial state of the free-frame list?","It is empty, as all memory is initially reserved by the kernel.",It contains all available physical memory on the list.,It contains only frames allocated for the stack and heap.,It is populated only after the first page fault occurs.,It stores only frames that have been zero-filled.,B,"The text states: ""System startup: all available memory on free-frame list."""
"Beyond simply loading pages as needed, what general benefit does demand paging provide?",It eliminates the need for any secondary storage.,It ensures faster CPU clock speeds.,It enables more efficient memory use by loading only needed portions.,It prevents all forms of memory fragmentation.,It makes processes completely immune to performance slowdowns.,C,"One of the initial benefits listed is ""More efficient memory use by loading only needed portions."""
Demand paging is noted to be similar to which other memory management technique?,Segmentation.,Contiguous memory allocation.,Paging with swapping.,Static memory allocation.,Memory compression.,C,"The text mentions, ""Similar to paging with swapping."""
"In demand paging, what exactly constitutes a ""page fault""?",An error caused by trying to access a non-existent memory address.,A successful retrieval of data from the CPU cache.,A reference to a page that is currently not resident in physical memory.,An attempt to modify a read-only page.,The completion of a page write operation to secondary storage.,C,"The glossary defines page fault as ""Fault from reference to a non-memory-resident page."""
