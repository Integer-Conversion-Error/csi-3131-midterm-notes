Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following is a primary benefit of demand paging in memory management?,It ensures all pages are loaded into memory simultaneously for faster access.,It reduces the degree of multiprogramming to prevent memory contention.,It saves I/O by loading only the pages that are actively used.,It eliminates the need for swap space on secondary storage.,It guarantees that no page faults will occur during process execution.,C,"Demand paging saves I/O by loading only used pages, rather than loading an entire process into memory at once."
What is 'over-allocating memory' in the context of demand paging?,Providing a process with more physical memory frames than it requests.,"Allocating more virtual memory than physical memory is available, increasing the degree of multiprogramming.",Reserving all available memory frames for a single process to ensure optimal performance.,"Loading all pages of a process into memory at startup, regardless of immediate need.",The process of deallocating memory frames that are no longer in use.,B,"Over-allocating memory means providing access to more virtual memory than physically available, which can increase the degree of multiprogramming by allowing more processes to run concurrently."
A situation where a page fault occurs but no free memory frames are available is a manifestation of which memory management issue?,Optimal page replacement,Belady's anomaly,Over-allocation of memory,Insufficient I/O buffer space,The use of a dirty bit,C,"Over-allocation manifests as a page fault with no free frames, indicating that the system has committed more virtual memory than it can currently support with physical frames."
"When a free frame is needed but none are available, what action is taken to free up a frame?",The system immediately terminates the process causing the page fault.,"The contents of a selected frame are written to swap space, and its page table entry is updated.",The operating system waits for the user to manually free up memory.,All other processes in memory are swapped out to create space.,The CPU utilization is drastically reduced to free memory.,B,"If no free frame is available, a page-replacement algorithm selects a victim frame. Its contents are written to swap space (if modified), and its page table entry is updated to indicate it's no longer in memory."
What is the purpose of a 'modify bit' (or 'dirty bit') in the context of page replacement?,To indicate that a page has been recently referenced by the CPU.,"To mark a page as read-only, preventing any writes.","To signify that a page's contents have been altered, requiring it to be written back to secondary storage before replacement.",To prioritize pages that are frequently used for replacement.,To identify pages that are part of the operating system kernel.,C,"The modify bit, set by hardware, indicates if a page has been written to. If it's set, the page must be written back to secondary storage before being replaced; if not, it can simply be discarded, significantly reducing page-fault service time."
Which of the following is NOT one of the two major problems for demand paging that algorithms aim to solve?,Which frames to replace (page-replacement algorithm).,How many frames to allocate to each process (frame-allocation algorithm).,How to convert logical addresses to physical addresses.,Minimizing the page-fault rate.,Selecting a victim frame.,C,"The two major problems for demand paging are the frame-allocation algorithm (how many frames) and the page-replacement algorithm (which frames). Converting logical to physical addresses is handled by the MMU, not a problem demand paging algorithms solve directly."
What is a 'reference string' primarily used for in the context of page replacement?,To identify the physical location of a page in memory.,To determine the optimal size of the swap space.,To trace the sequence of memory accesses for evaluating page-replacement algorithms.,To allocate frames to different processes dynamically.,To encrypt data before it is written to secondary storage.,C,"A reference string is a trace of memory accesses (specifically, page numbers) used to evaluate the performance of different page-replacement algorithms by simulating their behavior."
Which page replacement algorithm is known for its simplicity and for replacing the page that has been in memory the longest?,Least Recently Used (LRU),Optimal (OPT),"First-In, First-Out (FIFO)",Least Frequently Used (LFU),Second-Chance,C,"FIFO (First-In, First-Out) replaces the oldest page in memory, which is the first one that was brought in. It is easy to understand and program."
What is 'Belady's anomaly'?,The phenomenon where the page-fault rate decreases as the number of allocated frames increases.,A situation where a page replacement algorithm cannot find a victim frame.,The counter-intuitive result where the page-fault rate increases even when more memory frames are allocated to a process.,The inability of an algorithm to use a modify bit effectively.,The problem of having too many free frames in memory.,C,"Belady's anomaly is a specific issue where, for some page-replacement algorithms (like FIFO), increasing the number of available memory frames can paradoxically lead to an increase in the page-fault rate."
Which page replacement algorithm guarantees the lowest possible page-fault rate but is impossible to implement in practice for general-purpose computing?,Least Recently Used (LRU),"First-In, First-Out (FIFO)",Least Frequently Used (LFU),Optimal (OPT),Second-Chance,D,"The Optimal (OPT) page-replacement algorithm replaces the page that will not be used for the longest period of time, thus guaranteeing the lowest page-fault rate. However, it requires future knowledge of the reference string, making it impractical for real-world implementation."
Which page replacement algorithm approximates the Optimal algorithm by replacing the page that has not been used for the longest period of time?,"First-In, First-Out (FIFO)",Most Frequently Used (MFU),Least Recently Used (LRU),Second-Chance,Additional-reference-bits,C,"The Least Recently Used (LRU) algorithm approximates the Optimal algorithm by choosing the page that has not been accessed for the longest duration, based on past usage."
Why is true LRU implementation often expensive?,It requires frequent disk I/O operations for every page replacement.,It needs complex software to track page usage patterns.,It requires substantial hardware assistance and per-memory-reference updates.,"It suffers from Belady's anomaly, leading to high page fault rates.",It necessitates a very large amount of swap space.,C,"True LRU implementation, whether using counters or a stack, requires updating usage information (e.g., timestamps or stack reordering) on every memory reference, which is computationally and hardware-intensively expensive."
What is a 'stack algorithm' in the context of page replacement?,An algorithm that uses a stack data structure to store pages in memory.,A class of algorithms that suffer from Belady's anomaly.,An algorithm that prioritizes pages based on their stack depth in the program's call stack.,A class of page-replacement algorithms that do not suffer from Belady's anomaly.,An algorithm that must be implemented using a hardware-supported stack.,D,"A stack algorithm is a class of page-replacement algorithms that have the property that the set of pages in memory with N frames is always a subset of the pages in memory with N+1 frames. This property ensures they do not suffer from Belady's anomaly, and LRU is an example."
Which hardware component is crucial for LRU-approximation algorithms like the 'additional-reference-bits' algorithm?,A dedicated high-speed cache memory.,A direct memory access (DMA) controller.,A reference bit set by hardware on page access.,A sophisticated I/O buffer management unit.,A specialized cryptographic co-processor.,C,"LRU-approximation algorithms like the additional-reference-bits algorithm rely on a 'reference bit' (or 'use bit') that is automatically set by hardware whenever a page is referenced, providing a basic indication of recent usage."
"In the 'additional-reference-bits' algorithm, how is the history of page use primarily tracked?",By maintaining a precise timestamp of the last access for each page.,By storing page references in a FIFO queue.,By periodically shifting the reference bit into an 8-bit byte for each page.,By counting the total number of accesses for each page since system startup.,By using a doubly linked list to order pages by recency.,C,"The additional-reference-bits algorithm uses an 8-bit byte for each page. On a timer interrupt, the current reference bit is shifted into the most significant bit of this byte, and the other bits are shifted right, creating a history (shift register) of recent usage."
The 'second-chance page-replacement algorithm' is also known by what other name?,Optimal algorithm,Clock algorithm,Stack algorithm,LFU algorithm,MFU algorithm,B,The second-chance page-replacement algorithm is also commonly referred to as the 'clock' algorithm because of its implementation using a circular queue (like a clock face) with a pointer.
"In the 'second-chance algorithm', what happens if a selected page's reference bit is 1?",The page is immediately replaced.,The page is written to disk and then replaced.,"The reference bit is cleared, the arrival time is reset, and the page is given a 'second chance'.",The page is moved to the head of the queue for immediate replacement.,The system determines it's an error and halts.,C,"If a selected page's reference bit is 1, the second-chance algorithm clears the bit, resets the page's 'arrival time' to the current time, and gives it a 'second chance' by moving the pointer to the next page without replacing it immediately."
The 'enhanced second-chance algorithm' primarily uses which two bits to classify pages for replacement?,Valid bit and Present bit,Read bit and Write bit,Protection bit and Share bit,Reference bit and Modify bit,Access bit and Execute bit,D,"The enhanced second-chance algorithm considers the (reference bit, modify bit) pair to classify pages into four categories, allowing for a more informed replacement decision that prioritizes clean, unused pages."
"According to the 'enhanced second-chance algorithm', which class of pages is considered the 'best to replace' due to minimal overhead?","(0, 1) - not recently used but modified","(1, 0) - recently used but clean","(0, 0) - neither recently used nor modified","(1, 1) - recently used and modified",All classes are equally good for replacement.,C,"The (0, 0) class (neither recently used nor modified) is the best to replace because the page hasn't been used lately and doesn't need to be written out to secondary storage, thus minimizing overhead."
Which counting-based page replacement algorithm selects the page with the smallest access count?,Most Frequently Used (MFU),Optimal (OPT),Least Recently Used (LRU),Least Frequently Used (LFU),"First-In, First-Out (FIFO)",D,"The Least Frequently Used (LFU) algorithm replaces the page that has the smallest count of references, assuming it's the least useful."
A common problem with the LFU algorithm is that a page heavily used initially might remain in memory even if unused later. What is a suggested solution for this?,Periodically resetting all counts to zero.,Converting it to an LRU algorithm.,Shifting counts right periodically to create an exponentially decaying average.,Increasing the count of frequently used pages to infinity.,Only allowing pages with zero counts to be replaced.,C,"To address the issue where initially heavily used pages retain high counts and aren't replaced, LFU can be modified by periodically shifting counts right, effectively creating an exponentially decaying average that favors more recent usage patterns."
Page-buffering algorithms are typically used in addition to main page-replacement algorithms. What is one of their benefits?,They eliminate the need for swap space entirely.,They ensure that all pages are modified before being written to disk.,They allow a process to restart faster after a page fault by reading the desired page into a free frame before the victim is written out.,They reduce the total number of page faults that occur.,They are a direct replacement for the LRU algorithm.,C,"Page-buffering algorithms often maintain a pool of free frames. On a page fault, the desired page can be read into a free frame from this pool immediately, allowing the process to restart faster, even if the victim frame has not yet been written out to swap space."
What is 'raw disk' or 'raw I/O' in the context of applications and page replacement?,A highly compressed format for storing data on disk to save space.,"A method for accessing secondary storage directly as an array of logical blocks, bypassing file-system services.",A technique that uses solid-state drives exclusively for all I/O operations.,A system where all disk operations are buffered in physical memory before being written.,A protocol for secure data transmission over a network.,B,"Raw disk (or raw I/O) refers to allowing special programs to use secondary storage directly as a large sequential array of logical blocks, completely bypassing standard file-system services like demand paging, locking, prefetching, and directory management."
"Why might some applications, like databases, prefer to use raw disk access over standard OS virtual memory buffering?",Raw disk access allows them to utilize unlimited virtual memory.,Applications can have a better understanding of their specific memory and storage usage patterns than general-purpose OS algorithms.,Raw disk access enables the application to run directly on the hardware without an OS.,It provides a mechanism for automatic data encryption and compression.,Raw disk access eliminates the need for any form of page replacement.,B,"Applications such as databases often perform worse with OS virtual memory buffering because they are designed with their own sophisticated memory and storage management, which can be more efficient for their specific workloads than the general-purpose algorithms provided by the OS. Raw disk access allows them to implement their own optimized I/O."
