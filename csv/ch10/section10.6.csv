Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following best defines 'thrashing' in an operating system context?,A process spending more time executing than paging.,"A low rate of page faults, indicating efficient memory utilization.",High paging activity where a process spends more time paging than executing.,The process of swapping entire processes between main memory and disk.,The mechanism by which the CPU scheduler increases multiprogramming.,C,"Thrashing is defined as high paging activity where a process spends more time paging than executing, leading to severe performance problems."
What is a primary symptom of a process that is thrashing?,It rarely experiences page faults.,It replaces pages that are not needed immediately.,"It quickly page-faults and replaces pages needed immediately, leading to repeated faults.",It consistently uses its minimum required frames efficiently.,Its CPU utilization remains consistently high.,C,"A process without 'enough' frames (minimum needed for working set) will quickly page-fault and replace pages needed immediately, causing it to fault again and again."
Which of the following operating system behaviors can exacerbate or cause thrashing?,Maintaining a high CPU utilization by reducing multiprogramming.,Increasing the degree of multiprogramming when CPU utilization is low.,Implementing a local page-replacement algorithm for all processes.,Allocating enough frames to each process to cover its working set.,Prioritizing processes with high page-fault rates for CPU time.,B,"The text describes a scenario where low CPU utilization prompts the OS to increase multiprogramming, which can lead to processes taking frames from each other, increasing page faults, and eventually resulting in thrashing as CPU utilization drops further and the OS continues to increase multiprogramming."
How does the use of a global page-replacement algorithm contribute to thrashing?,It ensures each process maintains its minimum frame requirement.,"It allows a thrashing process to steal frames from other processes, causing them to fault.","It prevents new processes from being initiated, thus reducing multiprogramming.",It allocates frames based on a process's working-set size.,It limits paging device queues by prioritizing non-faulting processes.,B,"A global page-replacement algorithm replaces pages without regard to the process they belong to. This allows a process needing more frames (e.g., one that's starting to thrash) to take frames from other processes, which then causes those processes to fault, cascading the problem across the system."
"During thrashing, what typically happens to system throughput and CPU utilization?",Both system throughput and CPU utilization increase.,"System throughput increases, but CPU utilization decreases.",Both system throughput and CPU utilization plunge/drop sharply.,"System throughput plunges, while CPU utilization remains stable.","CPU utilization increases rapidly, while throughput remains low.",C,"The text states that when thrashing occurs, 'system throughput plunges' and 'CPU utilization drops sharply' (as illustrated in Figure 10.6.1). Processes spend all their time paging, and no work gets done."
"According to the text, what is the most direct action to stop thrashing once it has begun?",Increase the degree of multiprogramming.,Implement a global page-replacement algorithm.,Decrease the degree of multiprogramming.,Increase the system's effective memory-access time.,Allow processes to frequently change their working sets.,C,The text explicitly states: 'To stop thrashing: decrease degree of multiprogramming.'
What is the primary advantage of a 'local replacement algorithm' or 'priority replacement algorithm' in mitigating thrashing?,It allows a thrashing process to steal frames from other processes more efficiently.,It ensures that all processes have an equal number of frames.,It prevents a thrashing process from stealing frames from other processes.,It completely eliminates the need for a paging device.,It automatically adjusts the working-set window size for each process.,C,Local (or priority) replacement algorithms are defined as avoiding thrashing by not allowing a process to steal frames from other processes. A process selects pages only from its own frames.
"While local replacement algorithms help limit thrashing effects, why do they not entirely solve the problem?","They increase the CPU utilization, leading to more processes being admitted.",They don't prevent processes from needing more frames than available in their own set.,"Thrashing processes still queue for the paging device, increasing average service time for page faults for all processes.",They lead to an increase in the number of frames required for each process.,They only work for processes with very small working sets.,C,"The text explains that while local replacement prevents a thrashing process from stealing frames, the thrashing processes still queue for the paging device, leading to increased average service time for page faults and, consequently, increased effective access time for all processes."
"What is the fundamental approach to preventing thrashing, as stated in the text?",To always use a global page-replacement algorithm.,To continuously increase the degree of multiprogramming.,To provide a process with enough frames.,To ignore the page-fault rate of processes.,To exclusively use the Page-Fault Frequency strategy.,C,The text explicitly states: 'To prevent thrashing: provide process with enough frames.'
"What concept is introduced to determine how many frames a process needs, based on the pages it actually uses?",The Page-Fault Frequency strategy.,The Global Replacement Algorithm.,The Locality Model.,The Least Recently Used (LRU) algorithm.,"The First-In, First-Out (FIFO) algorithm.",C,The text states: 'How many frames needed? Look at frames actually used -> locality model.'
"According to the locality model, what is a 'locality'?",The total number of frames available in physical memory.,The set of all pages ever referenced by a process.,The set of pages actively used together by a process during a phase of its execution.,A fixed memory region allocated to a process at startup.,The physical address space where a process's code resides.,C,A 'locality' is defined as the set of pages actively used together. The locality model states that a process moves from locality to locality during execution.
The working-set model is based on which fundamental assumption?,Processes typically require an infinite number of frames.,Memory accesses are completely random.,The principle of locality.,All processes should have the same page-fault frequency.,CPU utilization is inversely proportional to multiprogramming.,C,"The working-set model is based on the locality assumption, meaning that programs exhibit patterned memory accesses, not random ones."
"In the working-set model, what does the parameter Δ (Delta) define?",The maximum allowed page-fault frequency.,The total number of available frames in memory.,"The working-set window, representing the most recent page references.",The number of processes that can be simultaneously active.,The minimum number of frames required for any process.,C,"The working-set model uses parameter Δ to define the 'working-set window', which is the time interval or number of page references examined to determine the working set."
How is a 'working set' defined in the working-set model?,All pages currently present in physical memory.,The set of all pages ever referenced by a process since its inception.,The set of pages referenced in the most recent Δ (Delta) page references.,The minimum number of frames required for a process to execute without faulting.,The sum of all working-set sizes for all active processes.,C,"The 'working set' is defined as the set of pages in the most recent Δ references, approximating a program's current locality."
"In the working-set model, if the total demand for frames (D) (sum of all $WSS_i$) exceeds the total available frames (m), what is the expected outcome?",The operating system will increase the degree of multiprogramming.,All processes will run with optimal performance.,Thrashing will occur because some processes will lack enough frames.,The working-set window (Δ) will automatically decrease.,The system will automatically switch to a global replacement algorithm.,C,The text states: 'If D > m (total available frames) -> thrashing (some processes lack frames).'
How does an operating system typically manage processes using the working-set model to prevent thrashing?,It randomly allocates frames to processes without monitoring their working sets.,It decreases the degree of multiprogramming whenever CPU utilization is high.,"It allocates enough frames for each process's working-set size; if total demand exceeds available frames, it suspends a process.",It constantly swaps all processes in and out of memory to balance load.,It maintains a fixed number of frames for all processes regardless of their demand.,C,"The OS monitors the working set of each process, allocates enough frames for its size. If the sum of working-set sizes exceeds available frames, the OS suspends a process, swaps out its pages, reallocates frames, and restarts it later."
What is a major difficulty in implementing the working-set model precisely?,Determining the total number of available physical frames.,Calculating the page-fault frequency accurately.,Tracking the moving working-set window in real-time.,Deciding which processes to suspend when memory is insufficient.,Defining what constitutes a 'locality' for a given program.,C,The text points out the difficulty: 'tracking moving working-set window.'
How does an operating system approximate the working-set window in practice?,By continuously monitoring all page references in real-time with no approximation.,By using a fixed-interval timer interrupt and reference bits.,By always assuming an infinite working-set window.,By setting the Delta (Δ) parameter to zero for all processes.,By only considering pages that have been modified (dirty bits).,B,"The working-set window is approximated using a fixed-interval timer interrupt and reference bits. At each interrupt, reference bits are copied and cleared, helping to track recent page usage."
Why was the Page-Fault Frequency (PFF) strategy developed as an alternative to the working-set model for thrashing control?,The working-set model was too simple and not comprehensive enough.,The working-set model was entirely unsuccessful and never used.,"The working-set model was successful and useful for prepaging, but clumsy for thrashing control.","PFF allows for a completely random allocation of frames, simplifying management.",PFF does not require monitoring of page references.,C,"The text states: 'Working-set model successful, useful for prepaging, but clumsy for thrashing control. Page-fault frequency (PFF) strategy: more direct.'"
How does the Page-Fault Frequency (PFF) strategy adjust the number of frames allocated to a process?,"If PFF is too high, it removes frames; if too low, it allocates more frames.",It always allocates a fixed number of frames regardless of PFF.,It ignores the PFF and only considers the process's priority.,"If actual PFF exceeds an upper limit, it allocates another frame; if it falls below a lower limit, it removes a frame.",It only removes frames when the system is about to crash.,D,"The PFF strategy establishes upper and lower bounds on the desired page-fault rate. If the actual PFF exceeds the upper limit, the process needs more frames, so another is allocated. If it falls below the lower limit, the process may have too many frames, so one is removed."
"According to current practice, what is considered the best way to avoid thrashing and swapping?",Continuously monitor and adjust the degree of multiprogramming.,Implement complex working-set and page-fault frequency algorithms.,Include enough physical memory to meet virtual memory demand.,Force all applications to use a local replacement algorithm.,Increase the frequency of timer interrupts for better working-set approximation.,C,The 'Current practice' section states: 'Best practice: include enough physical memory to avoid thrashing/swapping.' This provides the best user experience.
