Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the typical behavior when a user-mode process requests memory from the kernel?,Pages are allocated from the kernel's free page frame list.,Memory is directly allocated from the physically contiguous kernel pool.,A fixed-size 256 KB segment is always granted.,The request is immediately denied due to security policies.,The memory is allocated from a dedicated user-mode heap.,A,User-mode process requests memory typically result in pages being allocated from the kernel's free page frame list.
"When a user-mode process requests a single byte of memory, what type of fragmentation is commonly observed due to the allocation of an entire page frame?",External fragmentation,Internal fragmentation,Contiguous fragmentation,Virtual fragmentation,Paging fragmentation,B,"A single byte request resulting in an entire page frame being granted leads to internal fragmentation, as the full page is allocated but only a small portion is used."
Which of the following is a primary reason why kernel memory is often allocated from a different free-memory pool compared to user-mode memory?,Kernel requests always require larger memory blocks than user-mode processes.,Kernel code and data are always subject to paging.,"Kernel requests vary in data structure sizes, some being less than a page, requiring conservative memory use.",User-mode pages must always be physically contiguous.,Kernel memory is never deallocated once allocated.,C,"Kernel memory allocation differs because kernel requests often involve varying data structure sizes, some less than a page, necessitating conservative memory use to minimize fragmentation."
"Why might hardware devices interacting with physical memory require physically contiguous pages, unlike typical user-mode pages?",Hardware devices use virtual memory interfaces.,User-mode pages are always physically contiguous.,Hardware devices directly interact with physical memory and may not have a virtual memory interface.,Kernel code is always mapped to non-contiguous physical memory.,It's a security measure to prevent unauthorized access.,C,"Hardware devices interact directly with physical memory and often lack a virtual memory interface, thus requiring physically contiguous pages for their operations."
What are the two main strategies discussed for managing kernel free memory?,First-fit and Best-fit,Paging and Swapping,Buddy system and Slab allocation,Segmentation and Partitioning,LIFO and FIFO,C,The text explicitly states 'buddy system' and 'slab allocation' as the strategies for managing kernel free memory.
The 'buddy system' is characterized as a 'power-of-2 allocator'. What does this mean for how it satisfies memory requests?,"It allocates memory in arbitrary sizes, then rounds down to the nearest power of 2.","It satisfies requests in units sized as a power of 2 (e.g., 4 KB, 8 KB, 16 KB).",It always allocates exactly 2 KB or 4 KB segments.,It divides memory into two equal parts repeatedly until the exact size is found.,It only allocates memory if the request is an exact power of 2.,B,A 'power-of-2 allocator' means the buddy system satisfies memory requests in units that are sized as a power of 2.
"If a kernel process requests 21 KB of memory using the buddy system, what is the size of the segment that would typically be allocated?",16 KB,21 KB,24 KB,32 KB,64 KB,D,"Requests not appropriately sized are rounded up to the next highest power of 2. For 21 KB, the next highest power of 2 is 32 KB."
What is the primary advantage of the buddy system for kernel memory management?,It eliminates all forms of internal fragmentation.,It ensures that all memory requests are fulfilled with exact sizes.,It allows for quick combining of adjacent freed segments into larger ones through coalescing.,It guarantees that less than 10% of allocated memory is wasted.,It exclusively allocates non-contiguous memory blocks.,C,A key advantage of the buddy system is its ability to quickly combine adjacent buddies to form larger segments using coalescing.
What is a significant drawback of the buddy system regarding memory utilization?,It requires manual intervention to allocate memory.,It always results in external fragmentation.,It suffers from internal fragmentation due to requests being rounded up to the next power of 2.,It cannot allocate memory segments larger than 4 KB.,It has very slow allocation and deallocation times.,C,A major drawback is the internal fragmentation caused by rounding up memory requests to the next highest power of 2.
"In the context of slab allocation, what is a 'slab' defined as?",A collection of unrelated kernel objects.,One or more physically contiguous pages.,A single byte of allocated memory.,A fixed-size 256 KB segment for kernel data.,A temporary copy of user data for performance.,B,A slab is defined as one or more physically contiguous pages used in slab allocation.
What is a 'cache' in the context of slab allocation?,A single kernel object.,A temporary data storage for CPU registers.,A collection of one or more slabs.,A list of free page frames managed by the kernel.,A mechanism for virtual to physical address translation.,C,"In slab allocation, a cache consists of one or more slabs and is used to store objects of a specific kernel data structure."
"In slab allocation, a single cache is typically maintained for what purpose?",To handle all general-purpose memory requests.,To store executable kernel code.,For each unique kernel data structure.,To manage the free page frame list.,To buffer I/O operations.,C,"Slab allocation uses a single cache for each unique kernel data structure, such as process descriptors or file objects."
"When the slab allocator needs to fulfill a new object request, what is its preferred order of satisfaction?","First from a newly allocated slab, then an empty slab, then a partial slab.","First from an empty slab, then a partial slab, then a newly allocated slab.","First from a partial slab, then an empty slab, then a newly allocated slab.",It randomly picks any available slab.,Only from a full slab after objects are released.,C,"The slab allocator first attempts to find a free object in a partial slab, then an empty slab, and finally allocates a new slab if necessary."
Which of the following is a primary benefit of slab allocation regarding memory fragmentation?,It introduces external fragmentation but reduces internal fragmentation.,It ensures memory is always allocated in fixed 4 KB pages.,It eliminates memory wasted due to fragmentation by returning the exact amount requested for kernel objects.,It relies on periodic defragmentation to consolidate free space.,It rounds up memory requests to the next power of 2.,C,A main benefit of slab allocation is that it avoids memory wasted due to fragmentation by dividing slabs into object-sized chunks and returning the exact amount requested.
How does slab allocation contribute to satisfying memory requests quickly?,By deallocating all objects immediately after use.,By creating objects in advance and making released objects immediately available from the cache.,By always allocating a brand new slab for every request.,By using a best-fit algorithm for memory placement.,By outsourcing memory management to user-mode processes.,B,"Slab allocation speeds up memory requests because objects are created in advance, and released objects are marked free and returned to the cache, making them immediately available for reuse."
"In the Linux kernel's slab allocator, what is the state of a slab if all of its objects are marked as 'used'?",Empty,Partial,Available,Full,Idle,D,A slab is considered 'Full' when all objects within it are marked as 'used'.
"Which Linux kernel memory allocator is specifically designed for systems with limited memory, such as embedded systems?",SLAB,SLUB,SLOB,Buddy system,Page frame allocator,C,"The SLOB allocator is explicitly mentioned as being for systems with limited memory, such as embedded systems."
"What is a significant improvement of the SLUB allocator over the original SLAB allocator in Linux, as mentioned in the text?",It introduced the concept of physically contiguous pages for slabs.,It added per-CPU queues for objects to enhance performance.,"It stores metadata in the 'page' structure instead of with each slab, reducing overhead.",It ensures that all allocated memory is an exact power of 2.,It is primarily used for user-mode memory requests.,C,"The SLUB allocator reduced overhead by storing metadata in the 'page' structure instead of with each slab, and it also removed per-CPU queues for objects."
"The SLOB allocator manages memory through three lists: small, medium, and large. What policy does it use to allocate from the appropriate list?",Least Recently Used (LRU),Best-fit,Worst-fit,First-fit,Round Robin,D,The SLOB allocator allocates from its lists using a first-fit policy.
What is the definition of 'coalescing' in the context of the buddy system?,Dividing a large memory segment into smaller 'buddies'.,Rounding up a memory request to the next highest power of 2.,Combining freed memory in adjacent buddies into larger segments.,Allocating memory from a fixed-size segment of physically contiguous pages.,Marking objects as 'used' in a slab.,C,Coalescing refers to the process of combining freed memory in adjacent buddies to form larger segments.
What defines an 'object' in the context of slab allocation?,A generic block of memory.,A single physically contiguous page.,An instantiation of a kernel data structure.,A cache of memory.,A list of free memory regions.,C,"In slab allocation, an 'object' is an instantiation of a kernel data structure (e.g., process descriptors)."
