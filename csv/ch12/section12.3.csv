Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary goal of the application I/O interface structuring techniques?,To maximize the speed of I/O operations by bypassing the OS kernel.,"To ensure that all I/O devices have unique, non-standardized interfaces for security.","To treat I/O devices uniformly, abstracting away differences and simplifying OS development.","To allow applications direct, unmediated access to hardware device controllers.",To force hardware manufacturers to use only one specific type of I/O device.,C,The text states the overarching goal is to 'treat I/O devices uniformly' which simplifies OS development and allows for abstracting away device differences.
Which of the following approaches are explicitly mentioned as being utilized to achieve uniform treatment of I/O devices?,"Direct hardware manipulation, unmediated access, and polling.","Abstraction, encapsulation, and software layering.",Custom system calls for every device type and dedicated hardware.,"Batch processing, interrupt masking, and memory-mapped registers.","Kernel-level device drivers, but without standard interfaces.",B,"The text explicitly lists 'Approach: abstraction, encapsulation, software layering' as the methods used."
What is the primary purpose of the device-driver layer within the kernel I/O subsystem?,To directly manage application-level requests for I/O without kernel intervention.,To export non-standardized interfaces unique to each device controller.,To hide differences among device controllers from the kernel I/O subsystem.,To provide a direct interface for applications to bypass the kernel entirely for I/O.,To perform complex computations unrelated to device communication.,C,"The text states, 'Purpose of device-driver layer: hide differences among device controllers from kernel I/O subsystem.'"
A device that transfers bytes one by one is classified as what type of device?,Block device,Random-access device,Character-stream device,Synchronous device,Sharable device,C,The text defines 'Character-stream: transfers bytes one by one.'
What is the distinguishing characteristic of a 'block' device compared to a 'character-stream' device?,"Block devices transfer data asynchronously, while character-stream devices transfer synchronously.","Block devices transfer a block of bytes as a unit, while character-stream devices transfer bytes one by one.","Block devices are always random-access, while character-stream devices are always sequential.","Block devices are typically used for printers, while character-stream devices are for disks.","Block devices are dedicated, while character-stream devices are sharable.",B,The text defines 'Block: transfers a block of bytes as a unit' and 'Character-stream: transfers bytes one by one.'
Which characteristic describes an I/O device where the user can seek to any storage location?,Sequential access,Random-access,Character-stream,Synchronous,Dedicated,B,The text defines 'Random-access: user seeks to any storage location.'
What is the key difference between synchronous and asynchronous I/O devices regarding their response times?,"Synchronous devices have irregular/unpredictable response times, while asynchronous devices have predictable response times.",Synchronous devices are always faster than asynchronous devices.,"Synchronous devices have predictable response times and are coordinated, while asynchronous devices have irregular/unpredictable response times and are not coordinated.","Asynchronous devices require direct polling, while synchronous devices use interrupts.","Synchronous devices are dedicated, while asynchronous devices are sharable.",C,"The text states, 'Synchronous: predictable response times, coordinated. Asynchronous: irregular/unpredictable response times, not coordinated.'"
Which type of device can be used concurrently by several processes or threads?,Dedicated,Sequential,Read only,Sharable,Write once,D,The text defines 'Sharable: used concurrently by several processes/threads.'
Which of the following is NOT listed as a major access convention by which the OS groups devices?,Block I/O,Character-stream I/O,Direct Memory Access (DMA),Memory-mapped file access,Network sockets,C,"The text lists Block I/O, Character-stream I/O, Memory-mapped file access, and Network sockets as major access conventions. DMA is a hardware feature, not an access convention."
What is the purpose of an 'escape' or 'back door' mechanism in an OS I/O interface?,To allow the OS to directly control all network traffic.,To provide a standardized way to access all device functionalities.,To transparently pass arbitrary commands to a device driver when the standard interface lacks a specific method.,To restrict application access to sensitive device functions.,To implement file system caching for block devices.,C,The glossary defines 'escape' and 'back door' as a 'Method of passing arbitrary commands when interface lacks standard method.'
"In UNIX, what is the `ioctl()` system call primarily used for?",Performing standard file `read()` and `write()` operations.,Creating new system calls dynamically.,Enabling an application to access any driver functionality without requiring a new system call.,Managing memory allocation for device buffers.,Synchronizing clocks across multiple devices.,C,The text states `ioctl()` 'Enables application to access any driver functionality without new system call.'
"When using `ioctl()` in UNIX, what does the 'major number' of the device identifier typically represent?","The specific instance of a device (e.g., the second hard drive).",The total number of I/O operations performed on the device.,"The device type, which routes I/O requests to the appropriate driver.",The memory address where the device is mapped.,The speed of the I/O device.,C,"The text specifies, 'Major number: device type, routes I/O requests to driver.'"
What does 'raw I/O' imply when accessing secondary storage?,Accessing data through a standard file system interface with full buffering.,"Direct access to secondary storage as a linear array of blocks, bypassing the file system.",Only read-only access to storage devices.,Accessing data via memory-mapped files exclusively.,Transferring data byte by byte without block aggregation.,B,"The text defines 'raw I/O' as 'Direct access to secondary storage as array of blocks, no file system.'"
What is a key benefit of using raw I/O for applications like database management systems (DBMS)?,It allows for standard file system permissions to be enforced more strictly.,It avoids extra buffering and redundant locking provided by the OS file system.,It automatically encrypts data for secure storage.,It enables byte-by-byte data transfer for maximum granularity.,It simplifies the programming interface by eliminating the need for `seek()` commands.,B,"The text notes, 'Raw I/O avoids extra buffering and redundant locking.'"
How does memory-mapped file access typically operate?,It transfers entire files into main memory at once before any access.,"It accesses disk storage via a byte array in main memory, with data transferred only when needed (demand-paged).","It bypasses main memory entirely, transferring data directly between disk and CPU registers.",It requires applications to manage their own disk block allocation.,"It is exclusively used for character-stream devices, not block devices.",B,"The text states, 'Access disk storage via byte array in main memory. Data transfers only when needed (demand-paged virtual memory access), efficient.'"
Which of the following devices typically uses a character-stream interface?,Disk drives,Solid State Drives (SSDs),Keyboards,USB flash drives,CD-ROM drives,C,"The text lists 'keyboards, mice, modems, printers, audio boards' as examples for character-stream interface."
What is the common interface used for network I/O in operating systems like UNIX and Windows?,`read()`/`write()`/`seek()` interface,Character-stream interface,Network socket,Raw I/O interface,Memory-mapped file access,C,"The text states, 'Common interface: network socket (UNIX, Windows).'"
What is the primary function of the `select()` system call in the context of network sockets?,To establish a new network connection.,To send a packet over a network.,To manage a set of sockets and return information on which ones are ready for I/O.,To close an existing network socket.,To convert network addresses between IPv4 and IPv6.,C,"The text describes `select()` as managing 'set of sockets, returns info on ready sockets (packet waiting, room to send).'"
"How does the `select()` system call improve network I/O efficiency, particularly regarding polling?",It introduces additional busy-waiting to ensure data integrity.,It allows applications to poll constantly without performance impact.,It eliminates polling/busy waiting for network I/O by blocking until I/O is possible.,It forces the kernel to ignore I/O requests for a specified duration.,"It streams data directly to the CPU registers, bypassing kernel buffers.",C,"The text states, '`select()` eliminates polling/busy waiting for network I/O.'"
Which of the following is a key function provided by hardware clocks and timers to the OS and applications?,Managing file system permissions.,Performing context switching between processes.,"Providing current time, elapsed time, and setting timers for future operations.",Encrypting network traffic.,Resolving domain names to IP addresses.,C,"The text states, 'Hardware clocks/timers provide: current time, elapsed time, set timer for operation X at time T.'"
What is the primary mechanism by which a programmable interval timer helps the OS with operations like process preemption or cache flushing?,It directly executes the preemption logic.,"It generates an interrupt after a set period, allowing the OS to react.",It provides a continuous stream of time data for passive monitoring.,It stores user application data temporarily.,It synchronizes external network devices.,B,"The text states it can be 'Set to wait, then generate interrupt (once or periodically)' and is 'Used by scheduler (preempt process), disk I/O (flush dirty cache), network (cancel slow operations).'"
How does an OS typically manage more timer requests from user processes than the available hardware timer channels?,By rejecting any requests beyond the hardware limit.,By assigning a dedicated hardware timer to each user process.,"By simulating virtual clocks, maintaining a sorted list of wanted interrupts, and setting the hardware timer for the earliest.",By distributing timer requests across multiple CPUs without coordination.,By requiring user processes to implement their own timing logic.,C,"The text states, 'Supports more timer requests than hardware channels by simulating virtual clocks. Kernel maintains sorted list of wanted interrupts, sets timer for earliest.'"
Which protocol is specifically mentioned for correcting system clock drift?,TCP/IP,HTTP,Network Time Protocol (NTP),FTP,SMTP,C,"The text explicitly mentions, 'System clock drift corrected by protocols (e.g., network time protocol (NTP)).'"
What defines a 'blocking' system call in the context of I/O?,The calling thread continues execution immediately without waiting for I/O.,The system call returns with partial data if the full request cannot be met immediately.,The calling thread is suspended and moved to a wait queue until the I/O operation completes.,"The I/O operation is performed entirely in hardware, bypassing the OS.",It indicates that the I/O operation has failed.,C,"The text defines 'Blocking system call: calling thread suspended, moved to wait queue. Resumes after completion.'"
What is the main difference in behavior between a 'nonblocking' I/O system call and an 'asynchronous' I/O system call regarding data transfer?,"Nonblocking calls always transfer the full amount of data requested, while asynchronous calls never do.","Nonblocking calls suspend the calling thread, while asynchronous calls return immediately.","Nonblocking `read()` returns immediately with available data (full, fewer, or none), while asynchronous `read()` requests a full transfer to complete later, returning immediately.","Asynchronous calls require manual polling, while nonblocking calls use interrupts.","Nonblocking calls are only for network I/O, while asynchronous calls are for disk I/O.",C,"The text states, 'Difference: nonblocking `read()` returns available data immediately (full, fewer, none); asynchronous `read()` requests full transfer to complete later.' Both return immediately, but their immediate *result* is different regarding data readiness."
How is I/O completion typically communicated to a thread that initiated an asynchronous system call?,The thread remains blocked until completion.,By a return value indicating success or failure immediately.,"Via variable setting, a signal/software interrupt, or a callback.",Through continuous polling by the calling thread.,By logging the completion status to a system file.,C,"The text states, 'I/O completion communicated via variable setting, signal/software interrupt, or callback.'"
"What is the primary benefit of 'Vectored I/O,' also known as 'scatter-gather'?",It allows I/O operations to bypass the kernel entirely.,"It forces data to be transferred to a single, contiguous buffer first.","It performs multiple I/O operations involving multiple locations with one system call, avoiding context-switching and system-call overhead.",It encrypts all data transfers automatically.,It is exclusively used for character-stream devices.,C,The text defines 'Vectored I/O' as 'one system call performs multiple I/O operations involving multiple locations' and lists benefits including 'Avoids context-switching and system-call overhead.'
What is `direct I/O` in UNIX?,"A method for applications to access I/O devices directly, bypassing all OS layers.",A mode on a file that disables OS block features like buffering and locking.,A system call that guarantees immediate data transfer to the CPU registers.,An interface used only for network communication.,A special type of memory mapping for graphical displays.,B,"The text states, 'OS allows mode on file that disables buffering/locking (UNIX: direct I/O).' The glossary further defines it as 'Block I/O bypassing OS block features (buffering, locking).'"
Why do modern operating systems buffer I/O requests and often return to the application before the request fully completes?,To slow down I/O operations and conserve power.,To ensure data corruption by introducing delays.,To optimize performance by allowing the application to continue execution while I/O completes later.,To force applications to implement their own buffering mechanisms.,To prevent multiple applications from accessing the same device.,C,"The text says, 'OS buffers I/O, returns to application, completes request later (optimizes performance).'"
What is a High-Performance Event Timer (HPET) typically used for in modern PCs?,Managing network packet routing.,Storing user passwords.,Providing high-resolution time intervals and triggering interrupts when a value matches.,Controlling the graphical display resolution.,Simulating virtual memory for applications.,C,The text states HPET is a 'Hardware timer provided by some CPUs' and that 'Comparators trigger interrupts when value matches HPET.' It's also mentioned that a hardware clock (like HPET) offers 'accurate time intervals.'
