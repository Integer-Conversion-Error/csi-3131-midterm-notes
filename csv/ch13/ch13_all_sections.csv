Which of the following best defines a 'file' from the perspective of an operating system?,A physical storage unit on a hard disk.,A specific location in main memory allocated to a program.,"A collection of related information defined by its creator, mapped by the OS onto physical mass-storage devices.",A temporary buffer for data transfer between RAM and CPU.,A network protocol for data transmission.,C,The text states: 'File: collection of related information defined by its creator. OS maps files onto physical mass-storage devices.'
What is the primary function of a file system?,To manage CPU scheduling and process execution.,To describe how files map to physical devices and how they are accessed/manipulated.,To provide memory management for virtual memory.,To handle network communications between devices.,To perform cryptographic operations for data security.,B,"The text describes the file system as: 'describes how files map to physical devices, how accessed/manipulated.'"
What are the two main components of a file system?,The CPU and the GPU.,A collection of files and a directory structure.,The kernel and the shell.,Input devices and output devices.,RAM and secondary storage.,B,"The text states: 'Consists of: Collection of files (storing related data). Directory structure (organizes, provides info about files).'"
"From a user's perspective, what is the 'file' considered to be?",The largest allotment of physical primary storage.,The smallest allotment of logical secondary storage where data is written.,A transient memory buffer.,A type of network packet.,An instruction set for the CPU.,B,The text indicates: 'User perspective: smallest allotment of logical secondary storage (data written only within a file).'
Which of the following best describes a 'text file'?,A series of code sections a loader can bring into memory and execute.,A sequence of functions including declarations and executable statements.,A sequence of characters organized into lines.,A collection of raw binary data without any internal structure.,A file whose meaning is solely defined by the operating system.,C,The text defines: 'Text file: sequence of characters organized into lines.'
What is the primary characteristic of an 'executable file'?,It is a sequence of characters intended for human reading.,It contains program source code written in a high-level language.,It is a series of code sections that a loader can bring into memory and execute.,It stores user-defined numerical or alphabetical data.,It is a temporary file used for system logs.,C,The text defines: 'Executable file: series of code sections loader can bring into memory and execute.'
"Which file attribute provides a non-human-readable, unique tag to identify a file within the file system?",Name,Type,Location,Identifier,Protection,D,"The text lists 'Identifier: unique tag (number), non-human-readable, identifies file within file system' as a file attribute."
What is the purpose of the 'Protection' file attribute?,To specify the physical location of the file on the device.,To store the current size of the file in bytes or blocks.,"To provide access-control information, such as read, write, or execute permissions.",To indicate the character encoding and file checksum.,"To record the creation, last modification, and last use times.",C,"The text states 'Protection: access-control info (read, write, execute)' as a file attribute."
What are 'extended file attributes' in newer file systems?,"The basic attributes like name, size, and protection.","GUI views of file metadata, like a 'file info window'.",Additional metadata such as character encoding and file checksum.,Pointers to the device and location of the file.,The timestamps for creation and last modification.,C,"The text states: 'Newer file systems support extended file attributes: character encoding, file checksum.'"
Which of the following is NOT one of the minimal set of file operations provided by an operating system?,Create,Write,Reposition,Defragment,Delete,D,"The text lists 'create, write, read, reposition, delete, truncate files' as the minimal set. Defragment is not listed."
What are the two steps involved in 'creating a file'?,Searching for the file in the directory and reading its contents.,Finding space in the file system and making an entry for the new file in the directory.,Setting the read pointer and the write pointer.,Acquiring a shared lock and then an exclusive lock.,Changing the file's attributes and then renaming it.,B,The text states: 'Creating a file: 1. Find space in file system. 2. Make entry for new file in directory.'
What is the primary purpose of the `open()` system call before performing operations like read or write on a file?,To physically transfer the entire file into RAM.,To secure the file with an exclusive lock preventing all other access.,To avoid constant directory searching by allowing the OS to keep file info in an open-file table.,To permanently delete the file from secondary storage.,To change the file's internal structure to match the application's needs.,C,The text explains: 'To avoid constant directory searching: `open()` system call before first use. OS keeps open-file table: info about all open files.'
"In file operations, what is the 'current-file-position pointer' used for?",To indicate the physical block address on the disk.,To specify the end-of-file marker.,To keep track of the next read or write location within the file for a specific process.,To point to the file's entry in the system-wide open-file table.,To store the access mode information for the file.,C,The text states: 'Current operation location: per-process current-file-position pointer (shared by read/write).'
The operation of changing the 'current-file-position pointer' to a given value without involving actual I/O is known as:,Truncate,Create,Seek,Delete,Write,C,The text states: 'Also known as file seek.'
When are the actual contents of a file with 'hard links' deleted?,Immediately after the first link is deleted.,Only when the last hard link to the file is deleted.,When the file is truncated.,"Upon system reboot, if any link exists.",When a shared lock is acquired on the file.,B,The text explains for hard links: 'actual content deleted only when last link deleted.'
What does 'truncating a file' achieve?,It deletes the file's entry from the directory structure.,It renames the file to a shorter name.,"It erases the contents of the file but keeps its attributes, resetting its length to zero.",It copies the file to a different location on the disk.,It compresses the file to save disk space.,C,"The text states: 'Truncating a file: Erase contents but keep attributes. Reset file length to zero, release file space.'"
What information does the system-wide open-file table primarily store?,The current file pointer and access rights for a specific process.,"Process-independent information like disk location, access dates, and file size.",The user ID of the process that opened the file.,A list of all recently closed files.,The shell script commands for file operations.,B,"The text distinguishes: 'System-wide open-file table: process-independent info (disk location, access dates, size).'"
What is the purpose of the 'open count' in the open-file table?,To track the total number of operations performed on the file.,To limit the maximum number of times a file can be opened.,To record how many processes currently have the file open.,To count the number of bytes read from or written to the file.,To denote the version number of the file.,C,The text states: 'Open-file table has open count: number of processes with file open.'
"Which type of file lock allows multiple processes to acquire it concurrently, similar to a reader lock?",Exclusive lock,Mandatory lock,Advisory lock,Shared lock,System lock,D,The text defines: 'Shared lock: multiple processes acquire concurrently (like reader lock).'
"In which file-locking mechanism does the operating system prevent other processes from accessing a locked file, ensuring locking integrity?",Advisory file-lock mechanism,Shared lock mechanism,Exclusive lock mechanism,Mandatory file-lock mechanism,Implicit lock mechanism,D,"The text states: 'Mandatory: OS prevents other processes from accessing locked file (e.g., Windows).'"
What is a 'shell script'?,A binary executable program.,A file containing a set series of commands specific to a shell.,A type of source code file written in C++.,A temporary file used for system logging.,A file containing encrypted data.,B,The text defines: '.sh is a shell script (ASCII commands).'
How does macOS indicate file type and associate files with their creator programs?,By relying solely on file extensions as hints.,Through a magic number at the beginning of the file.,By using a creator attribute that the OS sets during `create()` call and enforces.,By requiring explicit user input for type association.,By embedding the program executable within the file itself.,C,"The text states: 'macOS: each file has type (.app), creator attribute (program that created it). Creator attribute set by OS during `create()` call, enforced.'"
What is a 'magic number' in the context of UNIX file systems?,A random number generated when a file is created.,A unique identifier assigned by the OS to each file.,A number at the start of some binary files that indicates the data type.,The total number of blocks allocated to a file.,A code used for file protection and encryption.,C,"The text states: 'UNIX: magic number at beginning of some binary files indicates data type (e.g., image format).'"
What is a disadvantage of an operating system supporting many different internal file structures?,"It leads to smaller, more efficient operating systems.",It simplifies the development of new applications.,"It makes the OS large and cumbersome, requiring specific code for each supported structure.",It enhances file portability across different OS platforms.,It reduces internal fragmentation significantly.,C,"The text mentions: 'Disadvantage of OS supporting multiple file structures: large, cumbersome OS. OS needs code for each supported structure.'"
What is the common minimal file structure imposed by operating systems like UNIX and Windows?,"Files are sequences of lines, with strict line endings.",Files must conform to a rigid record-based structure.,"Each file is a sequence of 8-bit bytes, with no OS interpretation of its internal structure.",Files are always organized into fixed-size blocks interpreted by the OS.,All files must contain a magic number at their beginning.,C,The text states: 'UNIX: each file is sequence of 8-bit bytes; no OS interpretation. Provides maximum flexibility but little support...'
"In disk systems, what is the basic unit of all disk I/O operations?",A single byte.,A logical record.,One block (physical record) of a well-defined size.,The entire file at once.,A stream of characters.,C,The text states: 'All disk I/O in units of one block (physical record); all blocks same size.'
What is 'internal fragmentation' in the context of file storage?,Wasted space within a logical record due to improper formatting.,The scattering of file blocks across different disk locations.,The inability of an OS to recognize a file's type.,Wasted disk space in the last allocated block of a file because the file size is not an exact multiple of the block size.,The loss of data due to a disk error.,D,The text defines: 'internal fragmentation: Wasted disk space in last block of file due to block allocation.'
How does increasing the disk block size generally affect internal fragmentation?,It decreases internal fragmentation.,It has no effect on internal fragmentation.,It increases internal fragmentation.,It eliminates internal fragmentation completely.,It converts internal fragmentation into external fragmentation.,C,The text states: 'All file systems suffer internal fragmentation; larger block size -> greater fragmentation.'
What is considered a major design problem related to file access methods?,Ensuring data consistency across distributed systems.,Choosing the appropriate access method for a specific application.,Optimizing memory allocation for file buffers.,Implementing robust error handling for file operations.,Managing concurrent read/write operations efficiently.,B,The text states that 'Choosing right method: major design problem.'
Which of the following best characterizes the 'sequential access' method?,Records are read and written using a block number parameter.,"Information is processed in a random, non-ordered fashion.","Information is processed strictly in order, one record after another.",It primarily relies on constructing an index for rapid lookups.,It requires the entire file to be loaded into memory before access.,C,"Sequential access processes 'Information processed in order, one record after another.' This is also confirmed in the glossary."
The sequential access method is conceptually based on which model of a file?,Disk model,Tape model,Memory model,Network stream model,Database table model,B,The text explicitly states that sequential access is 'Based on tape model of file.'
Which set of operations is typical for a sequential access file?,"read(n), write(n)","position_file(n), seek_block(m)","read_next(), write_next()","create_index(), search_index()","allocate_block(), deallocate_block()",C,Sequential access uses `read_next()` to read the next portion and `write_next()` to append and advance.
What is a primary characteristic of the 'direct access' method?,It processes information strictly from beginning to end.,It is most commonly used by text editors and compilers.,It allows programs to read and write records rapidly in no particular order.,It always requires a multi-level index structure.,It is inherently inefficient on random-access devices.,C,Direct access allows programs to 'read/write records rapidly in no particular order.' This is also confirmed in the glossary.
The direct access method is conceptually based on which model of a file?,Tape model,Network stream model,Disk model,Mainframe queue model,Optical disc model,C,Direct access is 'Based on disk model of file (disks allow random access).'
"In the context of direct access, what is meant by 'logical records'?",Records whose size can vary widely within the same file.,File contents logically designated as fixed-length structured data.,Temporary records used only for file system internal operations.,Records that are always stored contiguously on disk.,"Records that must be processed in a specific, predefined order.",B,"The glossary defines 'logical records' as 'File contents logically designated as fixed-length structured data,' and the direct access section mentions 'File: fixed-length logical records.'"
Which term is used as an alternative name for 'direct access'?,Sequential access,Indexed access,Relative access,Stream access,Pointer access,C,The text and glossary state that 'direct access' is also known as 'relative access'.
"When performing direct access operations, what does a 'relative block number' specify?",The physical sector address on the disk where the block is stored.,"The total number of blocks in the file, starting from 1.","An index relative to the beginning of the file, with the first block often being 0.",A unique identifier for the file within the entire file system.,"The block's size in bytes, relative to a standard block size.",C,The glossary defines 'relative block number' as 'Index relative to beginning of file (first is block 0).'
What is the 'allocation problem' in the context of file access?,The challenge of assigning unique file IDs to new files.,The operating system's determination of where to store file blocks.,The difficulty in allocating enough memory for file caching.,The process of allocating user permissions to access files.,The issue of allocating network bandwidth for file transfers.,B,The glossary defines 'allocation problem' as 'OS determination of where to store file blocks.'
Why does the use of 'relative block numbers' in direct access help prevent users from accessing non-file portions of the file system?,Because relative block numbers are encrypted and cannot be deciphered by users.,"Because the OS transparently translates them to physical addresses, controlling access.",Because users are only allowed to specify absolute physical disk addresses.,"Because relative block numbers are only used for read operations, not write.",Because they enforce a strict sequential access pattern.,B,The text states that the OS deciding file placement ('allocation problem') using relative block numbers 'Prevents user from accessing non-file portions of file system.'
Simulating direct access on a sequential-access file system is characterized as:,Highly efficient and straightforward.,A common practice for performance optimization.,Extremely inefficient and clumsy.,Impossible due to fundamental differences in access patterns.,Only possible if the sequential file is sorted.,C,"The text explicitly states, 'Simulating direct-access on sequential-access: extremely inefficient and clumsy.'"
"What is the foundation upon which 'Other Access Methods', such as indexed access, are typically built?",Tape-based sequential access.,Network stream access.,Direct access method.,In-memory file system caching.,User-defined custom algorithms.,C,The text states that 'Other Access Methods' are 'Built on top of direct-access method.'
What is the primary purpose of an 'index' in file access methods?,To compress the file data to save storage space.,"To store metadata about the file, such as creation date and owner.","To provide pointers to various blocks within a file, enabling direct access.",To enforce security permissions for different users.,To log all read and write operations performed on the file.,C,"The text states, 'Index: contains pointers to various blocks (like book index),' and the glossary defines it as containing 'pointers to contents.'"
"For very large files, when the main index itself becomes too large to fit in memory, what is the suggested solution?",To switch to a purely sequential access method.,"To divide the file into multiple smaller, independent files.",To build an index for the index file (multi-level indexing).,"To store the index in a high-speed, persistent memory device.",To perform a full file scan for every access request.,C,The text states the solution is an 'index for the index file (primary index -> secondary index -> data).'
"In a multi-level indexing system like IBM ISAM, what is the maximum number of direct-access reads typically required to locate any record?",One,Two,Three,Four,Depends on the number of indexing levels,B,"The text states, 'Any record located by at most two direct-access reads.'"
Which of the following is cited as a common application type that benefits from 'direct access' due to its need for immediate access to large information amounts?,Text editors,Compilers,Streaming video players,Airline reservation systems (databases),Backup and archiving utilities,D,"The text states, 'Great use for immediate access to large info amounts (e.g., databases). Example: airline reservation system.'"
Which statement is true regarding the support for sequential and direct access by operating systems?,All operating systems fully support both sequential and direct access.,No operating systems support both sequential and direct access simultaneously.,"Some operating systems do not support both, and some require file definition at creation.",Direct access is always preferred over sequential access in modern OS.,"Sequential access can only be used on tape devices, and direct access only on disks.",C,"The text states, 'Not all OS support both sequential and direct access. Some require file defined as sequential/direct at creation.'"
How is a request for record 'N' in a direct access file with fixed-length logical records typically satisfied?,By reading records sequentially until the Nth record is reached.,By converting it into an I/O request for 'N' bytes starting at the beginning of the file.,By converting it into an I/O request for 'N' bytes starting at 'N * (logical record length)'.,By searching an in-memory table for the physical address of record 'N'.,By creating a temporary index for the file to locate record 'N'.,C,"The text states, 'Satisfying request for record N: turned into I/O request for N bytes starting at N * (logical record length).'"
What is one way systems can provide alternative operations for direct access while retaining sequential-like functions?,By removing `read_next()` and `write_next()` entirely.,By only supporting `read(n)` and `write(n)`.,By adding `position_file(n)` while retaining `read_next()` and `write_next()`.,By always requiring an index to be built first.,By converting direct access requests into sequential reads internally.,C,"The text states, 'Alternative: retain `read_next()`, `write_next()`, add `position_file(n)`.'"
What is the primary function of a directory in a file system?,To store the actual data content of files.,To manage the physical disk blocks allocated to files.,To act as a symbol table translating file names to file control blocks.,To execute user commands and system programs.,To serve as a temporary storage area for recently accessed files.,C,"A directory functions as a symbol table, mapping human-readable file names to their corresponding file control blocks (FCBs) which contain detailed information about the files."
Which of the following is NOT a fundamental capability that a directory organization must allow?,Inserting new entries.,Deleting existing entries.,Searching for a named entry.,Compressing directory size automatically.,Listing all entries within the directory.,D,"Fundamental capabilities for a directory organization include inserting, deleting, searching for, and listing entries. Automatic compression is not listed as a required basic capability."
"When deleting a file from a directory, what potential issue might arise that requires defragmentation?",The file's data blocks might become corrupted.,The directory entry might become read-only.,It may leave a 'hole' in the directory structure.,The file's timestamp might be reset incorrectly.,It automatically creates a backup of the deleted file.,C,"Deleting a file can leave a 'hole' in the directory structure, which may necessitate defragmentation to optimize space utilization and performance."
What is the primary purpose of 'Traversing the file system' as a directory operation?,To create new files and directories.,To change the permissions of files.,To find and display the contents of a single specific file.,"To access every directory and file, often for backup or space release.",To rename files based on their content.,D,"Traversing the file system involves accessing all directories and files, a process typically performed for tasks like creating backups or identifying space that can be released."
What is the main limitation of a single-level directory structure when multiple users are present?,It is difficult to support and understand.,"Files must have unique names across all users, leading to name collisions.",It requires complex permissions management for file sharing.,It offers poor performance for file search operations.,Only a single type of file can be stored in the directory.,B,"In a single-level directory, all files reside in the same directory, meaning every file must have a unique name, which quickly leads to name collision problems when multiple users are involved."
"In a two-level directory system, what is a User File Directory (UFD)?",A system directory that stores critical OS files.,A directory that is shared among all users for common files.,A per-user directory that contains only that user's files.,A temporary directory for caching frequently accessed files.,The root directory of the entire file system.,C,"The User File Directory (UFD) is a separate directory created for each user in a two-level directory system, containing only their specific files."
What is the role of the Main File Directory (MFD) in a two-level directory structure?,It stores the actual data blocks of all user files.,"It is an index, typically by user name or account, that points to each user's UFD.",It contains a list of all executable system programs.,It serves as a cache for recently accessed directory entries.,It manages the network connections for file sharing.,B,"The Main File Directory (MFD) acts as a top-level index, usually organized by user name or account, with each entry pointing to the respective User File Directory (UFD)."
A significant advantage of a two-level directory structure over a single-level directory is that:,It allows for unlimited nesting of subdirectories.,It enables different users to have files with the same name.,It automatically performs garbage collection for deleted files.,It eliminates the need for any form of path names.,It inherently supports shared files without links.,B,"Because each user has their own UFD, different users can have files with identical names (e.g., 'report.txt') without causing name collisions, as long as the names are unique within their respective UFDs."
"In a two-level directory system, how is a file typically referred to if it belongs to another user?",By its unique file ID only.,By simply changing the current directory to the other user's UFD.,By specifying both the user name and the file name.,By directly accessing the Main File Directory (MFD).,It is not possible to access another user's file.,C,"To access another user's file in a two-level directory system, the file must be specified using both the user's name and the file's name, forming a path name like `/userb/test.txt`."
"What is a 'search path' in the context of directory systems, especially useful for system files in a two-level structure?",The route taken by a user to manually locate a file.,A sequence of directories that the operating system searches to locate an executable file.,The unique identifier assigned to each file for fast retrieval.,A graphical representation of the file system hierarchy.,A list of recently accessed files for quick reopening.,B,"A 'search path' defines the sequence of directories that the operating system traverses when trying to locate a file, particularly executable files, often starting with the local user directory and then proceeding to shared system directories."
Which directory structure is considered a generalization of the two-level directory and is the most common in modern operating systems?,Single-level directory.,Flat directory.,Tree-structured directory.,Acyclic-graph directory.,General graph directory.,C,"Tree-structured directories extend the concept of the two-level directory by allowing directories to be nested to an arbitrary height, forming a hierarchical tree. This is the most common directory structure."
"In a tree-structured directory system, how is a directory (or subdirectory) often identified or treated?",It's treated as a special type of executable program.,"It's considered a special file, often with a bit defining it as a directory versus a regular file.",It's a fixed-size partition of the disk.,It's a temporary structure that gets deleted after each session.,It's a physical hardware component.,B,"In tree-structured directories, a directory is frequently treated as a special type of file, where one bit in its entry indicates whether it's a regular file (0) or a subdirectory (1)."
What is an 'absolute path name' in a tree-structured directory system?,A path that defines the location of a file relative to the current directory.,A path that identifies a file using only its unique file ID.,A path that begins at the root directory and specifies the full hierarchy to the file.,A path used exclusively for network file access.,A path that automatically adjusts if the file is moved.,C,"An absolute path name starts from the file system's root directory (e.g., '/') and lists all directories in the hierarchy down to the target file, providing a unique and unambiguous location."
"If your current directory is `/home/user/documents` in a tree-structured file system, what would the relative path `reports/monthly.pdf` refer to?",`reports/monthly.pdf` in the root directory.,`/home/user/documents/reports/monthly.pdf`.,`/reports/monthly.pdf`.,The `monthly.pdf` file in the user's home directory.,The `reports` directory at the same level as `/home`.,B,"A relative path name defines the path from the current directory. So, `reports/monthly.pdf` relative to `/home/user/documents` translates to `/home/user/documents/reports/monthly.pdf`."
Which statement accurately describes a common policy for deleting non-empty directories in tree-structured file systems?,All systems automatically delete a directory and its contents recursively.,Most systems require manual confirmation for each file before deletion.,"Some systems only allow deletion if the directory is empty, others allow recursive deletion (e.g., UNIX `rm -r`).","Non-empty directories can only be renamed, not deleted.",Directory deletion is strictly prohibited to prevent data loss.,C,"Deletion policies vary: some systems require a directory to be empty before it can be deleted, forcing the user to delete contents manually, while others (like UNIX `rm -r`) offer a convenient but potentially dangerous recursive deletion."
What is the defining characteristic that acyclic-graph directories introduce compared to tree-structured directories?,They enforce unique file names globally.,They allow directories to share subdirectories and files.,They are limited to two levels of hierarchy.,They strictly prevent any form of file sharing.,They only store temporary files.,B,"Acyclic-graph directories are a more flexible structure that allows multiple directories to point to and share the same subdirectory or file, unlike tree structures where each file/directory has only one parent."
"When a file is shared using an acyclic-graph directory structure, what is true about modifications to its content?",Changes are only visible through the original directory entry.,A separate copy of the file is created for each shared instance.,"Changes made via any shared link are visible to all other links, as there is only one actual file.",The file becomes read-only to prevent inconsistencies.,Only the administrator can modify shared files.,C,"In an acyclic-graph directory, when a file is shared, there is only one physical file on disk. Any modifications made through any of its linked entries will be immediately visible through all other entries pointing to that same file."
"In the context of acyclic-graph directories, what is a 'link'?",A physical connection between two hard drives.,A pointer within a directory entry to another file or subdirectory.,A cryptographic key used for file encryption.,A system command used to create new directories.,A backup copy of a file.,B,"A 'link' in acyclic-graph directories is a pointer (which can be an absolute or relative path name) within one directory entry that refers to another file or subdirectory, enabling sharing."
What does the operation 'resolve' mean in the context of file system links?,To fix errors in a file's content.,To delete a broken link from the directory.,To follow the path name specified in a link to locate the actual target file.,To change the permissions of a linked file.,To convert a relative path to an absolute path.,C,To 'resolve' a link means to use the path name stored within the link itself to find and access the actual file or directory that the link points to.
What is 'aliasing' a problem in acyclic-graph directories?,It prevents files from being deleted.,It refers to the situation where the same file can be accessed via multiple distinct absolute path names.,It causes system slowdowns due to excessive memory usage.,It changes the file's content without user permission.,It restricts files to be accessed by only one user at a time.,B,"Aliasing is a problem in acyclic-graph directories because a single file or subdirectory can be pointed to by multiple links, resulting in it having several different absolute path names, which can be confusing for users."
"What problem can arise if a file linked in an acyclic-graph directory is deleted without proper management (e.g., if it's a symbolic link and the original is deleted)?",The directory structure automatically converts to a tree.,The remaining links to the file become 'dangling pointers'.,The entire file system crashes due to inconsistency.,The file is automatically restored from a backup.,All other users are immediately logged out.,B,"If a file that has symbolic links pointing to it is deleted, the symbolic links themselves remain but now point to a non-existent file, becoming 'dangling pointers'."
How do systems like UNIX manage space deallocation for 'hard links' in acyclic-graph directories to prevent dangling pointers?,By automatically creating a backup copy when a link is deleted.,"By using a 'reference count' to track the number of links to a file, deleting the file only when the count reaches zero.",By converting all hard links to symbolic links upon deletion.,By requiring manual confirmation from all users before deleting any linked file.,By storing copies of the file in every directory it's linked to.,B,"Hard links, often used in UNIX-like systems, employ a 'reference count' (or link count). This count is incremented when a new link is created and decremented when a link is deleted. The actual file's space is only deallocated when its reference count drops to zero, ensuring no dangling pointers."
What is the defining characteristic of a 'general graph directory' that differentiates it from an 'acyclic-graph directory'?,It uses only absolute path names.,It does not allow any files to be shared.,It allows cycles (loops) in the directory structure.,It is limited to a single level of directories.,It requires all files to have unique names globally.,C,"The key distinction of a general graph directory is that it permits cycles or loops within the directory structure, meaning a directory can contain a link that eventually leads back to an ancestor directory or itself."
What is a major problem introduced by cycles in a general graph directory structure during file system traversal or search operations?,Inability to find any files.,Automatic file corruption.,Risk of infinite loops during traversal.,Reduced storage capacity of the disk.,Increased network latency.,C,"The presence of cycles in a general graph directory can lead to infinite loops if traversal algorithms don't specifically account for and bypass them, potentially causing the system to hang or crash during operations like search or backup."
Why is space deallocation (like determining when a file can be truly deleted) more complex in general graph directories than in acyclic-graph directories?,All files are automatically backed up before deletion.,"The presence of cycles means a reference count might not reach zero even if the file is inaccessible, requiring garbage collection.",Users must manually specify deallocation for each block.,Deletion is only allowed at specific times of the day.,There is no mechanism for tracking file references.,B,"In general graph directories, a file or directory might become inaccessible (no valid path from the root leads to it), but its reference count might not drop to zero due to cycles. This requires a more complex 'garbage collection' process to identify and reclaim truly unreachable space."
What is 'garbage collection' in the context of general graph directories?,A process of deleting temporary files to free up space.,A mechanism for automatically repairing corrupted file data.,"The recovery of space containing no-longer-valid data, especially when reference counts don't suffice due to cycles.",A system utility for creating backup copies of the entire file system.,The process of reorganizing disk blocks for better performance.,C,"Garbage collection refers to the process of identifying and recovering disk space occupied by data that is no longer accessible or valid, even if traditional reference counts (which can be problematic with cycles) don't indicate it."
Which concept primarily addresses the issue of physical damage to information by methods like duplicate copies and backups?,Protection,Authentication,Reliability,Encryption,Firewalling,C,"Reliability, often achieved through duplicate copies and backups, is the concept associated with protecting information from physical damage."
What is the main concern addressed by 'protection' in the context of information safety?,Data loss due to hardware failure,Ensuring data integrity during transmission,Preventing improper access to information,Protecting against natural disasters,Optimizing storage space usage,C,The text states that 'protection' is concerned with 'Improper access'.
Which of the following is NOT explicitly listed as a protection mechanism in the text?,User name/password authentication,Encrypting secondary storage,Firewalling network access,Regular antivirus scans,Advanced mechanisms for valid data access in multiuser systems,D,"User name/password authentication, encrypting secondary storage, firewalling network access, and advanced mechanisms for valid data access in multiuser systems are all listed protection mechanisms. Regular antivirus scans are not explicitly mentioned."
Which file access operation is defined as 'Write or rewrite file'?,Read,Execute,Append,Write,Attribute change,D,The 'Write' operation is explicitly defined as 'Write or rewrite file'.
"If a user needs to add new information to the end of an existing file without altering its current content, which file operation should they use?",Write,Read,Execute,Append,Delete,D,The 'Append' operation is defined as 'Write new info at end of file'.
Where is protection typically applied for higher-level functions such as 'rename' or 'copy'?,"At the user interface level, by disabling the functions for unauthorized users.","Within the application layer, using custom access checks.",At the lower-level system calls that implement these functions.,Through external security audits and compliance checks.,Via hardware-enforced memory protection units.,C,"The text states, 'Higher-level functions (rename, copy, edit) often implemented by system programs using lower-level calls. Protection at lower level.'"
What is the 'most general scheme' for access control where access is dependent on user identity?,Password authentication,Role-Based Access Control (RBAC),Access-Control List (ACL),Discretionary Access Control (DAC),Mandatory Access Control (MAC),C,The text explicitly states: 'Most general scheme: access-control list (ACL)'.
Which of the following is identified as a disadvantage of using a general Access-Control List (ACL) scheme?,It limits the complexity of access methodologies.,"It results in fixed-size directory entries, wasting space.","The lists can be lengthy and tedious to construct, especially if users are unknown.",It requires less frequent updates compared to other methods.,It does not allow for fine-grained control over file access.,C,"The text lists 'Lengthy lists (tedious to construct, especially if users unknown)' as a disadvantage of ACLs."
"In the condensed ACL classification scheme, which category refers to 'All other users' who are not the owner or part of a specific group?",Guest,Public,Universe,Other,Default,D,The condensed ACL scheme defines 'Other' as 'All other users'.
"In UNIX permissions, what does 'rwx' signify for a user category (e.g., owner, group, or other)?",Read and Write permissions only.,"Read, Write, and Execute permissions.",Rewrite and Execute permissions only.,"Read, Execute, and Delete permissions.","Rename, Write, and Execute permissions.",B,"The text states that 'rwx' stands for 'read, write, execute' in UNIX permissions."
"When ACLs are combined with regular permissions in Solaris, how is the presence of an ACL indicated?",A special character like '@' prefixes the permissions.,The permission string is enclosed in square brackets.,A plus sign ('+') is appended to the regular permissions.,The permissions are displayed in a different color.,A separate column explicitly states 'ACL Present'.,C,"Solaris indicates ACLs by appending a '+' to regular permissions (e.g., `-rw-r--r--+`)."
"When ACLs are combined with traditional UNIX-like permissions, which typically takes precedence in determining access rights?","Owner permissions, as they are the most specific.","Group permissions, as they apply to a set of users.","ACLs, due to their specificity.","Other (universe) permissions, as they are the least restrictive.",The most restrictive permission set applied to the user.,C,"The text states, 'Precedence: ACLs typically take precedence over group permissions (specificity priority)'."
What is a major disadvantage of using a single password for all files in a system that relies on passwords with each file for protection?,It requires users to remember an excessive number of passwords.,It only allows read-only access to the files.,"It provides an 'all-or-none' protection, making all files vulnerable if that single password is compromised.",It is less efficient than authenticating users with a username.,It does not allow for varying access rights between different files.,C,"The text identifies 'single password for all files (all-or-none protection)' as a disadvantage, meaning the security of all files rests on that one password."
"In multilevel directory structures, what additional aspect does directory protection control besides the creation and deletion of files within the directory?",The encryption method for files in the directory.,The frequency of backups for the directory's contents.,The user's ability to determine a file's existence by listing directory contents.,The physical disk location of the directory.,The maximum size of files that can be stored in the directory.,C,Directory protection also controls 'Control user's ability to determine file existence (listing directory contents)'.
"If a user wants to access a file by its path name in a multilevel directory structure, what access rights are necessary?",Only read access to the file itself.,Only execute access to the directory containing the file.,Access to both the directory and the file.,Write access to the directory and read access to the file.,Administrator privileges for the entire system.,C,"The text states, 'If path name refers to file, user needs access to both directory and file'."
What is the primary characteristic of the memory mapping file access method?,It requires exclusive access to the file by a single process.,It treats file I/O as routine memory accesses using virtual memory techniques.,It is exclusively used for networked file systems.,It strictly uses dedicated system calls for every byte read or written.,It involves caching the entire file in RAM before any access.,B,"Memory mapping treats file I/O as routine memory accesses, leveraging virtual memory techniques for efficiency."
What is a significant performance advantage of using memory-mapped files for I/O?,It guarantees immediate write-through to secondary storage for all changes.,"It eliminates the need for any form of caching, reducing complexity.",It simplifies and speeds up file access by avoiding `read()` and `write()` system call overhead.,"It can only be used for small files, making their access faster.","It provides built-in encryption for all file data, improving security.",C,"Memory-mapped files bypass the overhead of traditional `read()` and `write()` system calls, leading to performance increases."
"When a process first attempts to access a specific portion of a memory-mapped file, what typically occurs?",The entire file is loaded into physical memory immediately.,A direct disk I/O operation is performed for the specific byte accessed.,"A demand paging operation results in a page fault, reading a page-sized portion of the file.",The operating system prevents access until the file is manually cached.,The process must first explicitly call `read()` for that section.,C,"Initial access to a memory-mapped file typically triggers demand paging, leading to a page fault that brings the required page-sized portion of the file into physical memory."
"After the initial page fault, how are subsequent reads and writes to a memory-mapped file handled?",They continue to incur system call overhead for each access.,They are handled as routine memory accesses to the process's virtual address space.,"They trigger a new page fault for every access, regardless of locality.","They are buffered entirely in kernel space, inaccessible directly by the process.",They require the process to explicitly flush changes to disk after each write.,B,"Once a page is loaded due to an initial access, subsequent reads and writes to that portion of the memory-mapped file are treated as routine memory accesses, speeding up operations."
Memory-mapped files simplify and speed up file access by avoiding the overhead of which specific type of operations?,CPU context switches,Network socket communications,Virtual memory management,Disk block allocation,`read()` and `write()` system calls,E,"A key benefit of memory-mapped files is the avoidance of the overhead associated with explicit `read()` and `write()` system calls, as file I/O becomes memory access."
When are updates made to a memory-mapped file generally written back to secondary storage?,Immediately after every byte is written to memory.,Only when the system is shut down.,"Generally, when the file is closed.",When the operating system detects low system memory.,"Never, as they are only temporary in memory.",C,Updates to memory-mapped files are not necessarily immediate; they are generally written back to secondary storage when the file is closed.
What might happen to intermediate changes made to a memory-mapped file if the system experiences memory pressure?,They are immediately discarded to free up memory.,They are forced to be written back to secondary storage without delay.,They may be moved to swap space.,The operating system prevents further writes to the file.,The file mapping is automatically unmapped.,C,"Under memory pressure, intermediate changes in memory-mapped files, like any other virtual memory pages, may be moved to swap space."
"Which operating system is specifically mentioned as memory-mapping all file I/O to the kernel address space, even when using standard file access calls?",Linux,Windows,macOS,Solaris,FreeBSD,D,"The text states that some OS, like Solaris, memory-map all file I/O to kernel address space, even with standard calls."
How do multiple processes achieve data sharing using memory-mapped files concurrently?,By each process making independent copies of the file.,By only allowing one process to map the file at a time.,By mapping the same file concurrently into their respective virtual address spaces.,By using network sockets to transfer data between them.,By serializing access through a central file server.,C,"Multiple processes can map the same file concurrently, allowing them to share data by accessing the same underlying physical pages in memory."
"When multiple processes map the same section of a file, what is the visibility characteristic of writes made by one process?",Writes are only visible to the writing process until the file is closed.,Writes are immediately visible to all other processes mapping the same section.,Writes are only visible after explicit synchronization calls are made by all processes.,Writes are visible to others only if they remap the file.,Writes are never visible to other processes due to isolation.,B,"Writes by one process to a shared memory-mapped section are immediately visible to other processes mapping the same section, as they all point to the same physical memory."
How is concurrent data sharing among processes using memory-mapped files generally implemented at a low level?,Through dedicated hardware registers for each process.,By replicating data across separate physical memory blocks for each process.,By having the virtual memory map of each process point to the same physical page(s).,By using inter-process pipes for data exchange.,By requiring kernel intervention for every data access.,C,Shared memory through memory-mapped files is implemented by the virtual memory maps of participating processes pointing to the same physical pages in memory.
Memory-mapped files support which mechanism for processes that share read-only data but require private copies for modification?,Write-through caching,Copy-on-write,Direct Memory Access (DMA),Pre-fetching,Journaling,B,"Memory-mapped files support copy-on-write, allowing processes to share read-only data efficiently and only get their own copies if they attempt to modify the data."
"When multiple processes share data via memory-mapped files, what mechanism should they typically use for coordination to prevent data corruption?",Sending signals to each other before accessing data.,Polling the file for changes at regular intervals.,Using mutual exclusion primitives like mutexes or semaphores.,Relying on the operating system to automatically manage concurrent writes.,Restricting access to only one process at a time globally.,C,"When processes share data, including through memory-mapped files, they must use mutual exclusion mechanisms to coordinate access and prevent race conditions or data corruption."
What is a common method for implementing shared memory between processes?,Using network sockets for inter-process communication.,Implementing it solely through kernel system calls without direct memory access.,By memory mapping files into the processes' virtual address spaces.,By passing data through temporary files on disk.,Through direct CPU register sharing.,C,The text explicitly states that 'Shared memory often implemented by memory mapping files'.
"According to the Windows API outline for shared memory using memory-mapped files, what is the first step?",Establishing a view of the mapped file.,Creating a file mapping for the file.,Opening the file with `MapViewOfFile()`.,Calling `UnmapViewOfFile()`.,Creating a named pipe.,B,The outline states the first step is to 'Create a file mapping for the file'.
"In the Windows API process of using memory-mapped files for shared memory, what is the second step after creating a file mapping?",Opening the file using `CreateFile()`.,Closing the file mapping object.,Establishing a view of the mapped file in the process's virtual address space.,Writing data to the file mapping object.,Creating a named shared-memory object.,C,The outline states the second step is to 'Establish a view of the mapped file in process's virtual address space'.
"In the context of the Windows API, a mapped file primarily acts as what for inter-process communication?",A transient data buffer.,A message queue.,A shared-memory object.,A named pipe.,A remote procedure call endpoint.,C,The text states: 'Mapped file acts as shared-memory object for inter-process communication'.
Which Windows API function is used to open a file and obtain a `HANDLE` for subsequent memory mapping steps?,CreateFileMapping(),MapViewOfFile(),UnmapViewOfFile(),CreateFile(),OpenFile(),D,The first step in the Windows API example is to 'Open file with `CreateFile()` (returns `HANDLE`)'.
Which Windows API function is responsible for creating a file mapping object using a file `HANDLE`?,CreateFile(),MapViewOfFile(),CreateFileMapping(),OpenFileMapping(),GetFileMappingHandle(),C,The steps list 'Create file mapping with `CreateFileMapping()` (uses file `HANDLE`)'.
Which Windows API function is used to establish a view of a mapped file in a process's virtual address space?,CreateFile(),CreateFileMapping(),UnmapViewOfFile(),MapViewOfFile(),GetViewOfFile(),D,The steps list 'Establish view with `MapViewOfFile()` (uses mapped object `HANDLE`)'.
"What type of object does the `CreateFileMapping()` function create, which can be accessed by name from multiple processes in the Windows API?",A view object,A file handle,A named shared-memory object,A file stream,A temporary file,C,"The text states: '`CreateFileMapping()` creates a named shared-memory object (e.g., `SharedObject`)'."
"What does the `MapViewOfFile()` function return, and how do accesses to this return value relate to the file?",It returns a file handle; accesses refer to the file's metadata.,It returns a pointer to the shared-memory object; accesses to this memory are accesses to the file.,It returns a block ID; accesses require further system calls.,It returns a process ID; accesses imply inter-process communication via messages.,It returns a boolean indicating success; accesses are not direct.,B,The text clarifies: '`MapViewOfFile()` returns pointer to shared-memory object; accesses to this memory are accesses to the file'.
What portion of a file can be mapped into memory using memory mapping?,Only the first page of the file.,"Only the entire file, no partial mapping.",Either the entire file or a specific portion of it.,Only the metadata of the file.,"A fixed 4KB block, regardless of file size.",C,The text states: 'Entire file or portion can be mapped'.
How is a memory-mapped file typically loaded into physical memory?,The entire file is loaded into physical memory at once upon mapping.,It is loaded only when specifically requested via a `read()` system call.,"It may be demand-paged, meaning portions are loaded as accessed.",It is always streamed directly from disk on access without caching.,It resides entirely in swap space until explicitly moved by the user.,C,"The text mentions that 'Mapped file may be demand-paged', meaning parts are loaded into physical memory only when accessed."
Which Windows API function is used by processes to remove a view of a mapped file from their virtual address space?,CloseHandle(),DeleteFileMapping(),UnmapViewOfFile(),ReleaseMappedFile(),FreeMemoryMap(),C,The text specifies: 'Both processes remove view with `UnmapViewOfFile()`'.
"According to the provided glossary, what is the definition of 'memory mapping'?",A technique to allocate dynamic memory on the heap.,A file-access method where file is mapped into process memory space for direct memory access.,The process of storing program instructions in ROM.,A method to cache frequently accessed data in CPU registers.,A system call for direct interaction with secondary storage devices.,B,The glossary defines 'memory mapping' as 'File-access method where file is mapped into process memory space for direct memory access'.
"In the context of Windows API, what does the term 'file mapping' refer to according to the glossary?",The final step in releasing shared memory resources.,The act of creating a physical file on disk.,The first step in memory-mapping a file.,A process of transferring data over a network.,A method for encrypting file contents.,C,The glossary defines 'file mapping' (in Windows) as 'the first step in memory-mapping a file'.
"According to the glossary, what is a 'view' in the context of Windows memory-mapped files?",A graphical user interface component.,An abstract representation of file permissions.,An address range mapped in shared memory; the second step in memory-mapping a file.,A snapshot of the file's contents at a specific time.,A kernel-level object representing an open file.,C,The glossary defines 'view' (in Windows) as 'an address range mapped in shared memory; second step in memory-mapping a file'.
"In the Windows API, what is a 'named shared-memory object'?",A temporary file created by the operating system.,A network resource shared among multiple computers.,A section of a memory-mapped file accessible by name from multiple processes.,A special type of mutex for inter-process synchronization.,A data structure used for direct kernel communication.,C,"The glossary defines 'named shared-memory object' as 'In Windows API, a section of a memory-mapped file accessible by name from multiple processes'."
"According to the text, what is a file characterized as?",A physical block on a hard disk,An abstract data type consisting of a sequence of logical records,A collection of executable programs,A temporary storage area for system processes,A hardware component responsible for data storage,B,"The text states: 'File: abstract data type, sequence of logical records (byte, line, complex data).'"
What is a primary task of the Operating System (OS) concerning files?,To create new application programs,To manage network traffic for remote users,To map the logical file concept to physical storage,To perform garbage collection for all memory spaces,To encrypt all data before it's stored,C,"The text states: 'OS task: map logical file concept to physical storage (hard disk, NVM).'"
"Regarding file record types, who primarily supports them or leaves the support to the application?",The user directly,The compiler,The operating system,The hardware,The network protocol,C,The text notes: 'OS may support record types or leave to application.'
"What is a significant problem encountered with a single-level directory system, especially in a multiuser environment?",Difficulty in assigning read-only permissions,Limited storage capacity for files,Naming problems requiring unique names for all files,Inability to support executable files,High latency for file access,C,The text explicitly mentions: 'Single-level directory: naming problems in multiuser systems (unique names required).'
How does a two-level directory system address the naming problems found in single-level directories?,By allowing shorter file names,By assigning each file a unique hexadecimal ID,By creating a separate directory for each user,By using a distributed hash table for file lookup,By encrypting file names,C,"The text states: 'Two-level directory: separate directory for each user, solves naming problems.'"
What information is typically listed for files within a two-level directory system?,Only the file's content and creation date,"File name, location, length, type, owner, and times","Network path, MAC address, and checksum",Processor architecture and memory usage,User's IP address and operating system version,B,"The text specifies: 'Lists file name, location, length, type, owner, times.'"
What is the primary characteristic of a tree-structured directory system?,"All files are stored in a single, flat directory.","It is a generalization of the two-level directory, allowing subdirectories.",It exclusively uses hard links for file sharing.,It requires manual deletion of unused file entries.,It only supports read-only files.,B,"The text describes it as: 'Tree-structured directory: generalization of two-level, allows subdirectories for organization.'"
Which type of directory structure allows for the sharing of subdirectories and files but complicates searching and deletion?,Single-level directory,Two-level directory,Tree-structured directory,Acyclic-graph directory,General graph structure,D,"The text states: 'Acyclic-graph directory: allows sharing of subdirectories/files, but complicates searching/deletion.'"
What is a potential complication when using an acyclic-graph directory structure?,Increased simplicity in file deletion.,Guaranteed unique file names across the system.,Complication in searching and deletion processes.,Restriction to a single owner per file.,Inability to link files across different volumes.,C,"The text states: 'Acyclic-graph directory: allows sharing of subdirectories/files, but complicates searching/deletion.'"
Which directory structure offers complete flexibility in sharing but may necessitate garbage collection for unused space?,Single-level directory,Two-level directory,Tree-structured directory,Acyclic-graph directory,General graph structure,E,"The text describes: 'General graph structure: complete flexibility in sharing, but may require garbage collection for unused space.'"
What are the key challenges associated with remote file systems as mentioned in the text?,Only storage capacity and file size limits.,Primarily user interface design and software licensing.,"Reliability, performance, and security.",Operating system compatibility and hardware upgrades.,Text encoding and character set support.,C,"The text lists: 'Remote file systems: challenges in reliability, performance, security.'"
In which type of system is file protection identified as particularly necessary?,Single-user systems,Batch processing systems,Multiuser systems,Embedded systems,Standalone systems,C,The text states: 'File protection: needed on multiuser systems.'
Which of the following are listed as types of access control for file protection?,"Compile, link, debug","Setup, install, uninstall","Read, write, execute, append, delete, list directory","Download, upload, stream","Zip, unzip, compress",C,"The text specifies: 'Access controlled by type: read, write, execute, append, delete, list directory.'"
What methods are mentioned for achieving file protection?,Only biometric authentication,Through encryption keys exclusively,"Via access lists, passwords, and other techniques",By limiting physical access to storage devices,Using only network firewalls,C,"The text states: 'Protection via access lists, passwords, other techniques.'"
