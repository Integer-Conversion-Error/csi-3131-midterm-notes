Front,Back,Reversible
What is a file?,A collection of related information defined by its creator.,y
How does an OS handle files in relation to physical storage?,It maps files onto physical mass-storage devices.,y
What is a file system?,A system that describes how files map to physical devices and how they are accessed/manipulated.,y
What is a primary design goal for file systems related to physical storage?,"Efficient access, as physical storage can be slow.",y
"Besides efficient access, what are other requirements for file systems?",File sharing support and remote access.,y
What is the most visible aspect of an OS for users?,The file system.,y
What mechanism does the file system provide?,Mechanism for on-line storage and access to OS data/programs and user data.,y
What are the two main components of a file system?,A collection of files (storing related data) and a directory structure (organizing and providing information about files).,y
Where do most file systems reside?,"On nonvolatile, persistent storage devices.",y
How does the OS present stored information?,It provides a uniform logical view.,y
What logical storage unit does the OS define by abstracting physical properties?,The file.,y
Are file contents persistent? Why?,"Yes, because storage devices are usually nonvolatile.",y
Define a file from the perspective of secondary storage.,A named collection of related information recorded on secondary storage.,y
"From a user's perspective, what is the smallest allotment of logical secondary storage?","A file, as data is written only within a file.",y
What do files commonly represent?,Programs (source/object) and data.,y
What are common types of data files?,"Numeric, alphabetic, alphanumeric, and binary.",y
How can file structures vary?,They can be free form (like text) or rigidly formatted.,y
"Generally, what is a file from a data perspective?","A sequence of bits, bytes, lines, or records, with meaning defined by its creator or user.",y
Give an example of how the file concept's use has been extended beyond its original confines.,The UNIX `proc` file system uses file-system interfaces for system information access.,y
Who defines the information contained within a file?,Its creator.,y
"Does a file have a defined structure, and what does it depend on?","Yes, it has a defined structure that depends on its type.",y
What is a text file?,A sequence of characters organized into lines.,y
What is a source file?,"A sequence of functions, including declarations and executable statements.",y
What is an executable file?,A series of code sections that a loader can bring into memory and execute.,y
How are files named and referred to for human users?,"They are named and referred to by symbolic, human-readable names (e.g., `example.c`).",y
Do all operating systems differentiate file names by case?,"No, some systems differentiate case, while others do not.",y
"What is a key characteristic of a file regarding its creator, user, or system?","It is independent of its creator process, user, and system.",y
Do file attributes vary by OS?,"Yes, file attributes vary by OS.",y
"What is the ""Name"" attribute of a file?","A symbolic, human-readable name.",y
"What is the ""Identifier"" attribute of a file?","A unique, non-human-readable tag (number) that identifies the file within the file system.",y
"What is the ""Type"" attribute of a file?","An attribute indicating the file type, for systems that support different file types.",y
"What is the ""Location"" attribute of a file?",A pointer to the device and the file's specific location on that device.,y
"What is the ""Size"" attribute of a file?","The current size of the file (in bytes, words, or blocks), and possibly the maximum allowed size.",y
"What is the ""Protection"" attribute of a file?","Access-control information, specifying permissions such as read, write, or execute.",y
"What information do ""Timestamps and user identification"" attributes provide, and why are they useful?","They provide creation time, last modification time, and last use time, useful for protection, security, and monitoring.",y
"What are extended file attributes, and what are examples?","Additional metadata supported by newer file systems, such as character encoding and file checksum.",y
What is a file info window?,"A GUI view of a file's metadata (e.g., as seen in macOS).",y
Where is information about all files kept?,"In the directory structure, typically on the same device as the files themselves.",y
What does a directory entry typically contain for a file?,The file name and a unique identifier (which locates other attributes of the file).,y
How large can directory sizes be?,"They can be large, often in megabytes or gigabytes.",y
How are directories handled in memory?,They are stored on the device and brought into memory piecemeal.,y
What kind of data type is a file considered to be?,An abstract data type.,y
What are the primary system calls provided by the OS for file operations?,"Create, write, read, reposition, delete, and truncate files.",y
What two main steps are involved in creating a file?,1. Find space in the file system. 2. Make an entry for the new file in the directory.,y
Which file operations require the `open()` system call first?,All operations except create and delete.,y
What does the `open()` system call return?,"A file handle, which is used as an argument in subsequent file operation calls.",y
Describe the process of writing to a file.,"A system call is made with the open file handle and information to write. The system searches the directory for the file's location, keeps a write pointer to the next write location (for sequential access), and updates this pointer after each write.",y
What is a write pointer?,A pointer kept by the system to indicate the next location in a file for writing (for sequential access).,y
Describe the process of reading from a file.,"A system call is made with the file handle and a memory location for the next block. The directory is searched for the file entry. The system keeps a read pointer to the next read location (for sequential access), and this pointer is updated after each read.",y
What is a read pointer?,A pointer kept by the system to indicate the next location in a file for reading (for sequential access).,y
What is the current-file-position pointer?,"A per-process pointer that indicates the current location for read and write operations, shared by both.",y
"What is repositioning within a file, and what is it also known as?","It involves repositioning the current-file-position pointer to a given value, with no actual I/O involved. It is also known as file seek.",y
What is another term for repositioning within a file?,File seek.,y
Describe the process of deleting a file.,"Search the directory for the named file, release all its allocated space for reuse, and erase or mark its directory entry as free.",y
How do hard links affect file deletion?,Hard links allow multiple names for the same file; the actual content is only deleted when the last hard link to it is removed.,y
What does it mean to truncate a file?,"To erase its contents while keeping its attributes, resetting the file length to zero, and releasing its file space.",y
"Besides the minimal set (create, write, read, reposition, delete, truncate), what are other common file operations?",Appending and renaming.,y
Can primitive file operations be combined? Give an example.,"Yes, primitive operations can be combined for more complex tasks, such as copying a file.",y
What other types of operations are available for files besides content manipulation?,"Operations to get or set file attributes, such as length or owner.",y
Why is the `open()` system call used before the first use of a file?,To avoid constant directory searching.,y
What data structure does the OS use to keep track of all open files?,The open-file table.,y
How is a file specified in subsequent I/O calls after it's opened?,"By an index into the open-file table, eliminating the need for further directory searching.",y
What happens when a file is closed?,The OS removes its entry from the open-file table and releases any associated locks.,y
Do `create()` and `delete()` operations require an open file?,"No, `create()` and `delete()` operations work with closed files.",y
Do all systems require explicit `open()` and `close()` calls?,"No, some systems implicitly open/close files (e.g., upon job termination), but most systems require explicit `open()` and `close()` calls.",y
Describe the detailed steps of the `open()` system call.,"It takes the file name, searches the directory for it, and copies the file's entry to the open-file table.",y
What kind of information can the `open()` system call accept besides the file name?,"Access-mode information, such as create, read-only, read-write, or append-only.",y
What happens after access-mode info is provided to `open()`?,"The mode is checked against the file's permissions; if allowed, the file is opened.",y
What does `open()` return that is used in all subsequent I/O operations?,A pointer to the open-file table entry for that file.,y
What complicates `open()` and `close()` operations?,Simultaneous opens by multiple processes.,y
What two levels of internal tables does the OS use for open files?,"A per-process table (tracks files a process has open, current file pointer, access rights, accounting) and a system-wide open-file table (stores process-independent info like disk location, access dates, and size).",y
"When a file is opened by another process, how do the tables interact?","A new entry is created in the opening process's per-process table, which points to the existing system-wide open-file table entry for that file.",y
"What is the ""open count"" in the open-file table?",A count of the number of processes that currently have the file open.,y
"What happens to the ""open count"" when a file is closed, and what is the consequence?","The `close()` operation decreases the open count; when the count reaches zero, the file's entry is removed from the system-wide open-file table.",y
What is the purpose of file locks?,"They allow one process to lock a file or sections of a file, preventing others from accessing them.",y
When are file locks particularly useful?,"For shared files, such as a system log.",y
What is a shared lock?,"A type of file lock that multiple processes can acquire concurrently, similar to a reader lock.",y
What is an exclusive lock?,"A type of file lock that only one process can acquire at a time, similar to a writer lock.",y
What is a mandatory file-locking mechanism?,"A mechanism where the OS prevents other processes from accessing a file that is locked (e.g., in Windows).",y
What is an advisory file-locking mechanism?,"A mechanism where the OS does not prevent access to a locked file; applications must manually acquire and respect the lock (e.g., in UNIX).",y
Who is responsible for ensuring locking integrity in mandatory vs. advisory file-locking?,"In mandatory locking, the OS ensures integrity. In advisory locking, developers must ensure locks are properly used.",y
What precautions should be taken when using file locks?,"They require the same precautions as process synchronization, such as holding exclusive locks only during actual access and avoiding deadlocks.",y
Why should an OS recognize and support file types?,"To perform reasonable operations, such as preventing a binary-object program from being output as garbage.",y
What is a common technique for indicating a file's type?,"Including the type as part of the file name, using an extension (e.g., `name.extension`).",y
How does the OS use file extensions?,"To indicate the file type and allowed operations (e.g., `.com`, `.exe`, `.sh` for execution).",y
What is a shell script?,A file (often with a `.sh` extension) containing a series of ASCII commands for a shell.,y
How do application programs use file extensions?,"They use extensions to identify expected file types (e.g., Java compilers expect `.java` files).",y
What is the nature of file extensions regarding OS enforcement?,"They are generally ""hints"" to applications, not always strictly enforced by the OS.",y
How does macOS handle file type and creator information?,"Each file has a type (e.g., `.app`) and a creator attribute (the program that created it).",y
Is the macOS creator attribute enforced?,"Yes, it is set by the OS during the `create()` call and is enforced.",y
How does macOS leverage the creator attribute for user interaction?,"If a word processor file has the word processor as its creator, double-clicking the file opens the application and loads the file.",y
"What is a ""magic number"" in UNIX, and what is its purpose?","A specific number or sequence of bytes at the beginning of some binary files that indicates the data type (e.g., image format). There can also be text magic numbers for text files.",y
Do all UNIX files have magic numbers?,"No, not all files have magic numbers, and system features are not solely based on them.",y
Does UNIX record the program that created a file?,"No, UNIX does not record the creating program.",y
How does UNIX treat file-name extensions?,"UNIX allows file-name extensions as hints, but they are not enforced or depended on by the OS; they primarily aid users.",y
What do file types generally indicate about a file?,"They indicate the internal structure, which must match the expectations of programs reading them (e.g., source/object files).",y
What is an example of a file that must conform to an OS-understood structure?,"An executable file, which must conform to a structure the OS can load and run.",y
What are the disadvantages of an OS supporting multiple file structures?,"It leads to a large and cumbersome OS, requires code for each supported structure, may necessitate defining every file as one of the supported types, and can cause problems for new applications with unsupported structures.",y
Provide an example of a file type that might cause issues with a rigid OS file-type mechanism.,"An encrypted file, which is neither ASCII text nor executable binary, may require circumventing or misusing the OS file-type mechanism.",y
Which operating systems tend to impose minimal file structures?,UNIX and Windows.,y
Describe the internal file structure in UNIX.,"Each file is treated as a sequence of 8-bit bytes, with no interpretation by the OS.",y
What is the tradeoff of UNIX's minimal file structure approach?,"It provides maximum flexibility but offers little OS support, requiring the application to interpret the file's structure.",y
What is the minimum file structure that all operating systems must support?,The executable file structure.,y
What can be complicated for the OS internally regarding files?,Locating an offset within a file.,y
What is the standard unit of I/O for disk systems?,"Units of one block (or physical record), which have a well-defined and uniform size (sector size).",y
How do logical record length and physical block size typically compare?,"The physical record (block) size is unlikely to match the desired logical record length, and logical records themselves may vary in length.",y
How do file systems handle the difference between logical record length and physical block size?,By packing logical records into physical blocks.,y
How does UNIX view the internal structure of files regarding addressability?,"All files are streams of bytes, with each byte individually addressable by its offset.",y
How does the file system handle byte-level addressing with disk blocks?,"It automatically packs and unpacks bytes into physical disk blocks (e.g., 512 bytes per block).",y
What factors determine how many logical records fit into a physical block?,"Logical record size, physical block size, and the packing technique used.",y
Who can be responsible for packing logical records into blocks?,Either the user application or the OS.,y
What units do basic I/O functions typically operate in?,In terms of blocks.,y
Is the conversion from logical records to physical blocks complex?,"No, it's considered a simple software problem.",y
What is internal fragmentation in the context of file storage?,"Wasted disk space in the last allocated block of a file because disk space is allocated in fixed-size blocks, and the file size is not an exact multiple of the block size.",y
What is the relationship between block size and internal fragmentation?,"All file systems suffer from internal fragmentation, and a larger block size generally leads to greater fragmentation.",y
"Define ""file"".",Smallest logical storage unit; collection of related information.,y
"Define ""text file"".",File containing text (alphanumeric characters).,y
"Define ""source file"".",File containing program source code.,y
"Define ""executable file"".",File containing program ready for loading/execution.,y
"Define ""extended file attributes"".",Extended metadata such as character encoding and checksums.,y
"Define ""file info window"".",A GUI view of file metadata.,y
"Define ""write pointer"".",The location in a file for the next write operation.,y
"Define ""read pointer"".",The location in a file for the next read operation.,y
"Define ""current-file-position pointer"".",A per-process pointer that indicates the next read or write location within a file.,y
"Define ""seek"" (file operation).",The operation of changing the current-file-position pointer.,y
"Define ""hard links"".",File-system links where a file has two or more names pointing to the same inode.,y
"Define ""open-file table"".",An OS data structure that contains details of every currently open file.,y
"Define ""open count"".",The number of processes that currently have a specific file open.,y
"Define ""shared lock"".","A type of file lock that allows concurrent acquisition by multiple processes (e.g., for reading).",y
"Define ""exclusive lock"".","A type of file lock that allows only one process to acquire it at a time (e.g., for writing).",y
"Define ""advisory file-lock mechanism"".",A file-locking system where the OS does not enforce the locking; applications must cooperate.,y
"Define ""shell script"".",A file containing a set series of commands specific to a shell.,y
"Define ""magic number"".",A number or specific byte sequence at the start of a file indicating its data type.,y
"Define ""internal fragmentation"".","Wasted disk space in the last block of a file, caused by allocating disk space in fixed-size blocks when the file size is not an exact multiple of the block size.",y
