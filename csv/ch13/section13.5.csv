Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary characteristic of the memory mapping file access method?,It requires exclusive access to the file by a single process.,It treats file I/O as routine memory accesses using virtual memory techniques.,It is exclusively used for networked file systems.,It strictly uses dedicated system calls for every byte read or written.,It involves caching the entire file in RAM before any access.,B,"Memory mapping treats file I/O as routine memory accesses, leveraging virtual memory techniques for efficiency."
What is a significant performance advantage of using memory-mapped files for I/O?,It guarantees immediate write-through to secondary storage for all changes.,"It eliminates the need for any form of caching, reducing complexity.",It simplifies and speeds up file access by avoiding `read()` and `write()` system call overhead.,"It can only be used for small files, making their access faster.","It provides built-in encryption for all file data, improving security.",C,"Memory-mapped files bypass the overhead of traditional `read()` and `write()` system calls, leading to performance increases."
"When a process first attempts to access a specific portion of a memory-mapped file, what typically occurs?",The entire file is loaded into physical memory immediately.,A direct disk I/O operation is performed for the specific byte accessed.,"A demand paging operation results in a page fault, reading a page-sized portion of the file.",The operating system prevents access until the file is manually cached.,The process must first explicitly call `read()` for that section.,C,"Initial access to a memory-mapped file typically triggers demand paging, leading to a page fault that brings the required page-sized portion of the file into physical memory."
"After the initial page fault, how are subsequent reads and writes to a memory-mapped file handled?",They continue to incur system call overhead for each access.,They are handled as routine memory accesses to the process's virtual address space.,"They trigger a new page fault for every access, regardless of locality.","They are buffered entirely in kernel space, inaccessible directly by the process.",They require the process to explicitly flush changes to disk after each write.,B,"Once a page is loaded due to an initial access, subsequent reads and writes to that portion of the memory-mapped file are treated as routine memory accesses, speeding up operations."
Memory-mapped files simplify and speed up file access by avoiding the overhead of which specific type of operations?,CPU context switches,Network socket communications,Virtual memory management,Disk block allocation,`read()` and `write()` system calls,E,"A key benefit of memory-mapped files is the avoidance of the overhead associated with explicit `read()` and `write()` system calls, as file I/O becomes memory access."
When are updates made to a memory-mapped file generally written back to secondary storage?,Immediately after every byte is written to memory.,Only when the system is shut down.,"Generally, when the file is closed.",When the operating system detects low system memory.,"Never, as they are only temporary in memory.",C,Updates to memory-mapped files are not necessarily immediate; they are generally written back to secondary storage when the file is closed.
What might happen to intermediate changes made to a memory-mapped file if the system experiences memory pressure?,They are immediately discarded to free up memory.,They are forced to be written back to secondary storage without delay.,They may be moved to swap space.,The operating system prevents further writes to the file.,The file mapping is automatically unmapped.,C,"Under memory pressure, intermediate changes in memory-mapped files, like any other virtual memory pages, may be moved to swap space."
"Which operating system is specifically mentioned as memory-mapping all file I/O to the kernel address space, even when using standard file access calls?",Linux,Windows,macOS,Solaris,FreeBSD,D,"The text states that some OS, like Solaris, memory-map all file I/O to kernel address space, even with standard calls."
How do multiple processes achieve data sharing using memory-mapped files concurrently?,By each process making independent copies of the file.,By only allowing one process to map the file at a time.,By mapping the same file concurrently into their respective virtual address spaces.,By using network sockets to transfer data between them.,By serializing access through a central file server.,C,"Multiple processes can map the same file concurrently, allowing them to share data by accessing the same underlying physical pages in memory."
"When multiple processes map the same section of a file, what is the visibility characteristic of writes made by one process?",Writes are only visible to the writing process until the file is closed.,Writes are immediately visible to all other processes mapping the same section.,Writes are only visible after explicit synchronization calls are made by all processes.,Writes are visible to others only if they remap the file.,Writes are never visible to other processes due to isolation.,B,"Writes by one process to a shared memory-mapped section are immediately visible to other processes mapping the same section, as they all point to the same physical memory."
How is concurrent data sharing among processes using memory-mapped files generally implemented at a low level?,Through dedicated hardware registers for each process.,By replicating data across separate physical memory blocks for each process.,By having the virtual memory map of each process point to the same physical page(s).,By using inter-process pipes for data exchange.,By requiring kernel intervention for every data access.,C,Shared memory through memory-mapped files is implemented by the virtual memory maps of participating processes pointing to the same physical pages in memory.
Memory-mapped files support which mechanism for processes that share read-only data but require private copies for modification?,Write-through caching,Copy-on-write,Direct Memory Access (DMA),Pre-fetching,Journaling,B,"Memory-mapped files support copy-on-write, allowing processes to share read-only data efficiently and only get their own copies if they attempt to modify the data."
"When multiple processes share data via memory-mapped files, what mechanism should they typically use for coordination to prevent data corruption?",Sending signals to each other before accessing data.,Polling the file for changes at regular intervals.,Using mutual exclusion primitives like mutexes or semaphores.,Relying on the operating system to automatically manage concurrent writes.,Restricting access to only one process at a time globally.,C,"When processes share data, including through memory-mapped files, they must use mutual exclusion mechanisms to coordinate access and prevent race conditions or data corruption."
What is a common method for implementing shared memory between processes?,Using network sockets for inter-process communication.,Implementing it solely through kernel system calls without direct memory access.,By memory mapping files into the processes' virtual address spaces.,By passing data through temporary files on disk.,Through direct CPU register sharing.,C,The text explicitly states that 'Shared memory often implemented by memory mapping files'.
"According to the Windows API outline for shared memory using memory-mapped files, what is the first step?",Establishing a view of the mapped file.,Creating a file mapping for the file.,Opening the file with `MapViewOfFile()`.,Calling `UnmapViewOfFile()`.,Creating a named pipe.,B,The outline states the first step is to 'Create a file mapping for the file'.
"In the Windows API process of using memory-mapped files for shared memory, what is the second step after creating a file mapping?",Opening the file using `CreateFile()`.,Closing the file mapping object.,Establishing a view of the mapped file in the process's virtual address space.,Writing data to the file mapping object.,Creating a named shared-memory object.,C,The outline states the second step is to 'Establish a view of the mapped file in process's virtual address space'.
"In the context of the Windows API, a mapped file primarily acts as what for inter-process communication?",A transient data buffer.,A message queue.,A shared-memory object.,A named pipe.,A remote procedure call endpoint.,C,The text states: 'Mapped file acts as shared-memory object for inter-process communication'.
Which Windows API function is used to open a file and obtain a `HANDLE` for subsequent memory mapping steps?,CreateFileMapping(),MapViewOfFile(),UnmapViewOfFile(),CreateFile(),OpenFile(),D,The first step in the Windows API example is to 'Open file with `CreateFile()` (returns `HANDLE`)'.
Which Windows API function is responsible for creating a file mapping object using a file `HANDLE`?,CreateFile(),MapViewOfFile(),CreateFileMapping(),OpenFileMapping(),GetFileMappingHandle(),C,The steps list 'Create file mapping with `CreateFileMapping()` (uses file `HANDLE`)'.
Which Windows API function is used to establish a view of a mapped file in a process's virtual address space?,CreateFile(),CreateFileMapping(),UnmapViewOfFile(),MapViewOfFile(),GetViewOfFile(),D,The steps list 'Establish view with `MapViewOfFile()` (uses mapped object `HANDLE`)'.
"What type of object does the `CreateFileMapping()` function create, which can be accessed by name from multiple processes in the Windows API?",A view object,A file handle,A named shared-memory object,A file stream,A temporary file,C,"The text states: '`CreateFileMapping()` creates a named shared-memory object (e.g., `SharedObject`)'."
"What does the `MapViewOfFile()` function return, and how do accesses to this return value relate to the file?",It returns a file handle; accesses refer to the file's metadata.,It returns a pointer to the shared-memory object; accesses to this memory are accesses to the file.,It returns a block ID; accesses require further system calls.,It returns a process ID; accesses imply inter-process communication via messages.,It returns a boolean indicating success; accesses are not direct.,B,The text clarifies: '`MapViewOfFile()` returns pointer to shared-memory object; accesses to this memory are accesses to the file'.
What portion of a file can be mapped into memory using memory mapping?,Only the first page of the file.,"Only the entire file, no partial mapping.",Either the entire file or a specific portion of it.,Only the metadata of the file.,"A fixed 4KB block, regardless of file size.",C,The text states: 'Entire file or portion can be mapped'.
How is a memory-mapped file typically loaded into physical memory?,The entire file is loaded into physical memory at once upon mapping.,It is loaded only when specifically requested via a `read()` system call.,"It may be demand-paged, meaning portions are loaded as accessed.",It is always streamed directly from disk on access without caching.,It resides entirely in swap space until explicitly moved by the user.,C,"The text mentions that 'Mapped file may be demand-paged', meaning parts are loaded into physical memory only when accessed."
Which Windows API function is used by processes to remove a view of a mapped file from their virtual address space?,CloseHandle(),DeleteFileMapping(),UnmapViewOfFile(),ReleaseMappedFile(),FreeMemoryMap(),C,The text specifies: 'Both processes remove view with `UnmapViewOfFile()`'.
"According to the provided glossary, what is the definition of 'memory mapping'?",A technique to allocate dynamic memory on the heap.,A file-access method where file is mapped into process memory space for direct memory access.,The process of storing program instructions in ROM.,A method to cache frequently accessed data in CPU registers.,A system call for direct interaction with secondary storage devices.,B,The glossary defines 'memory mapping' as 'File-access method where file is mapped into process memory space for direct memory access'.
"In the context of Windows API, what does the term 'file mapping' refer to according to the glossary?",The final step in releasing shared memory resources.,The act of creating a physical file on disk.,The first step in memory-mapping a file.,A process of transferring data over a network.,A method for encrypting file contents.,C,The glossary defines 'file mapping' (in Windows) as 'the first step in memory-mapping a file'.
"According to the glossary, what is a 'view' in the context of Windows memory-mapped files?",A graphical user interface component.,An abstract representation of file permissions.,An address range mapped in shared memory; the second step in memory-mapping a file.,A snapshot of the file's contents at a specific time.,A kernel-level object representing an open file.,C,The glossary defines 'view' (in Windows) as 'an address range mapped in shared memory; second step in memory-mapping a file'.
"In the Windows API, what is a 'named shared-memory object'?",A temporary file created by the operating system.,A network resource shared among multiple computers.,A section of a memory-mapped file accessible by name from multiple processes.,A special type of mutex for inter-process synchronization.,A data structure used for direct kernel communication.,C,"The glossary defines 'named shared-memory object' as 'In Windows API, a section of a memory-mapped file accessible by name from multiple processes'."
