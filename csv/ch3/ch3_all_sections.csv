What is the fundamental definition of a process?,A file stored on a disk containing executable code.,A program in execution.,A passive entity waiting to be loaded into memory.,A set of commands executed by a batch system.,A CPU register indicating the next instruction location.,B,The text explicitly defines a process as 'Program in execution'.
Which of the following resources are typically required by a process during its execution?,Only CPU time and memory.,Only files and I/O devices.,"CPU time, memory, files, and I/O devices.",Only a program counter and CPU registers.,Only an executable file.,C,"The text states that a process 'Requires resources: CPU time, memory, files, I/O devices'."
How is a program primarily distinguished from a process in terms of their nature?,"A program is an active entity, whereas a process is a passive entity.","A program is stored in memory, whereas a process is stored on disk.","A program is a passive entity, whereas a process is an active entity.","A program requires CPU time, while a process only requires memory.","A program executes concurrently, while a process executes sequentially.",C,"The text defines a program as a 'Passive entity (e.g., executable file on disk)' and a process as an 'Active entity (program counter, associated resources)'."
Under what condition does a program typically transform into a process?,When it is compiled into an executable file.,When its source code is written.,When it is loaded into memory.,When it is deleted from the disk.,When it is identified as a user program.,C,The text clearly states: 'Program becomes a process when loaded into memory'.
"When multiple processes are associated with the same program (e.g., multiple web browser instances), which sections of their memory layout typically differ?",Only the text section.,The text section and data section.,"The data, heap, and stack sections.",Only the heap and stack sections.,"All sections, including the text section, are identical.",C,"The text clarifies that when multiple processes are associated with the same program, 'text sections are identical, but data, heap, and stack sections differ'."
What is contained within the text section of a process's memory layout?,Global variables.,Dynamically allocated memory.,Executable code.,Function parameters and local variables.,Accounting information.,C,The text defines the 'Text section' as 'Executable code'.
Which type of variables are stored in the data section of a process's memory layout?,Temporary variables.,Local variables within functions.,Dynamically allocated variables.,Global variables.,Function parameters.,D,The text specifies the 'Data section' contains 'Global variables'.
Which characteristic accurately describes the heap section of a process's memory layout?,It stores fixed-size executable code.,It contains global variables and has a fixed size.,It stores temporary data for function calls and shrinks.,It stores dynamically allocated memory and can grow or shrink.,It holds return addresses for function calls.,D,The text describes the 'Heap section' as 'Dynamically allocated memory during runtime (grows/shrinks)'.
The stack section in a process's memory layout is primarily used for what purpose?,Storing executable code.,Holding global variables.,Dynamically allocating memory at runtime.,"Storing temporary data for function calls, including parameters, return addresses, and local variables.",Managing I/O device allocations.,D,"The text states the 'Stack section' holds 'Temporary data for function calls (parameters, return addresses, local variables)'."
"In a typical process memory layout, how do the stack and heap sections interact regarding their growth?",Both grow downwards from the top of memory.,Both grow upwards from the bottom of memory.,"The stack grows downwards and the heap grows upwards, towards each other.","The stack grows upwards and the heap grows downwards, away from each other.",Their growth directions are fixed and do not allow for overlap.,C,The text explicitly states: 'Stack and heap grow towards each other; OS prevents overlap.' This implies they grow from opposite ends of an allocated memory space.
"What is an activation record, and how is it used in the context of process memory?",A fixed-size section for global variables.,"A record created when a function is called, pushed onto the stack.",A section for dynamically allocated memory.,A pointer to the next instruction to be executed.,A part of the Process Control Block for accounting information.,B,"The text states: 'Activation record: Pushed onto stack on function call, popped on return.' The glossary further specifies it's 'A record created when a function or subroutine is called; added to the stack by the call and removed when the call returns. Contains function parameters, local variables, and the return address.'"
In which process state are instructions currently being executed by the CPU?,New,Ready,Waiting,Running,Terminated,D,The text defines the 'Running' state as when 'Instructions are being executed (only one process per processor core at any instant)'.
"A process enters the ""Waiting"" state under which of the following circumstances?",It is being created.,It is waiting to be assigned to a processor.,It has finished execution.,"It is waiting for an event to complete, such as I/O or a signal.",Its instructions are actively being executed.,D,"The text defines the 'Waiting' state as when a 'Process is waiting for an event (e.g., I/O completion, signal reception)'."
"What does it mean for a process to be in the ""Ready"" state?",It is currently executing instructions.,It is in the process of being created.,It has completed its execution.,It is waiting for an I/O operation to finish.,It is waiting to be assigned to a processor.,E,The text defines the 'Ready' state as when a 'Process is waiting to be assigned to a processor'.
Which process state indicates that the process is currently undergoing creation?,Ready,Running,New,Waiting,Terminated,C,The text defines the 'New' state as when a 'Process is being created'.
What is the primary purpose of the Process Control Block (PCB)?,To store the executable code of a program.,To manage dynamically allocated memory for a process.,To act as a data structure in the OS representing each process and containing its essential information.,To function as a CPU register indicating the next instruction.,To define the temporary data for function calls.,C,The text describes the PCB as a 'Data structure in OS representing each process' that 'Contains information' and 'Serves as repository for data needed to start/restart a process'.
Which of the following pieces of information is NOT typically stored within a Process Control Block (PCB)?,Process state.,Program counter.,CPU registers.,The entire executable code of the process.,I/O status information.,D,"The PCB stores metadata about the process, such as its state and resource allocation, but not the entire executable code itself, which resides in the process's text section in memory."
"According to the text, what is a thread?","A complete, independent process with its own PCB.",A program stored as an executable file on disk.,A passive entity that becomes active when loaded into memory.,"A process control structure that is an execution location, allowing a process to perform multiple tasks concurrently if multithreaded.",A CPU register holding the address of the next instruction.,D,"The glossary defines a 'thread' as 'A process control structure that is an execution location. A process with a single thread executes only one task at a time, while a multithreaded process can execute a task per thread.' The main text also notes multithreaded processes 'perform multiple tasks concurrently'."
"What is a significant benefit of using multithreaded processes, especially on modern systems?",It reduces the memory footprint of the process by eliminating the need for a heap section.,It allows for sequential execution of tasks on single-core systems only.,It enables parallel execution of multiple tasks within a single process on multicore systems.,It simplifies the process of creating new processes from existing programs.,It ensures that only one process can run at any given instant on a processor core.,C,"The text states: 'Multithreaded process: multiple threads of execution, performs multiple tasks concurrently. Especially beneficial on multicore systems for parallel execution.'"
What entity does the Operating System (OS) primarily schedule onto available processing cores?,Only entire processes.,Only system code.,Threads.,Executable files directly.,Program counters.,C,The text explicitly states: 'OS schedules threads onto available processing cores'.
How does the introduction of multiple threads of control within a process impact the Process Control Block (PCB)?,The PCB is replaced by a Thread Control Block entirely.,The PCB remains unchanged as threads do not require specific information.,The PCB is expanded to include per-thread information.,"Threads each have their own independent PCB, separate from the process PCB.","The PCB only stores information for the main thread, ignoring others.",C,The text states: 'PCB expanded to include per-thread information' when discussing multithreaded processes.
"In the context of the provided glossary, what does the term ""job"" refer to?",Any program loaded into memory.,A unit of work for a single-threaded process.,A set of commands or processes executed by a batch system.,The active entity of a program.,A CPU register used for scheduling.,C,The glossary defines 'job' as 'A set of commands or processes executed by a batch system'.
What is the function of the program counter?,To store global variables.,To manage dynamically allocated memory.,To indicate the main memory location of the next instruction to load and execute.,To define the current state of a process.,To hold information about I/O devices.,C,The glossary defines 'program counter' as 'A CPU register indicating the main memory location of the next instruction to load and execute'.
What is an executable file?,A file containing source code that needs to be compiled.,A file that stores temporary data for function calls.,A file containing a program that is ready to be loaded into memory and executed.,A file used by the operating system to store process states.,A file that holds dynamically allocated memory.,C,The glossary defines 'executable file' as 'A file containing a program that is ready to be loaded into memory and executed'.
"What does the ""state"" of a process encompass?",Only its executable code in the text section.,Its program counter and CPU registers exclusively.,Its current activity as well as its associated memory and disk contents.,Whether it is a user process or an OS process.,Its allocated I/O devices only.,C,"The glossary defines 'state' as 'The condition of a process, including its current activity as well as its associated memory and disk contents'."
What is the primary objective of multiprogramming in an operating system?,To ensure user interaction by frequently switching CPU cores.,To minimize the number of processes in memory.,To maximize CPU utilization by always having a process running.,To facilitate the removal of processes from memory to disk.,To reduce the complexity of memory management during context switches.,C,The text states that the 'Multiprogramming objective' is to 'Maximize CPU utilization by always having a process running'.
Which of the following best describes the objective of time sharing in an operating system?,To keep as many processes in memory as possible to maximize throughput.,To ensure that I/O-bound processes receive more CPU time than CPU-bound processes.,To switch the CPU core among processes frequently to enable user interaction.,To reduce the overhead associated with context switches.,To exclusively run one process at a time on a single core.,C,The text defines the 'Time sharing objective' as to 'Switch CPU core among processes frequently for user interaction'.
What is the main role of a process scheduler?,To manage the allocation of memory to new processes.,To select an available process for execution on a core.,To perform I/O operations on behalf of processes.,To convert I/O-bound processes into CPU-bound processes.,To save the context of a process after it terminates.,B,"According to the text and glossary, the 'process scheduler' 'Selects an available process for execution on a core'."
The 'degree of multiprogramming' refers to what aspect of an operating system?,The number of CPU cores available for process execution.,The frequency at which the CPU scheduler executes.,The total number of processes created since system startup.,The number of processes currently residing in memory.,The ratio of I/O-bound processes to CPU-bound processes.,D,The text and glossary define 'Degree of multiprogramming' as 'The number of processes currently in memory' or 'The number of processes in memory'.
Which characteristic best defines an I/O-bound process?,It spends more time performing computations than I/O.,It is always prioritized over CPU-bound processes.,It spends more time doing I/O than computations.,It typically runs in the background with no user interaction.,It requires frequent context switches to complete its tasks.,C,The text defines an 'I/O-bound process' as one that 'Spends more time doing I/O than computations'.
A CPU-bound process is characterized by which of the following?,It frequently waits for external events or user input.,It spends more time executing on CPU than it does performing I/O.,Its execution is primarily dependent on the speed of the disk.,It is often 'swapped out' to disk to free up memory.,It is designed to maximize CPU utilization by performing minimal computation.,B,"The text states that a 'CPU-bound process' 'Spends more time doing computations than I/O' or, from the glossary, 'Spends more time executing on CPU than it does performing I/O'."
What does the 'ready queue' in process scheduling typically contain?,Processes that are currently performing I/O operations.,Processes that have terminated and are waiting to be cleaned up.,Processes that are ready and waiting for CPU execution.,Processes that have been 'swapped out' to disk.,Processes waiting for a child process to complete.,C,The text defines the 'Ready queue' as 'Processes ready and waiting for CPU execution (linked list of PCBs)' and the glossary states 'The set of processes ready and waiting to execute'.
A 'wait queue' holds processes that are in what state?,Ready to be dispatched to the CPU.,"Waiting for a specific event to occur, such as I/O completion.",Currently executing on a CPU core.,In the process of being terminated.,Temporarily removed from memory to disk.,B,"The text defines the 'Wait queue' as 'Processes waiting for a specific event (e.g., I/O completion)'."
"Consider the typical process flow presented. If a running process experiences a time slice expiration, to which state does it typically transition next?",New,Terminated,I/O wait,Ready,Dispatched,D,"The 'Process flow' diagram indicates that from 'Dispatched (Running)', an 'Interrupt/Time slice expire' leads back to the 'Ready' state."
"What is the primary function of the CPU scheduler, and how frequently does it operate?",It manages memory allocation and operates only when memory is overcommitted.,"It selects a process from the ready queue, allocates a CPU core, and executes frequently (e.g., every 100ms or more).",It handles I/O requests and operates only when a process requests I/O.,It saves the context of a process and operates only when an interrupt occurs.,It loads processes into memory from disk and operates only during system startup.,B,"The 'CPU Scheduling' section states the 'CPU scheduler's' role is to 'Selects process from ready queue, allocates CPU core' and that it 'Executes frequently (e.g., every 100ms or more)' and 'May forcibly remove CPU from a process'."
What is 'swapping' primarily used for in operating systems?,To switch the execution context between two processes.,To move processes between the ready queue and the wait queue.,"To temporarily remove a process from memory to disk to reduce the degree of multiprogramming, typically when memory is overcommitted.",To optimize the CPU's ability to switch between I/O-bound and CPU-bound processes.,To permanently store terminated processes for later analysis.,C,"The 'Swapping' section explains it as an 'Intermediate scheduling form' where a process is 'Remove[d] process from memory to disk (""swapped out"") to reduce degree of multiprogramming' and it's 'Typically used when memory is overcommitted'."
"What event typically causes the operating system to change the CPU core task to a kernel routine, initiating a potential context switch?",A process completing all its computations.,The system running out of available disk space.,An interrupt.,A process transitioning from the New state to the Ready state.,The degree of multiprogramming falling below a threshold.,C,The 'Context Switch' section states: 'Interrupts cause OS to change CPU core task to kernel routine'.
"In the context of process execution, what does 'context' refer to?",The current state of I/O operations being performed by the process.,The priority level assigned to the process by the scheduler.,"The state of its execution, including CPU registers, program counter, and memory-management info like stack and heap.","The queue in which the process is currently residing (e.g., ready or wait).",The total time the process has spent executing on the CPU since creation.,C,"The text explicitly states that 'context' includes 'CPU registers, process state, memory-management info' and the glossary defines 'context' as 'the state of its execution, including the contents of registers, its program counter, and its memory context, including its stack and heap'."
What is involved in a 'state save' operation during a context switch?,Copying a process's saved context from disk to memory.,Copying the current CPU state (process context) of the running process to its PCB.,Allocating new memory for a process's stack and heap.,Updating the process's entry in the ready queue.,Signaling an I/O completion event for a waiting process.,B,The text states 'State save: Copying current CPU state' and the glossary adds 'Copying a process's context to save its state in order to pause its execution in preparation for putting another process on the CPU'.
The 'state restore' operation primarily involves which action?,Moving a process from the ready queue to the wait queue.,Reloading the operating system kernel after an interrupt.,Copying a process's context from its saved location to the CPU registers to resume execution.,Reducing the degree of multiprogramming by 'swapping out' a process.,Saving the state of a CPU-bound process before it goes into I/O wait.,C,The text states 'State restore: Copying saved context to resume operations' and the glossary elaborates 'Copying a process's context from its saved location to the CPU registers in preparation for continuing the process's execution'.
Which statement accurately describes a 'context switch'?,It is a process that is designed to perform heavy computations.,It is the act of moving a process between main memory and a backing store.,"It is the switching of the CPU from one process to another, requiring a state save of the old process and a state restore of the new process.",It is a mechanism for a process to request I/O services from the operating system.,It is a visual representation of process flow through various queues.,C,"The text states 'Context switch: Switching CPU core from one process to another (state save old, state restore new)' and the glossary provides a similar definition emphasizing 'state save' and 'state restore'."
Which of the following statements about context switches is true?,They are considered useful work because they advance a process's execution.,Their speed is primarily determined by the number of CPU cores available.,"They contribute to pure overhead, as no useful work is done during the switch.",Hardware support for multiple register sets typically slows down context switches.,More complex OS/memory management always leads to faster context switches.,C,The text clearly states that a context switch is 'Pure overhead (no useful work done during switch)'.
What factor can significantly impact the speed of a context switch?,The type of process (I/O-bound vs. CPU-bound).,The number of processes currently in the wait queue.,"Memory speed, the number of registers to copy, and special instructions.",The overall degree of multiprogramming in the system.,Whether the process is 'swapped in' or 'swapped out'.,C,"The text lists 'Speed varies (memory speed, registers to copy, special instructions)' as factors affecting context switch speed."
"How can hardware support, specifically multiple register sets, affect context switch performance?","It has no impact, as context switching is purely a software operation.",It increases the overhead of context switching by requiring more complex kernel routines.,It can speed up context switches by reducing the need for extensive state saving and restoring.,"It forces the OS to use swapping more frequently, thus slowing down overall performance.","It causes more interrupts, leading to more frequent context switches but not necessarily faster ones.",C,The text states: 'Hardware support (multiple register sets) can speed up' context switches.
"In the process flow, what does it mean for a process to be 'dispatched'?",It has just completed an I/O operation and is returning to the ready queue.,It has been selected by the process scheduler to be executed next on a CPU core.,It has been moved from main memory to backing store.,It is waiting for an event to occur in a wait queue.,It is in the process of being terminated.,B,The process flow shows 'Dispatched (Running)' and the glossary defines 'dispatched' as 'Selected by the process scheduler to be executed next'.
Which of the following statements accurately describes the fundamental nature of processes regarding their execution and lifecycle?,Processes are static entities that must be predefined before system startup and cannot be deleted.,"Processes can only execute sequentially, one after another, and are created at fixed intervals.","Processes can execute concurrently, and are created and deleted dynamically by the operating system.",Processes are created only by the operating system kernel and cannot be terminated by user applications.,Processes exist only as long as the parent process is active and cannot operate independently.,C,The text states that 'Processes can execute concurrently; created and deleted dynamically.' and 'OS provides mechanisms for process creation and termination.'
"When a parent process creates child processes, what is the typical hierarchical structure formed?","A linear chain of processes, where each child can only have one parent and one child.","A circular queue, where processes are linked in a continuous loop.","A flat structure, where all processes are independent and have no direct relation.","A tree structure, where parent processes create child processes.","A network graph, with arbitrary connections between any two processes.",D,"The text explicitly states that a parent process creates child processes, forming a 'tree'."
What is a 'process identifier (pid)'?,A network address used for inter-process communication.,A unique value for each process in the system that can be used as an index to access various attributes of a process within the kernel.,A security token used to grant or deny access to system resources.,A memory address pointing to the start of the process's code segment.,A descriptive name assigned by the user to identify a process.,B,The glossary defines 'process identifier (pid)' as 'A unique value for each process in the system that can be used as an index to access various attributes of a process within the kernel.'
Which of the following is NOT an 'execution possibility' for a parent process after creating a child process?,The parent executes concurrently with its children.,The parent waits until all children terminate.,"The parent immediately terminates upon child creation, transferring control to the child.",The parent creates a child and then continues its own execution path.,The parent creates multiple children and manages their lifecycle.,C,The text lists two execution possibilities: 'Parent executes concurrently with children' and 'Parent waits until children terminate.' The option C is not listed as a possibility for the parent's execution behavior.
"In the context of process creation, what are the two 'address-space possibilities' for a child process?","Child has a smaller address space than the parent, or a larger one.","Child's address space is allocated on a different physical memory region, or the same one.","Child is a duplicate of the parent (same program/data), or the child has a new program loaded.","Child's address space is shared with other children, or it is entirely private.","Child's address space is read-only, or it is read-write.",C,The text states the 'Address-space possibilities' are: 'Child is a duplicate of parent (same program/data)' and 'Child has a new program loaded.'
"In UNIX/Linux, what is the primary function of the `fork()` system call during process creation?",To replace the current process's memory space with a new program.,To create a new process that is a copy of the parent's address space.,To terminate the calling process and return an exit status.,To allow the parent process to wait for the termination of a child process.,To load a specified program into the child's address space directly at creation.,B,The text states that `fork()` 'creates new process (child) as copy of parent's address space.'
"After a successful `fork()` call in UNIX/Linux, what are the return values for the child and parent processes, respectively?","Parent gets 0, child gets child's pid.",Both parent and child get 0.,"Child gets 0, parent gets child's pid.",Both parent and child get the same positive integer.,"Parent gets -1, child gets 0.",C,"The text specifies: '`fork()` return: 0 for child, child's pid for parent.'"
What is the purpose of the `exec()` system call in UNIX/Linux after a `fork()` call?,It creates a new process that is a duplicate of the calling process.,It allows the parent process to wait for the child's termination.,It replaces the process's memory space with a new program.,It returns the process ID of the calling process.,It deallocates all resources held by the calling process.,C,The text states `exec()` 'replaces process's memory space with new program (loads binary).'
Which of the following attributes does a child process typically inherit from its parent in UNIX/Linux?,"Only the program code, not data.",Only the process ID (pid).,"Privileges, scheduling attributes, and open files.",The parent's current execution point and register state.,None; all attributes are reset for the child.,C,"The text lists that the 'Child inherits privileges, scheduling attributes, open files.'"
"In Windows, which function is primarily used to create a new process and directly load a specified program into its address space?",fork(),exec(),CreateProcess(),WaitForSingleObject(),TerminateProcess(),C,"The text states '`CreateProcess()`: similar to `fork()`, but loads specified program into child's address space at creation.'"
What happens when a process uses `exit()` to terminate itself?,It pauses indefinitely until another process explicitly resumes it.,It returns a status value to a waiting parent process and its resources are deallocated.,"It is immediately put into a 'suspended' state, retaining all its resources.",It signals the OS to create a duplicate of itself before terminating.,"It automatically becomes an orphan process, even if its parent is still running.",B,"The text explains, 'Process finishes, uses `exit()` to ask OS to delete it. Returns status value to waiting parent (via `wait()`). All process resources deallocated.'"
Which of the following is a valid reason for a parent process to terminate its child process?,The child process requested a change in its process ID.,The child process successfully completed its assigned task.,The child process exceeded its allocated resource usage.,The parent process wishes to share more resources with the child.,The child process initiated a new network connection.,C,The text lists 'Child exceeded resource usage' as a reason for a parent terminating a child.
What is 'cascading termination'?,A process's ability to terminate multiple unrelated processes concurrently.,A mechanism where a child process can terminate its parent process.,"A technique in which, when a process is ended, all of its children are ended as well.",The termination of a process due to an unhandled error or exception.,The process of a parent passing its exit status to its children upon termination.,C,"The glossary defines 'cascading termination' as 'A technique in which, when a process is ended, all of its children are ended as well.' The main text also notes it is 'OS initiated'."
"In UNIX/Linux, what defines a 'zombie process'?",A process that is still executing but is unresponsive to user input.,A child process whose parent terminated without calling `wait()`.,A process that has terminated but whose parent has not yet called `wait()` to collect its state and accounting information.,A process that is waiting for an I/O operation to complete indefinitely.,A process that has been suspended by the operating system due to low memory.,C,The glossary defines 'zombie' as 'A process that has terminated but whose parent has not yet called wait() to collect its state and accounting information.'
"In UNIX/Linux, what defines an 'orphan process'?",A process that has terminated due to a critical error.,A process that runs in the background without a controlling terminal.,A child of a parent process that terminates in a system that does not require a terminating parent to cause its children to be terminated.,A process that has been explicitly detached from its parent by the `disown` command.,"A process that consumes excessive resources, thus becoming isolated.",C,The glossary defines 'orphan' as 'The child of a parent process that terminates in a system that does not require a terminating parent to cause its children to be terminated.'
"In UNIX/Linux, what role does the `init` (or `systemd`) process play concerning orphan processes?",It immediately terminates all orphan processes to free up resources.,It sends a signal to orphan processes to restart them under a new parent.,It becomes the new parent for orphan processes and periodically calls `wait()` to clean them up.,It changes the process ID of orphan processes to a random value.,It places orphan processes into a special queue for manual user intervention.,C,"The text states '`init` (or `systemd`) becomes new parent for orphans, periodically calls `wait()` to clean up.'"
Which of the following Android process types is considered the 'most important' and least likely to be terminated by the OS for resource reclamation?,Empty process,Background process,Service process,Visible process,Foreground process,E,"The Android process hierarchy section lists Foreground process as 'Visible, user interacting (most important)' and states 'Android terminates processes from least to most important'."
"In the Android process hierarchy, which process type is defined as 'not directly visible, but performing activity foreground process refers to'?",Foreground process,Visible process,Service process,Background process,Empty process,B,"The text defines 'Visible process' as 'Not directly visible, but performing activity foreground process refers to.'"
"When Android terminates processes to reclaim resources, in what order does it typically terminate them?",From most important to least important.,From processes with the largest memory footprint to the smallest.,From least important to most important.,"Randomly, to ensure fairness among applications.",Only processes that have been idle for a long time are terminated.,C,"The text states, 'Android terminates processes from least to most important to reclaim resources.'"
What is the primary purpose of Interprocess Communication (IPC)?,Managing CPU scheduling for a single process,Enabling communication and data exchange between different processes,Allocating primary memory resources exclusively,Handling I/O operations for peripheral devices,Defining the various states a process can be in,B,"Interprocess Communication (IPC) is defined as the communication between processes, facilitating their ability to exchange data."
Which characteristic accurately describes 'independent processes'?,They rely on shared memory for all operations.,They share data and frequently affect each other's execution.,They do not share data with other processes.,They strictly require an IPC mechanism to operate.,Their primary goal is computation speedup through parallelization.,C,Independent processes are characterized by having no shared data with other processes.
What defines 'cooperating processes'?,They always execute sequentially without overlap.,They never interact or exchange any information.,They share data and can affect each other's operations.,They are exclusively designed for single-core processor systems.,They are typically used to reduce system modularity.,C,Cooperating processes are defined by their ability to share data and influence each other's execution.
Why do cooperating processes require an IPC mechanism?,To enforce strict isolation between them.,To prevent any form of data sharing.,To exchange data and information.,To minimize their overall system resource usage.,To ensure they run on separate physical machines.,C,Cooperating processes need an Interprocess Communication (IPC) mechanism to facilitate the exchange of data between them.
Which of the following is a primary reason for process cooperation related to shared information?,Eliminating the need for any form of shared resources.,"Information sharing, allowing concurrent access to data.",Strictly enforcing sequential execution of tasks.,Reducing the total number of processes in a system.,Decreasing the overall system's security posture.,B,"Information sharing, which involves concurrent access to shared data (e.g., copy/paste), is a key reason for process cooperation."
How does 'computation speedup' serve as a reason for process cooperation?,By ensuring tasks run on a single CPU core only.,"By breaking a task into subtasks for parallel execution, often requiring multiple cores.",By prioritizing single-threaded applications over multi-threaded ones.,By minimizing the total number of operations performed by the system.,By preventing any process from affecting another's execution.,B,"Computation speedup is achieved when a task is divided into subtasks that can be executed in parallel, often requiring multiple cores, making cooperation essential."
"In the context of process cooperation, what is the benefit of 'modularity'?","It concentrates all system functions into a single, monolithic process.",It mandates that processes operate entirely in isolation.,It divides system functions into separate processes or threads.,It eliminates the need for any form of interprocess communication.,It simplifies system design by reducing the total number of components.,C,"Modularity contributes to process cooperation by allowing system functions to be divided into separate, manageable processes or threads."
What are the two fundamental Interprocess Communication (IPC) models mentioned?,Pipes and Sockets,Shared Memory and Message Passing,Files and Databases,Signals and Semaphores,Remote Procedure Calls and Local Procedure Calls,B,The text identifies Shared Memory and Message Passing as the two fundamental IPC models.
Which of the following best defines 'shared memory' in IPC?,A dedicated hardware component for direct CPU-to-CPU communication.,A temporary buffer used exclusively by the operating system kernel.,A section of memory shared by multiple processes for communication.,A network protocol for transferring large data blocks between remote servers.,A method where processes send discrete packets of information to each other.,C,Shared memory is defined as a section of memory shared by multiple processes for interprocess communication.
How do processes typically exchange information when utilizing the Shared Memory IPC model?,By making repeated system calls for each data transfer.,By sending predefined messages through a kernel intermediary.,By directly reading from and writing to the shared memory region.,By encrypting and decrypting data packets for secure exchange.,By using network interfaces for local communication.,C,"In the shared memory model, processes exchange information by directly reading from and writing to the designated shared region."
What is a key performance advantage of Shared Memory over Message Passing?,It is always slower for any data size.,It requires more kernel intervention for every access.,It is faster after setup because it requires no kernel intervention for access.,It is only faster in highly distributed systems.,Its speed is primarily limited by network bandwidth.,C,Shared Memory is faster than Message Passing after its initial setup because data access occurs directly without repeated kernel intervention.
Which statement accurately describes the role of kernel intervention in the Shared Memory IPC model for data access?,The kernel intervenes for every single read or write operation.,"Kernel intervention is typically needed only for initial setup, not for subsequent data access.",It always requires more kernel intervention than Message Passing.,Kernel intervention is completely absent in the Shared Memory model.,The kernel intervenes only when data conflicts occur.,B,"A significant feature of Shared Memory is that, after the initial setup, processes can access the shared region directly without continuous kernel intervention."
What is the primary method of communication in the Message Passing IPC model?,Direct manipulation of a common memory segment.,Exchanging information through messages sent and received between processes.,Utilizing a central database for data storage.,Sharing files via a network file system.,Establishing a direct hardware link between communicating processes.,B,Message passing involves communication via messages exchanged between processes.
For what type of data amounts is Message Passing considered most useful?,"Extremely large, continuous data streams.","Smaller data amounts, especially when avoiding conflicts.",Only encrypted data for secure transactions.,Data requiring very high throughput and low latency.,Unstructured data without specific formats.,B,Message passing is noted as useful for smaller data amounts and situations where avoiding conflicts is desirable.
In which type of system is the Message Passing IPC model generally easier to implement?,"Highly centralized, single-processor systems.",Systems with very limited memory resources.,Distributed systems.,Systems where all processes reside in the same address space.,Legacy systems with no network capabilities.,C,Message passing is explicitly stated to be easier to implement in distributed systems.
What is a characteristic of Message Passing regarding kernel intervention and speed compared to Shared Memory?,It is generally faster than shared memory due to less system call overhead.,"It typically uses system calls (kernel intervention), making it slower than shared memory.","It completely bypasses the kernel for all communication, leading to high speed.",Its speed is identical to shared memory in all scenarios.,Kernel intervention only occurs during system boot-up.,B,"Message passing typically uses system calls, involving kernel intervention, which generally makes it slower than shared memory."
"According to the provided text, what is the function of a 'browser' process?",To compile and execute programming code.,To manage all network connections and traffic.,To accept a URL and display its contents on a screen.,To handle the storage and retrieval of user data.,"To provide a secure, contained environment for other processes.",C,A browser is defined as a process that accepts input in the form of a URL and displays its contents on a screen.
What is the primary responsibility of a 'renderer' process?,To act as an add-on functionality to expand a process.,To contain logic for rendering contents onto a display.,To manage the secure environment of other processes.,To handle interprocess communication exclusively.,To translate URLs into network addresses.,B,A renderer is a process that contains logic for rendering contents (such as web pages) onto a display.
What is a 'plug-in' defined as?,A standalone operating system component.,A core security feature of a browser.,An add-on functionality that expands the primary functionality of a process.,A method for interprocess communication.,A type of shared memory segment.,C,"A plug-in is defined as an add-on functionality that expands the primary functionality of a process (e.g., a web browser plug-in)."
What does the term 'sandbox' refer to in the context provided?,A type of database used for storing system configurations.,A physical server designed for high-performance computing.,"A contained environment, such as a virtual machine.",A networking protocol for secure data transmission.,A specific type of interprocess communication mechanism.,C,"A sandbox is defined as a contained environment (e.g., a virtual machine)."
"In shared-memory systems, how do communicating processes typically establish a shared memory region?",By sending messages through a kernel pipe.,By directly accessing each other's private address space.,By agreeing upon and creating a dedicated memory segment accessible to both.,By requesting the operating system to duplicate their address spaces.,By using network sockets for inter-process communication.,C,"The text states that 'Communicating processes establish a shared memory region', implying a cooperative creation process."
Where is the shared memory region typically located initially after its creation?,In a dedicated kernel memory pool.,Within the address space of the process that created it.,"In a separate, globally accessible memory segment outside of any process's address space.",Split evenly across the address spaces of all participating processes.,In a temporary file on the disk for faster access.,B,"The text specifies, 'Region typically in address space of creator process.'"
How do other processes gain access to a shared memory region after it has been established?,They automatically inherit access upon creation.,They request a copy of the region from the creator process.,They attach the shared memory region to their own address space.,They use special system calls to bypass memory protection.,They communicate exclusively through the creator process.,C,"The text states, 'Other processes attach it to their address space.'"
What happens to operating system restrictions on memory access when processes agree to use a shared memory region?,They are temporarily increased to ensure data integrity.,They are entirely bypassed without any OS involvement.,They are removed by mutual agreement among the communicating processes.,"They are enforced by the OS, requiring explicit permissions for every access.",They are replaced by hardware-level memory protection mechanisms.,C,"The text indicates, 'OS restriction on memory access removed by agreement.'"
"When using shared memory, which of the following responsibilities fall directly on the communicating processes?",Managing the physical allocation of the shared memory region.,Enforcing operating system-level memory access permissions.,"Determining the form and location of data, and synchronizing concurrent access.",Handling the context switching between processes accessing the region.,Automatically detecting and resolving memory conflicts without explicit programming.,C,"The text states, 'Processes responsible for data form, location, and concurrent access synchronization.'"
The Producer-Consumer problem is a common paradigm used to illustrate what concept in operating systems?,Deadlock prevention.,Optimal CPU scheduling.,Cooperating processes.,Memory fragmentation.,Network security protocols.,C,The text describes the 'Producer-Consumer Problem' as a 'Common paradigm for cooperating processes.'
"In the Producer-Consumer problem, what is the primary role of the producer process?",To manage system resources.,To consume information produced by another process.,To produce information to be consumed by another process.,To synchronize access to shared resources.,To handle user input and output.,C,The text defines a Producer process as one that 'produces information' for a consumer process.
What is the main function of a consumer process in the context of the Producer-Consumer problem?,To generate new tasks for the system.,To consume information produced by a producer process.,To act as a server for network requests.,To monitor the performance of other processes.,To produce raw data for analysis.,B,The text defines a Consumer process as one that 'consumes information produced by a producer process.'
Which of the following is given as an example illustrating the Producer-Consumer problem?,An operating system kernel managing interrupts.,A web browser requesting pages from a web server.,A compiler generating code for an assembler.,A database system performing transaction logging.,A video game rendering graphics frames.,C,The text provides 'compiler (producer) -> assembler (consumer)' as an example.
What essential component is required for the interaction between producer and consumer processes in the Producer-Consumer problem?,A dedicated CPU core.,A synchronized clock.,A buffer for items.,Direct memory access (DMA) capabilities.,A network connection.,C,The text states that the Producer-Consumer problem 'Requires a buffer for items.'
What defines an 'unbounded buffer' in the context of the Producer-Consumer problem?,It has a size that grows dynamically up to a system-defined maximum.,It is a buffer with no practical limit on its memory size.,It is limited only by the available physical memory.,It is a fixed-size buffer that can hold an infinite number of items logically.,It does not require any memory allocation.,B,The text defines an 'Unbounded buffer' as having 'No practical limit on size.'
"In a system using an unbounded buffer, what is the behavior of the producer and consumer processes regarding waiting states?","The producer waits if the buffer is full, and the consumer waits if the buffer is empty.","The producer always produces, and the consumer may wait if the buffer is empty.","The consumer always consumes, and the producer may wait if the buffer is empty.",Neither the producer nor the consumer ever needs to wait.,Both the producer and consumer wait if the buffer is neither full nor empty.,B,"For an unbounded buffer, the text states: 'Consumer may wait, producer always produces.'"
How is a 'bounded buffer' characterized in the Producer-Consumer problem?,It can expand its size indefinitely based on demand.,Its size is determined by the number of active processes.,"It has a fixed, predefined size.",It can only store a single type of data item.,It is a virtual construct with no direct memory allocation.,C,The text defines a 'Bounded buffer' as having a 'Fixed size.'
What defines the waiting conditions for producer and consumer processes when using a bounded buffer?,"The producer waits if the buffer is empty, and the consumer waits if it's full.","The producer always produces, and the consumer always consumes.","The consumer waits if the buffer is empty, and the producer waits if the buffer is full.","Neither process waits, relying on constant data flow.",Both processes wait if any item is currently being processed.,C,"For a bounded buffer, the text states: 'Consumer waits if empty, producer waits if full.'"
"In a typical shared-memory implementation of a bounded buffer, which variables are commonly used?","head, tail, count","start, end, size","buffer (circular array), in (next free position), out (first full position)","producer_id, consumer_id, item_id","read_ptr, write_ptr, capacity",C,"The text explicitly lists: 'Shared variables: buffer (circular array), in (next free position), out (first full position).'"
"In a bounded buffer implementation using shared memory, what does the `in` variable typically represent?",The total number of items currently in the buffer.,The index of the first item available for consumption.,The next available free position in the buffer where a producer can add an item.,The size of the buffer.,The last item that was removed by the consumer.,C,The text states that `in` represents the 'next free position'.
"In a bounded buffer implementation using shared memory, what does the `out` variable typically represent?",The index of the next available free position in the buffer.,The total capacity of the buffer.,The index of the first full position from which a consumer can retrieve an item.,The position where the producer last added an item.,A flag indicating if the buffer is overflowed.,C,The text states that `out` represents the 'first full position'.
How is an empty bounded buffer identified in the given shared-memory implementation?,in > out,in < out,in == out,in == 0 and out == 0,((in + 1) % BUFFER_SIZE) == out,C,The text specifies: 'Buffer empty: `in == out`.'
"According to the provided text, what condition indicates that a bounded buffer is full?",in == out,in == BUFFER_SIZE - 1,out == 0 and in == BUFFER_SIZE - 1,((in + 1) % BUFFER_SIZE) == out,in + 1 == out,D,The text specifies: 'Buffer full: `((in + 1) % BUFFER_SIZE) == out`.'
"If a bounded buffer has a size of BUFFER_SIZE, what is the maximum number of items it can hold at most, as described in the implementation?",BUFFER_SIZE,BUFFER_SIZE + 1,BUFFER_SIZE - 1,BUFFER_SIZE / 2,"Any number of items, as long as in and out are distinct.",C,The text states: 'Allows `BUFFER_SIZE - 1` items at most.' This is because one slot is left empty to distinguish a full buffer from an empty one using the `in == out` and `((in + 1) % BUFFER_SIZE) == out` conditions.
"In the bounded buffer implementation, what action does the producer process take if it finds the buffer to be full?",It discards the item and continues.,It attempts to resize the buffer dynamically.,It waits until space becomes available in the buffer.,It signals an error and terminates.,It writes the item directly to disk.,C,The text describes the Producer loop as needing to 'wait if buffer full'.
What action does the consumer process take if it finds the bounded buffer to be empty?,It attempts to force the producer to create an item.,It waits until an item becomes available in the buffer.,It generates a default item to consume.,It signals an error and terminates.,It attempts to read from a backup storage.,B,The text describes the Consumer loop as needing to 'wait if buffer empty'.
What critical issue arises when multiple processes concurrently access the shared buffer in a bounded buffer implementation?,Increased memory fragmentation.,The need for robust synchronization mechanisms.,Difficulty in maintaining consistent item order.,Potential for network latency.,Unavoidable data corruption without special hardware.,B,The text explicitly states: 'Issue: Concurrent access to shared buffer requires synchronization.'
What is the primary characteristic of message passing in Interprocess Communication (IPC)?,It requires processes to share a common memory address space.,It enables processes to communicate and synchronize without shared address space.,It is exclusively used for processes on the same computer.,It relies solely on direct memory access for data transfer.,"It is primarily a mechanism for resource arbitration, not data exchange.",B,"The text states, 'Message passing: allows processes to communicate and synchronize without shared address space.'"
In which type of environment is message passing particularly useful?,Environments with strict memory sharing requirements.,Single-processor systems primarily.,Distributed environments where processes are on different computers.,Systems where real-time clock synchronization is the main concern.,Environments where all processes reside in a single address space.,C,"The text specifies, 'Useful in distributed environments (processes on different computers).'"
What are the two fundamental operations provided by message passing systems?,read() and write(),fork() and exec(),send(message) and receive(message),lock() and unlock(),open() and close(),C,"The text explicitly states, 'Provides `send(message)` and `receive(message)` operations.'"
What is the trade-off associated with implementing fixed versus variable message sizes in message passing?,Performance overhead vs. security.,Scalability vs. reliability.,Implementation complexity vs. programming ease.,Latency vs. throughput.,Memory usage vs. CPU utilization.,C,"The text notes, 'Messages can be fixed or variable size (trade-off: implementation complexity vs. programming ease).'"
What essential component must exist between communicating processes in a message-passing system?,A shared memory segment.,A common register set.,A Communication Link.,A direct interrupt line.,A global semaphore.,C,"The text states, 'Communication Link: Must exist between communicating processes.'"
Which of the following is NOT listed as a logical implementation method for message passing?,Direct or indirect communication.,Synchronous or asynchronous communication.,Manual or automatic buffering.,Automatic or explicit buffering.,None of the above (all are listed).,C,"The listed methods are 'Direct or indirect communication,' 'Synchronous or asynchronous communication,' and 'Automatic or explicit buffering.' 'Manual buffering' is not listed."
"What does ""Naming"" refer to in the context of message passing systems?",Assigning unique identifiers to messages.,How processes refer to each other.,The process of encrypting communication channels.,Defining the size of messages.,The protocol used for network discovery.,B,The text defines 'Naming: How processes refer to each other.'
"According to the provided text, what is the defining characteristic of ""direct communication"" in IPC?",Messages are sent to and received from mailboxes.,Processes communicate using a shared memory segment.,Each process explicitly names the recipient or sender of the communication.,Communication links can be associated with more than two processes.,The sender never blocks when sending a message.,C,The glossary defines 'direct communication' as 'a communication mode in which each process that wants to communicate must explicitly name the recipient or sender of the communication.'
"In direct communication, which syntax correctly represents the `send` and `receive` operations?",`send(message_data)` and `receive(buffer)`,"`send(address, message)` and `receive(port, message)`","`send(P, message)` and `receive(Q, message)`","`send(mailbox_ID, message)` and `receive(mailbox_ID, message)`",`send(data_stream)` and `receive(data_stream)`,C,"The text gives examples: '`send(P, message)`: Send to process P. `receive(Q, message)`: Receive from process Q.'"
Which of the following is a property of communication links established through direct communication?,A link may be associated with more than two processes.,Multiple links can exist between any pair of processes.,Links are established only if a mailbox is shared.,Exactly one link exists per pair of communicating processes.,"Sender names recipient, but receiver does not name sender.",D,"Properties listed for direct communication include 'exactly two processes per link, exactly one link per pair.' Option D is a direct restatement of one part of this."
"What does ""symmetry"" refer to in the context of direct communication?",The sender's and receiver's messages have the same size.,The communication link is bidirectional.,Both the sender process and the receiver process must name each other to communicate.,"Only the sender names the recipient, but the recipient does not name the sender.",The processes involved are located on the same machine.,C,The glossary defines 'symmetry' as 'a scheme in which both the sender process and the receiver process must name the other to communicate.'
"What is a characteristic of ""asymmetry"" in direct communication?",Both sender and receiver explicitly name each other.,Messages are sent to a mailbox rather than a specific process.,The `send()` operation is nonblocking.,"Only the sender names the recipient, and the receiver can receive from any process (`receive(id, message)`).",Communication is limited to a single direction.,D,"The text describes 'Asymmetry: Only sender names recipient (`receive(id, message)` from any process).' The glossary reinforces this."
What is a noted disadvantage of using direct communication for IPC?,It requires complex buffer management.,"It offers excessive modularity, leading to inefficiency.","It has limited modularity due to hard-coding identifiers, which is undesirable.",It cannot be used in distributed environments.,It inherently leads to deadlocks.,C,"The text states, 'Disadvantage: Limited modularity, hard-coding identifiers is undesirable.'"
"What is the primary mechanism for message exchange in ""indirect communication""?",Processes directly address each other.,Messages are sent and received via mailboxes or ports.,Shared memory segments are used exclusively.,Communication relies on process IDs being hard-coded.,It uses a rendezvous point for all communications.,B,"The glossary defines 'indirect communication' as 'A communication mode in which messages are sent to and received from mailboxes, or ports.'"
"In the context of indirect communication, what is a ""mailbox"" (or ""port"")?",A physical network interface card.,A process that relays messages between other processes.,An object with a unique ID for placing and removing messages.,A shared memory region for direct data access.,A kernel module that manages process scheduling.,C,"The text defines 'Mailbox: Object for placing/removing messages, unique ID.' The glossary also states: 'objects into which messages can be placed by processes and from which messages can be removed.'"
How are `send` and `receive` operations typically structured when using indirect communication?,"`send(process_ID, message)` and `receive(process_ID, message)`","`send(buffer, size)` and `receive(buffer, size)`","`send(A, message)` and `receive(A, message)`, where 'A' is a mailbox.","`send(socket, message)` and `receive(socket, message)`","`send(queue_name, message)` and `receive(queue_name, message)`",C,"The text gives examples: '`send(A, message)`: Send to mailbox A. `receive(A, message)`: Receive from mailbox A.'"
Which of the following is a property of communication links when using indirect communication?,Links are established automatically between any two processes.,Exactly one link exists per pair of communicating processes.,A link may be associated with more than two processes.,Communication is always symmetric.,Messages are always fixed size.,C,Properties listed for indirect communication include 'link may be associated with >2 processes' and 'multiple links per pair.'
"When multiple processes try to receive a single message from a mailbox in indirect communication, how might the system typically handle this?",All waiting processes receive a copy of the message.,The sender explicitly names which of the multiple receivers gets the message.,"At most one process executes `receive()` at a time, and the system arbitrarily selects a receiver (e.g., using round robin).",The message is broadcast to all potential receivers simultaneously.,"The message is discarded, and an error is returned.",C,"The text specifies: 'Handling multiple receivers for one message: At most one process executes `receive()` at a time. System arbitrarily selects receiver (e.g., round robin).'"
"What happens to a mailbox when it is owned by a process, according to the text?",It exists independently of the owner process's lifetime.,Any process can send and receive messages from it.,"It becomes part of the process's address space, and it disappears upon owner termination.",The OS provides create/send/receive/delete mechanisms for it.,It can only be used by processes on different machines.,C,"The text states: 'By process: Part of process address space. Owner receives, user sends. Disappears on owner termination.'"
What is a characteristic of a mailbox when it is owned by the operating system?,It is part of a specific process's address space.,It disappears when the creating process terminates.,"It has an independent existence, and the OS provides mechanisms for its management.",Only the owner process can receive messages from it.,It can only have two processes associated with it.,C,The text states: 'By OS: Independent existence. OS provides create/send/receive/delete mechanisms. Can have multiple receivers.'
What is the primary role of `send()` and `receive()` primitives in message passing related to synchronization?,To ensure data integrity only.,To manage CPU scheduling.,To coordinate the timing and availability of messages between processes.,To establish network connections.,To compress messages before transmission.,C,The section 'Synchronization in Message Passing' discusses how these primitives manage blocking/nonblocking behavior to coordinate timing and availability.
"What defines a ""blocking send"" operation in message passing?",The sender sends the message and immediately resumes operation.,The sender is blocked until the message is received by the receiver or mailbox.,The sender is blocked until an acknowledgment is received from the OS.,The sender only sends messages of a fixed size.,The sender checks if the receiver is busy before sending.,B,The text defines 'Blocking send: Sender blocked until message received by receiver/mailbox.'
"What defines a ""blocking receive"" operation?",The receiver retrieves a valid message or null immediately.,The receiver is blocked until a message is available.,The receiver processes messages in a batch.,The receiver sends an acknowledgment before receiving.,The receiver has a fixed buffer size.,B,The text defines 'Blocking receive: Receiver blocked until message available.'
"What is characteristic of a ""nonblocking send"" operation?",The sender waits for the receiver to confirm receipt.,The sender is blocked until a message slot becomes available in the buffer.,The sender sends the message and immediately resumes its operation.,The sender retransmits the message if no acknowledgment is received.,The sender must pre-allocate memory for the message.,C,"The text defines 'Nonblocking send: Sender sends message, resumes operation.'"
"What is characteristic of a ""nonblocking receive"" operation?",The receiver is blocked until a message arrives.,The receiver acknowledges receipt only after processing the message.,The receiver retrieves a valid message or immediately returns null if no message is available.,The receiver must explicitly poll for messages.,The receiver can only receive messages from a specific sender.,C,The text defines 'Nonblocking receive: Receiver retrieves valid message or null.'
"In the context of message passing, what is a ""rendezvous""?",A situation where a message is lost in transit.,A protocol for negotiating message sizes.,A state where both the `send()` and `receive()` operations are blocking.,An agreement on message encryption keys.,A type of buffering mechanism where no queue exists.,C,The text and glossary define 'Rendezvous: Both `send()` and `receive()` are blocking.'
"What is the purpose of ""buffering"" in message passing systems?",To encrypt messages for secure transmission.,To provide a temporary queue for messages.,To compress messages to save bandwidth.,To convert message formats between different systems.,To prioritize messages based on urgency.,B,The text defines 'Buffering: Temporary queue for messages.'
"What is true about ""zero capacity buffering""?","The queue length is infinite, and the sender never blocks.","The queue has a finite length, and the sender blocks if the queue is full.",Messages are stored permanently until retrieved.,"The queue length is 0, meaning the sender blocks until the recipient receives the message.",It is primarily used for asynchronous communication.,D,The text states: 'Zero capacity: Queue length 0. Sender blocks until recipient receives. No buffering.'
"In ""bounded capacity buffering,"" when does the sender block?",Only if the receiver is not ready.,Never; messages are always accepted.,If the temporary queue (of finite length) is full.,Until the message is acknowledged by the receiver.,Only if the message size exceeds the maximum allowed.,C,The text states: 'Bounded capacity: Finite length $n$. Sender blocks if queue full. Automatic buffering.'
"What is a characteristic of ""unbounded capacity buffering""?",The sender is always blocked until the message is received.,"The queue has a finite, fixed length.",The sender is blocked if the buffer is full.,"The queue has a potentially infinite length, and the sender never blocks.",It requires manual intervention for message clearing.,D,The text states: 'Unbounded capacity: Potentially infinite length. Sender never blocks. Automatic buffering.'
"How do the terms ""synchronous"" and ""asynchronous"" relate to blocking and nonblocking communication modes in IPC?","Synchronous refers to nonblocking, and asynchronous refers to blocking.",Both synchronous and asynchronous refer to nonblocking communication.,"Synchronous is equivalent to blocking, and asynchronous is equivalent to nonblocking.","They describe the speed of communication, not blocking behavior.","Synchronous implies message encryption, while asynchronous implies plain text.",C,The glossary defines 'synchronous' identically to 'blocking' and implies 'asynchronous' for nonblocking. The text also lists them as distinct communication modes.
What are the four IPC systems explored in the text?,"POSIX Message Queues, Windows Sockets, Mach RPC, UNIX Signals","POSIX Shared Memory, Mach Message Passing, Windows IPC, Pipes","System V Shared Memory, CORBA, DCOM, Message Queues","Local Procedure Calls, Remote Procedure Calls, Shared Files, Semaphores","POSIX Sockets, Named Pipes, Anonymous Pipes, Mach Shared Memory",B,"The 'Introduction to IPC Examples' section explicitly states that the text 'Explores four IPC systems: POSIX shared memory, Mach message passing, Windows IPC, Pipes.'"
How is POSIX Shared Memory primarily organized?,As a set of message queues,Using inter-process semaphores,Via memory-mapped files,Through direct kernel memory allocation,As a series of named pipes,C,"Under 'POSIX Shared Memory', it's stated: 'Organized using memory-mapped files.'"
Which POSIX function is used to create or open a shared-memory object and returns a file descriptor?,mmap(),ftruncate(),shm_unlink(),shm_open(),open_shm(),D,"The text states: 'shm_open(name, O_CREAT | O_RDWR, 0666): Creates/opens shared-memory object, returns file descriptor.'"
"After creating a POSIX shared-memory object, which function is used to configure its size in bytes?",mmap(),shm_open(),ftruncate(),sprintf(),set_shm_size(),C,"The text indicates: 'ftruncate(fd, size): Configures size of object in bytes.'"
Which POSIX function establishes a memory-mapped file and returns a pointer for access to the shared memory?,shm_open(),ftruncate(),mmap(),shm_unlink(),get_shm_pointer(),C,"The text states: 'mmap(): Establishes memory-mapped file, returns pointer for access.'"
What is the primary effect of using the MAP_SHARED flag when working with POSIX shared memory?,It makes the memory segment read-only for all processes.,It ensures that changes made by one process are visible only to that process.,It allows all sharing processes to see changes made to the shared memory.,It restricts access to only parent-child process relationships.,It indicates that the memory segment is private to a single process.,C,The text specifies: 'MAP_SHARED flag: Changes visible to all sharing processes.'
Which function is typically used by the consumer process to remove a POSIX shared memory segment after access?,ftruncate(),mmap(),shm_unlink(),shm_open(),close_shm(),C,The text states: 'Consumer uses shm_unlink(name) to remove segment after access.'
"When writing to a POSIX shared memory segment, what method is commonly described for placing data and managing the pointer?",Using printf() and decrementing the pointer.,Using scanf() and resetting the pointer to the start.,Using memcpy() and statically allocating space.,Using sprintf() to the pointer and incrementing the pointer by bytes written.,Using fwrite() directly to the shared memory file descriptor.,D,"The text under POSIX Shared Memory states: 'Writing: Use sprintf() to pointer, increment pointer by bytes written.'"
For what primary type of systems was Mach message passing designed?,Embedded systems,Real-time operating systems,Standalone personal computers,Distributed systems,Mainframe systems,D,"The 'Mach Message Passing' section notes: 'Designed for distributed systems (used in MacOS, iOS).'"
"In Mach message passing, communication occurs via messages sent to and received from what entities?",Sockets,Pipes,Shared memory segments,Ports,Semaphores,D,The text states: 'Communication via messages sent to/received from ports (mailboxes).'
Which statement accurately describes Mach ports?,They are of infinite size and are bidirectional.,They are of finite size and are unidirectional.,They are of infinite size and can have multiple receivers.,They are of finite size and are always bidirectional.,They are global and can be accessed by any process directly.,B,"The text describes Mach ports as: 'finite size, unidirectional.'"
"In Mach message passing, what is required for two-way communication between tasks?",A single bidirectional port.,"An additional, separate reply port.",Shared memory combined with a single port.,Two separate send ports.,A dedicated communication channel established by the kernel.,B,The text explains: 'Two-way communication needs separate reply port.'
"Concerning Mach ports, what is the rule regarding the number of receivers for a given port?",Multiple senders and multiple receivers are allowed.,Only one sender and one receiver are allowed.,Multiple senders but only one receiver are allowed.,Only one sender but multiple receivers are allowed.,The number of senders and receivers is dynamically assigned.,C,"The text states: 'Each port: multiple senders, one receiver.'"
"In Mach, who is the owner of a port and what special ability do they possess?","Any task can become the owner, and any owner can receive.","The kernel is the owner, and it manages all receive rights.","The creator of the port is the owner, and only the owner can receive.",The first task to send a message to the port becomes the owner and can receive.,There is no concept of a single owner; all tasks have equal rights.,C,"The text specifies: 'Creator of port is owner, only owner can receive. Owner can manipulate capabilities.'"
"Upon Mach task creation, which two special ports are typically created for interactions with the kernel?",Send and Receive ports,Input and Output ports,Task Self and Notify ports,Master and Slave ports,Request and Response ports,C,"The text mentions: 'Special ports on task creation: Task Self (kernel has receive rights, task sends to kernel), Notify (kernel sends notifications to task).'"
"Which Mach function is used to create a new port, allocate queue space for messages, and identify its rights?",mach_msg(),mach_port_deallocate(),mach_port_allocate(),mach_port_insert_right(),mach_port_register(),C,"The text notes: 'mach_port_allocate(): Creates new port, allocates queue space, identifies rights.'"
What is the primary purpose of a Mach bootstrap port?,To allow a task to receive notifications from the kernel.,"To provide a direct, low-latency communication channel between two specific tasks.",To enable a task to register a port it has created with a system-wide bootstrap server for lookup by other tasks.,To facilitate the transfer of large amounts of data between tasks without copying.,To manage the allocation and deallocation of port rights within a task.,C,The text states: 'Bootstrap port: Allows task to register port with system-wide bootstrap server. Other tasks can look up and obtain send rights.'
Which statement accurately describes message delivery in Mach message passing?,Messages are delivered unreliably but with high throughput.,Messages are delivered reliably and always maintain absolute ordering across all senders.,"Messages are delivered reliably, maintain same priority, and are FIFO for messages from the same sender, but without absolute ordering across different senders.",Messages are delivered on a best-effort basis and prioritize urgent messages regardless of sender.,Messages are delivered unreliably but are guaranteed to be in FIFO order across all senders.,C,"The text states: 'Messages delivered reliably, same priority. FIFO for same sender, no absolute ordering across senders.'"
A Mach message consists of which two primary fields?,A fixed-size header and a variable-sized body.,A variable-sized header and a fixed-size body.,Only a fixed-size header for metadata.,Only a variable-sized body for data.,A checksum and an acknowledgment field.,A,"The text indicates: 'Fixed-size header: metadata (size, source/destination ports). Variable-sized body: data.'"
"What is a key characteristic and benefit of Mach ""Complex"" message types?",They contain unstructured user data and are always interpreted by the kernel.,"They are used for small, simple data packets and are copied by the kernel.","They can contain pointers to memory (out-of-line data) or transfer port rights, which is useful for large data as it avoids copying.",They are encrypted for secure communication and have a fixed size.,They are only used for kernel-to-kernel communication and are not available to user tasks.,C,The text explains 'Complex' messages: 'Pointers to memory (out-of-line data) or transferring port rights. Useful for large data (avoids copying).'
Which function is the standard API used for sending and receiving messages in Mach?,send_msg(),receive_msg(),mach_msg(),port_send(),port_receive(),C,The text states: 'mach_msg(): Standard API for send/receive (MACH_SEND_MSG or MACH_RCV_MSG).'
Which of the following is NOT one of the flexible send/receive operations supported by mach_msg()?,Wait indefinitely if the queue is full.,Return immediately (do not wait).,Wait at most n milliseconds.,Automatically retransmit messages until acknowledged.,Temporarily cache a message (for server tasks).,D,"The text lists four flexible operations for mach_msg(): 'Wait indefinitely if queue full.', 'Wait at most n milliseconds.', 'Return immediately (do not wait).', 'Temporarily cache message (for server tasks, allows sending reply even if client port full).' Automatic retransmission is not mentioned."
How does Mach avoid message copying for intrasystem messages to improve performance?,By compressing message data before transmission.,By using dedicated hardware for message transfer.,By mapping the sender's address space directly into the receiver's using virtual memory techniques.,By limiting message size to fit within CPU registers.,By storing messages in a global shared memory region.,C,The text explicitly states: 'Performance: Mach avoids message copying by mapping sender's address space into receiver's (virtual memory techniques). Works for intrasystem messages.'
"A key design principle of Windows IPC, as described, is its support for what?",Monolithic kernel architecture,Single-process applications,Multiple subsystems,Direct hardware access for all applications,Legacy DOS compatibility exclusively,C,"The 'Windows IPC' section states: 'Modern design, modularity. Supports multiple subsystems.'"
What is the primary role of Advanced Local Procedure Call (ALPC) in Windows IPC?,To facilitate remote procedure calls over a network.,To provide a high-performance message-passing facility for communication between processes on the same machine.,To manage shared memory regions between unrelated processes.,To implement asynchronous I/O operations for device drivers.,To handle graphics rendering for modern applications.,B,The text defines ALPC as: 'Message-passing facility for same-machine communication. Optimized RPC.'
What are the two types of port objects used for connections in Windows ALPC?,Input and Output ports,Send and Receive ports,Connection ports and Communication ports,Public and Private ports,Server ports and Client ports,C,"The text describes ALPC ports: 'Two types: connection ports (published by server, visible) and communication ports (private, client-server pair).'"
"For messages larger than 256 bytes but not ""very large,"" how does Windows ALPC typically pass the data?",By copying the entire message via the port's message queue.,By direct memory access into the client's address space.,Through a named pipe.,Via a section object (shared memory region).,By breaking the message into smaller chunks that fit the queue.,D,Under 'ALPC Message-Passing Techniques': 'Larger messages: passed through section object (shared memory region).'
How does Windows ALPC relate to the standard Windows API for applications?,ALPC is the primary direct API for all application-level IPC.,"ALPC is not part of the Windows API; applications use standard RPC, which is indirectly handled by ALPC for same-system calls.","ALPC is an older, deprecated IPC mechanism replaced by modern Windows API functions.",ALPC is exclusively used by user applications for direct process communication.,ALPC provides high-level abstractions that wrap all other Windows IPC mechanisms.,B,"The text clarifies: 'ALPC not part of Windows API; applications use standard RPC, which is handled indirectly by ALPC for same-system calls.'"
"According to the glossary, what is a ""pipe""?",A network socket for inter-machine communication.,A hardware device for data storage.,A logical conduit allowing two processes to communicate.,A specialized memory buffer for kernel operations.,A mechanism for process synchronization.,C,The glossary defines 'pipe' as: 'A logical conduit allowing two processes to communicate.'
Ordinary pipes are inherently:,Bidirectional (full-duplex),Bidirectional (half-duplex),Unidirectional,Multidirectional,Directionality depends on the operating system,C,"The text states for Ordinary Pipes: 'Unidirectional (producer writes to write end, consumer reads from read end).'"
"In UNIX, when pipe(int fd[]) is called, which array element corresponds to the write end of the pipe?",fd[0],fd[1],fd[2],fd[-1],fd[any],B,"The text for UNIX Ordinary Pipes states: 'UNIX: pipe(int fd[]) creates pipe (fd[0] read, fd[1] write).'"
What kind of process relationship is typically required for ordinary pipes (both UNIX and Windows) to function?,Any two unrelated processes.,Processes communicating over a network.,Processes that are parent and child.,Processes belonging to the same user group.,Processes running with administrator privileges.,C,The text states for Ordinary Pipes: 'Both: Require parent-child relationship.'
Ordinary pipes are limited to communication between processes on:,The same machine only.,Different machines on the same local network.,Any two machines connected via the internet.,Machines running the same operating system.,Machines with identical hardware specifications.,A,The text specifies for Ordinary Pipes: 'Both: Require parent-child relationship. Same machine only.'
How does Windows handle the inheritance of ordinary pipe handles to child processes?,Automatically inherits all open handles by default.,Requires explicit inheritance using SECURITY_ATTRIBUTES and SetHandleInformation.,Pipes cannot be inherited by child processes in Windows.,"Inherits only the read end, not the write end.",Uses a separate kernel call InheritPipe() for this purpose.,B,"The text states for Windows Ordinary Pipes: 'Requires explicit inheritance (SECURITY_ATTRIBUTES, SetHandleInformation).'"
Which feature distinguishes named pipes (UNIX FIFOs) from ordinary pipes?,"Named pipes are always unidirectional, while ordinary pipes are bidirectional.","Named pipes require a parent-child relationship, while ordinary pipes do not.","Named pipes persist after the communicating processes terminate, while ordinary pipes do not.","Named pipes can only be used by two processes, while ordinary pipes can be used by several.","Named pipes are only available on UNIX, while ordinary pipes are only on Windows.",C,The text states for Named Pipes: 'Continue to exist after processes terminate.' This is a key distinction from ordinary pipes which are typically tied to process lifetimes.
Which statement is TRUE regarding UNIX FIFOs (named pipes)?,They are full-duplex and can communicate across machines.,"They are bidirectional but half-duplex, and are only for the same machine.",They require a parent-child relationship and are deleted upon process termination.,They are only used for signaling and cannot transfer data.,They are created with CreateNamedPipe() and connect with ConnectNamedPipe().,B,The text states: 'UNIX FIFOs: Half-duplex only. Same machine only (use sockets for intermachine).'
How are UNIX FIFOs (Named Pipes) created and how long do they persist?,"Created with pipe(), persist only while processes are active.","Created with mkfifo(), persist until explicitly deleted.","Created with CreateNamedPipe(), persist until system reboot.","Created automatically by the kernel, deleted when not in use.","Created by open() with a special flag, deleted when all processes close them.",B,"The text for UNIX FIFOs states: 'Created with mkfifo(), appear as files. ... Exist until explicitly deleted.'"
Which set of features accurately describes Windows Named Pipes?,"Unidirectional, require parent-child relationship, same machine only.","Half-duplex, appear as files, deleted explicitly.","Full-duplex, can communicate on same or different machines, byte- or message-oriented data.","Unidirectional, persist after processes terminate, accessed via mkfifo().","Half-duplex, only for signaling, not data transfer.",C,The text states: 'Windows Named Pipes: Full-duplex. Communicating processes can be on same or different machines. Byte- or message-oriented data.'
"In the context of networking and message-passing communications, what is the definition of a ""message""?",A connection point for devices to attach to computers.,A system call used to allocate shared memory.,"A communication, contained in one or more packets, that includes source and destination information to allow correct delivery.",A logical conduit allowing two processes to communicate.,A mechanism for process synchronization and resource locking.,C,"The glossary defines 'message' as: 'In networking, a communication, contained in one or more packets, that includes source and destination information to allow correct delivery. In message-passing communications, a packet of information with metadata about its sender and receiver.'"
"In the context of the Mach OS, what is a ""port""?",A communication address like an IP address.,A connection point for devices to attach to computers.,A mailbox for communication.,A function for moving code between platforms.,A shared memory region for fast data exchange.,C,"The glossary provides multiple definitions for 'port', with the specific Mach OS context being: 'In the Mach OS, a mailbox for communication.'"
"According to the glossary, what is the ""bootstrap server"" in Mach message passing?",A server responsible for loading the operating system at startup.,A client process that initiates communication with a server.,A system-wide service for registering ports.,A port that allows a task to register its created port.,A server that authenticates users before granting port access.,C,"The glossary defines 'bootstrap server' as: 'In Mach message passing, a system-wide service for registering ports.'"
"What is the definition of ""Advanced Local Procedure Call (ALPC)"" in Windows OS?",A method used for inter-machine communication.,A method for remote procedure calls between different operating systems.,A method used for communication between two processes on the same machine.,A protocol for network file sharing.,A legacy API for kernel-level debugging.,C,"The glossary defines 'advanced local procedure call (ALPC)' as: 'In Windows OS, a method used for communication between two processes on the same machine.'"
"In Windows OS, what is a ""communication port"" in the context of ALPC?","A port published by a server process, visible to clients.",A private port used to send messages between two processes.,A hardware port for network adapters.,A port used to maintain connection between two processes.,A port used exclusively by the kernel for internal communication.,B,"The glossary defines 'communication port' as: 'In Windows OS, a port used to send messages between two processes.'"
"In Windows OS, what is a ""section object""?",A type of pipe used for inter-process communication.,The data structure used to implement shared memory.,A security descriptor for process access control.,An object representing a network connection.,A kernel object used for thread synchronization.,B,The glossary defines 'section object' as: 'The Windows data structure that is used to implement shared memory.'
"What are ""anonymous pipes"" according to the glossary?",Named pipes on UNIX systems.,Ordinary pipes on Windows systems.,Pipes that can communicate across networks.,Bidirectional pipes used for server-client communication.,Pipes that do not require a parent-child relationship.,B,The glossary defines 'anonymous pipes' as: 'Ordinary pipes on Windows systems.'
Which two primary Interprocess Communication (IPC) techniques are commonly focused on in client-server systems for network communication?,Shared queues and message boards,Semaphores and mutexes,Sockets and Remote Procedure Calls (RPCs),Pipes and named pipes,File locking and memory-mapped files,C,"The text explicitly states that client-server systems focus on sockets and Remote Procedure Calls (RPCs) for communication, building upon general IPC techniques like shared memory and message passing."
What is the primary definition of a 'socket' in the context of network communication?,A physical port on a network card.,A specific software application used for data transfer.,"An endpoint for communication, typically identified by an IP address and port number.",A dedicated communication channel between two physical machines.,A protocol for establishing secure network connections.,C,The text defines a socket as 'An endpoint for communication' and states that it is 'Identified by IP address + port number'.
"In a client-server architecture, how are network communication endpoints identified for a unique connection?",By the server's IP address and a dynamically assigned client ID.,"By a unique pair of sockets, each identified by an IP address and port number.",By a MAC address and a randomly generated session key.,By the client's hostname and the server's service name.,By a global connection ID managed by a central directory service.,B,"The text states that a connection is identified by a 'unique pair of sockets (client IP:port, server IP:port)'."
Which range of port numbers is typically reserved for 'well-known ports' in network communication?,Above 65535,1024 to 49151,Below 1024,49152 to 65535,Any port number can be well-known depending on the application.,C,"The text specifies 'Well-known ports: Below 1024 (e.g., SSH 22, FTP 21, HTTP 80)'."
"When a client establishes a connection to a server, what kind of port number is typically assigned to the client?","A well-known port number below 1024, like 80.",A randomly assigned port number greater than 1024.,The same port number as the server is listening on.,"Port number 0, indicating a default assignment.",A port number determined by the server's response.,B,The text states 'Client assigned arbitrary port > 1024'.
"In Java, which class is used to implement connection-oriented (TCP) socket communication?",`DatagramSocket`,`ServerSocket`,`MulticastSocket`,`Socket`,`StreamSocket`,D,The text identifies `Socket` class for 'Connection-oriented (TCP)' communication in Java.
Which Java class is used for connectionless (UDP) socket communication?,`Socket`,`ServerSocket`,`DatagramSocket`,`MulticastSocket`,`UDPConnection`,C,The text identifies `DatagramSocket` class for 'Connectionless (UDP)' communication in Java.
What is the primary function of the `accept()` method on a `ServerSocket` in a TCP server application?,It immediately establishes a connection to a client.,It sends a confirmation message to a client.,"It blocks until a client connects, then returns a new `Socket` object for communication.",It closes the server socket after a connection is established.,It retrieves data from the connected client.,C,"For a TCP server, the text explains: 'Server creates `ServerSocket`, `accept()` blocks until client connects. `accept()` returns `Socket` for communication'."
"What does the IP address 127.0.0.1, also known as 'loopback', represent?",The default gateway for a network.,A special address used for broadcasting to all devices on a local network.,"A network interface that refers to the local host (self), allowing client/server on the same machine to communicate.",An IP address reserved for external internet connections only.,A placeholder for an unknown IP address.,C,"The text defines 'Loopback (127.0.0.1)' as referring to self, allowing client/server on same host to communicate via TCP/IP."
What is a characteristic of sockets regarding the data they transfer?,They automatically impose a structured format on all data.,They are high-level interfaces that handle data interpretation.,"They transmit an unstructured stream of bytes, requiring the application to impose data structure.","They only support text-based data transfer, not binary.","They are primarily used for control signals, not actual data payload.",C,The text states: 'Sockets are low-level: unstructured stream of bytes. Application imposes data structure'.
What do Remote Procedure Calls (RPCs) abstract for network connections?,The underlying operating system kernel.,The complexities of file system operations.,"The procedure-call mechanism, making remote calls appear local.",The process of compiling and linking code.,The user interface design for distributed applications.,C,The text defines RPCs as abstracting 'procedure-call mechanism for network connections' and states that a 'Client invokes remote procedure as if local'.
"In the context of RPCs, what is the role of a 'stub'?",It is a server-side daemon that listens for incoming RPC requests.,It is client-side code that hides the communication details of invoking a remote procedure.,It is a debugging tool used to trace RPC calls.,It is a network protocol specifically designed for RPC communication.,It is a server's database of available remote procedures.,B,The text defines 'Stub' as 'Client-side code that hides communication details'.
"What is 'parameter marshaling' in RPC, and what problem does it address?","It is the process of compressing parameters to reduce network bandwidth, addressing slow network speeds.","It is the conversion of parameters to a machine-independent format, addressing data representation differences like big-endian vs. little-endian.","It is the encryption of parameters for security, addressing eavesdropping concerns.","It is the validation of parameters against a schema, addressing data integrity issues.","It is the process of passing parameters by reference instead of by value, addressing memory efficiency.",B,"The text explains 'Parameter marshaling: Handles data representation differences (e.g., big-endian vs. little-endian)' and uses a 'machine-independent representation' like XDR."
Which of the following is an example of a machine-independent representation used for parameter marshaling in RPC?,ASCII,UTF-8,External Data Representation (XDR),JSON,XML,C,"The text specifically mentions 'Uses machine-independent representation (e.g., External Data Representation (XDR))'."
Which of the following describes the 'at most once' semantic for RPC calls?,"The OS guarantees the message is acted on exactly one time, regardless of network errors.",The server uses a timestamp and ignores messages with repeated timestamps to prevent duplicate actions.,The client retries sending the message indefinitely until an acknowledgment is received.,The RPC call will always succeed on the first attempt.,The server stores a complete log of all RPC calls and processes them sequentially.,B,"The text states for 'At most once': 'Attach timestamp to message. Server keeps history, ignores repeated timestamps'."
What is the challenge with implementing 'exactly once' semantics for RPC calls?,It requires less network bandwidth but more CPU usage.,It is conceptually simpler but prone to deadlocks.,It is easier to implement but offers weaker reliability guarantees.,It is harder to implement due to the complexities of network failures and acknowledgments.,"It is only possible in local procedure calls, not remote ones.",D,The text states: 'Exactly once: OS ensures message acted on once. Harder to implement'.
"In RPC, what is the primary purpose of 'binding'?",To encrypt the RPC messages for secure communication.,To ensure that the client knows the server's port numbers.,To convert data types between client and server architectures.,To establish a persistent connection between the client and server.,To determine the order in which RPC calls are executed.,B,The text explains: 'Binding: Client needs to know server port numbers'.
Which RPC binding mechanism offers greater flexibility by allowing clients to request port addresses from a daemon?,Predetermined binding,Static binding,Compile-time binding,Dynamic binding (Rendezvous/matchmaker),Fixed-port binding,D,The text states: 'Dynamic: Rendezvous (or matchmaker) daemon on fixed RPC port. Client requests port address from daemon. More flexible'.
What is the primary function of the 'binder' framework in Android RPC?,It provides the user interface for Android applications.,It manages external hardware connections for Android devices.,It is a framework for IPC between processes on the same Android system.,It handles network routing for Android devices.,It compiles Android application code into executable binaries.,C,The text states: 'Android RPC: IPC between processes on same system via binder framework'.
"In Android, what is an 'application component'?",A proprietary Android library.,The core executable file of an Android app.,A basic building block that provides utility to an Android app.,The XML manifest file for an Android app.,A background process that monitors system health.,C,The text defines 'Application component' as a 'Basic building block for Android app' and later in the glossary as 'a basic building block that provides utility to an Android app'.
What is a 'Service' in the context of Android application components?,A component that always has a user interface.,A component designed exclusively for displaying advertisements.,"An application component with no user interface, running in the background.",A component responsible for rendering graphics on the screen.,A database management system integrated into Android.,C,"The text defines 'Service' as 'Application component with no UI, runs in background'."
"When an Android client binds to a service using `bindService()`, what method is invoked on the service, and what can it return for RPC?",`onCreate()` which returns `null`.,`onStartCommand()` which returns an `Intent`.,`onDestroy()` which returns a `boolean`.,`onBind()` which returns a `Messenger` (for message passing) or an interface (for RPC).,`onUnbind()` which returns an `IBinder`.,D,"The text states: '`onBind()`: invoked on service, returns `Messenger` (for message passing) or interface (for RPC)'."
What is the purpose of Android Interface Definition Language (AIDL) in Android RPC?,To define the graphical user interface for Android apps.,To create the database schema for persistent storage.,To generate the stub files (client interface) for remote method calls.,To manage network permissions for Android applications.,To optimize the performance of background services.,C,The text mentions: 'Uses Android Interface Definition Language (AIDL) to create stub files (client interface)'.
Which term describes a system architecture where the most significant byte in a sequence of bytes is stored first?,Little-endian,Middle-endian,Big-endian,Mixed-endian,Byte-aligned,C,The glossary defines 'big-endian' as 'A system architecture in which the most significant byte in a sequence of bytes is stored first'.
Which term describes a system architecture where the least significant byte in a sequence of bytes is stored first?,Big-endian,Middle-endian,Little-endian,Mixed-endian,Word-aligned,C,The glossary defines 'little-endian' as 'A system architecture that stores the least significant byte first in a sequence of bytes'.
What is the primary role of the Microsoft Interface Definition Language (MIDL) in Windows RPC?,To define the network protocols used for RPC.,To write client stub code and descriptors for RPC.,To encrypt RPC messages for secure transmission.,To manage server resources for remote procedures.,To perform dynamic binding for RPC calls.,B,"The text mentions for Windows: 'Stub code from Microsoft Interface Definition Language (MIDL)' and the glossary defines MIDL as 'used, e.g., to write client stub code and descriptors for RPC'."
Which of the following accurately describes a process and how its status is represented?,"A process is a compiled program, and its status is represented by its file size.","A process is a program in execution, and its status is represented by the program counter and other registers.","A process is an operating system utility, and its status is represented by network latency.","A process is a background service, and its status is represented by CPU temperature.","A process is a user interface element, and its status is represented by screen resolution.",B,"A process is defined as a program in execution, and its current activity's status is indeed represented by the program counter and other registers."
What are the four different sections that represent the layout of a process in memory?,"Kernel, User, System, Library","Input, Output, Processing, Storage","Text, Data, Heap, Stack","CPU, RAM, Disk, Network","Compile, Link, Load, Execute",C,"The four sections representing the layout of a process in memory are text, data, heap, and stack."
"As a process executes, it changes state. Which of the following lists represents the four general states of a process mentioned in the text?","Starting, Paused, Active, Finished","Ready, Running, Waiting, Terminated","Created, Suspended, Blocked, Exited","Loading, Executing, Stalled, Completed","New, Old, Current, Future",B,"The text states that the four general states of a process are ready, running, waiting, and terminated."
What is the kernel data structure that represents a process in an operating system?,File Allocation Table (FAT),Interrupt Vector Table (IVT),Process Control Block (PCB),Memory Management Unit (MMU),Global Descriptor Table (GDT),C,A Process Control Block (PCB) is explicitly identified as the kernel data structure that represents a process in an operating system.
What is the primary role of the process scheduler in an operating system?,To allocate memory to new processes.,To manage interprocess communication channels.,To select an available process to run on a CPU.,To handle network packet routing.,To perform disk defragmentation.,C,The text states that 'The role of the process scheduler is to select an available process to run on a CPU.'
When does an operating system perform a context switch?,When a new application is installed.,When the system shuts down.,When it switches from running one process to running another.,When a user logs in or out.,When a file is saved to disk.,C,A context switch occurs 'when it switches from running one process to running another.'
"Which system calls are used to create processes on UNIX and Windows systems, respectively?",create() and make_process(),new_proc() and spawn_task(),fork() and CreateProcess(),exec() and RunProgram(),init() and SystemStart(),C,"The text clearly states that 'the fork() and CreateProcess() system calls are used to create processes on UNIX and Windows systems, respectively.'"
"How does shared memory facilitate communication between processes, and which API is mentioned as providing support for it?",Processes send encrypted packets over a network; TCP/IP provides the API.,Processes use distinct memory regions and transfer data via hard drive; NTFS provides the API.,Two or more processes share the same region of memory; POSIX provides an API.,Processes utilize CPU registers to exchange data; Assembly language provides the API.,Processes communicate through dedicated hardware ports; PCI provides the API.,C,"Shared memory involves 'two (or more) processes share the same region of memory', and 'POSIX provides an API for shared memory.'"
"Which operating system is mentioned as primarily using message passing for interprocess communication, and how does this communication method generally work?",UNIX; by sharing global variables.,Linux; by accessing common files.,Mach; by exchanging messages with one another.,Windows; by direct memory access.,Android; by calling system libraries.,C,"The Mach operating system uses message passing as its primary form of interprocess communication, and this method allows processes to communicate 'by exchanging messages with one another'."
"What is the general purpose of a pipe in interprocess communication, and what are its two main forms?",To create new processes; parent and child pipes.,To manage system resources; active and inactive pipes.,To provide a conduit for two processes to communicate; ordinary and named pipes.,To allocate memory; static and dynamic pipes.,To handle network connections; inbound and outbound pipes.,C,"A pipe 'provides a conduit for two processes to communicate,' and there are 'two forms of pipes, ordinary and named.'"
What is a key characteristic required for processes to communicate effectively using ordinary pipes?,They must reside on different machines.,They must have a parent-child relationship.,They must be written in the same programming language.,They must share the same network interface.,They must be running at the same privilege level.,B,Ordinary pipes are specifically 'designed for communication between processes that have a parent-child relationship.'
Which type of pipe is described as more general and capable of allowing several processes to communicate?,Ordinary pipes,Anonymous pipes,Unidirectional pipes,Named pipes,Client-server pipes,D,Named pipes are described as 'more general and allow several processes to communicate.'
"In UNIX systems, what system call provides ordinary pipes, and what characteristic do these pipes have regarding data flow?",socket(); they are bidirectional.,pipe(); they have a read end and a write end.,create_pipe(); they are full-duplex.,fifo(); they are circular buffers.,message_queue(); they are asynchronous.,B,"UNIX systems provide ordinary pipes through the 'pipe() system call,' and 'Ordinary pipes have a read end and a write end,' implying a specific data flow direction."
What term is used for named pipes in UNIX systems?,Conduits,Channels,Sockets,FIFOs,Connectors,D,The text states that 'Named pipes in UNIX are termed FIFOs.'
"Regarding Windows pipe types, how do anonymous pipes compare to UNIX ordinary pipes, and how do Windows named pipes compare to their UNIX counterparts?",Anonymous pipes are bidirectional like UNIX ordinary pipes; Windows named pipes are less rich than UNIX FIFOs.,"Anonymous pipes are similar to UNIX ordinary pipes (unidirectional, parent-child); Windows named pipes offer a richer form of IPC than UNIX FIFOs.",Anonymous pipes are for network communication; Windows named pipes are identical to UNIX FIFOs.,Anonymous pipes are for server communication; Windows named pipes are only for local processes.,Anonymous pipes are multi-process; Windows named pipes are for single-process use.,B,"Anonymous pipes are 'similar to UNIX ordinary pipes' (unidirectional and parent-child), and 'Named pipes offer a richer form of interprocess communication than the UNIX counterpart, FIFOs.'"
What is the primary function of sockets in client-server communication?,To create visual user interfaces.,To manage database transactions.,To allow two processes on different machines to communicate over a network.,To encrypt data before storage.,To perform arithmetic operations efficiently.,C,Sockets 'allow two processes on different machines to communicate over a network.'
What concept do Remote Procedure Calls (RPCs) abstract in the context of interprocess communication?,Memory allocation for concurrent processes.,"The concept of function (procedure) calls, allowing invocation on another process on a separate computer.",Direct hardware access for peripheral devices.,Graphical rendering for distributed applications.,File system navigation across different operating systems.,B,RPCs 'abstract the concept of function (procedure) calls in such a way that a function can be invoked on another process that may reside on a separate computer.'
"What form of interprocess communication does the Android operating system use, and what framework supports it?",Shared Memory; the Dalvik framework.,Message Passing; the Activity framework.,Pipes; the Services framework.,Remote Procedure Calls (RPCs); its binder framework.,Sockets; the Network framework.,D,The Android operating system 'uses RPCs as a form of interprocess communication using its binder framework.'
