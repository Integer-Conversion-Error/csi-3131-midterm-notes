Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following statements accurately describes the fundamental nature of processes regarding their execution and lifecycle?,Processes are static entities that must be predefined before system startup and cannot be deleted.,"Processes can only execute sequentially, one after another, and are created at fixed intervals.","Processes can execute concurrently, and are created and deleted dynamically by the operating system.",Processes are created only by the operating system kernel and cannot be terminated by user applications.,Processes exist only as long as the parent process is active and cannot operate independently.,C,The text states that 'Processes can execute concurrently; created and deleted dynamically.' and 'OS provides mechanisms for process creation and termination.'
"When a parent process creates child processes, what is the typical hierarchical structure formed?","A linear chain of processes, where each child can only have one parent and one child.","A circular queue, where processes are linked in a continuous loop.","A flat structure, where all processes are independent and have no direct relation.","A tree structure, where parent processes create child processes.","A network graph, with arbitrary connections between any two processes.",D,"The text explicitly states that a parent process creates child processes, forming a 'tree'."
What is a 'process identifier (pid)'?,A network address used for inter-process communication.,A unique value for each process in the system that can be used as an index to access various attributes of a process within the kernel.,A security token used to grant or deny access to system resources.,A memory address pointing to the start of the process's code segment.,A descriptive name assigned by the user to identify a process.,B,The glossary defines 'process identifier (pid)' as 'A unique value for each process in the system that can be used as an index to access various attributes of a process within the kernel.'
Which of the following is NOT an 'execution possibility' for a parent process after creating a child process?,The parent executes concurrently with its children.,The parent waits until all children terminate.,"The parent immediately terminates upon child creation, transferring control to the child.",The parent creates a child and then continues its own execution path.,The parent creates multiple children and manages their lifecycle.,C,The text lists two execution possibilities: 'Parent executes concurrently with children' and 'Parent waits until children terminate.' The option C is not listed as a possibility for the parent's execution behavior.
"In the context of process creation, what are the two 'address-space possibilities' for a child process?","Child has a smaller address space than the parent, or a larger one.","Child's address space is allocated on a different physical memory region, or the same one.","Child is a duplicate of the parent (same program/data), or the child has a new program loaded.","Child's address space is shared with other children, or it is entirely private.","Child's address space is read-only, or it is read-write.",C,The text states the 'Address-space possibilities' are: 'Child is a duplicate of parent (same program/data)' and 'Child has a new program loaded.'
"In UNIX/Linux, what is the primary function of the `fork()` system call during process creation?",To replace the current process's memory space with a new program.,To create a new process that is a copy of the parent's address space.,To terminate the calling process and return an exit status.,To allow the parent process to wait for the termination of a child process.,To load a specified program into the child's address space directly at creation.,B,The text states that `fork()` 'creates new process (child) as copy of parent's address space.'
"After a successful `fork()` call in UNIX/Linux, what are the return values for the child and parent processes, respectively?","Parent gets 0, child gets child's pid.",Both parent and child get 0.,"Child gets 0, parent gets child's pid.",Both parent and child get the same positive integer.,"Parent gets -1, child gets 0.",C,"The text specifies: '`fork()` return: 0 for child, child's pid for parent.'"
What is the purpose of the `exec()` system call in UNIX/Linux after a `fork()` call?,It creates a new process that is a duplicate of the calling process.,It allows the parent process to wait for the child's termination.,It replaces the process's memory space with a new program.,It returns the process ID of the calling process.,It deallocates all resources held by the calling process.,C,The text states `exec()` 'replaces process's memory space with new program (loads binary).'
Which of the following attributes does a child process typically inherit from its parent in UNIX/Linux?,"Only the program code, not data.",Only the process ID (pid).,"Privileges, scheduling attributes, and open files.",The parent's current execution point and register state.,None; all attributes are reset for the child.,C,"The text lists that the 'Child inherits privileges, scheduling attributes, open files.'"
"In Windows, which function is primarily used to create a new process and directly load a specified program into its address space?",fork(),exec(),CreateProcess(),WaitForSingleObject(),TerminateProcess(),C,"The text states '`CreateProcess()`: similar to `fork()`, but loads specified program into child's address space at creation.'"
What happens when a process uses `exit()` to terminate itself?,It pauses indefinitely until another process explicitly resumes it.,It returns a status value to a waiting parent process and its resources are deallocated.,"It is immediately put into a 'suspended' state, retaining all its resources.",It signals the OS to create a duplicate of itself before terminating.,"It automatically becomes an orphan process, even if its parent is still running.",B,"The text explains, 'Process finishes, uses `exit()` to ask OS to delete it. Returns status value to waiting parent (via `wait()`). All process resources deallocated.'"
Which of the following is a valid reason for a parent process to terminate its child process?,The child process requested a change in its process ID.,The child process successfully completed its assigned task.,The child process exceeded its allocated resource usage.,The parent process wishes to share more resources with the child.,The child process initiated a new network connection.,C,The text lists 'Child exceeded resource usage' as a reason for a parent terminating a child.
What is 'cascading termination'?,A process's ability to terminate multiple unrelated processes concurrently.,A mechanism where a child process can terminate its parent process.,"A technique in which, when a process is ended, all of its children are ended as well.",The termination of a process due to an unhandled error or exception.,The process of a parent passing its exit status to its children upon termination.,C,"The glossary defines 'cascading termination' as 'A technique in which, when a process is ended, all of its children are ended as well.' The main text also notes it is 'OS initiated'."
"In UNIX/Linux, what defines a 'zombie process'?",A process that is still executing but is unresponsive to user input.,A child process whose parent terminated without calling `wait()`.,A process that has terminated but whose parent has not yet called `wait()` to collect its state and accounting information.,A process that is waiting for an I/O operation to complete indefinitely.,A process that has been suspended by the operating system due to low memory.,C,The glossary defines 'zombie' as 'A process that has terminated but whose parent has not yet called wait() to collect its state and accounting information.'
"In UNIX/Linux, what defines an 'orphan process'?",A process that has terminated due to a critical error.,A process that runs in the background without a controlling terminal.,A child of a parent process that terminates in a system that does not require a terminating parent to cause its children to be terminated.,A process that has been explicitly detached from its parent by the `disown` command.,"A process that consumes excessive resources, thus becoming isolated.",C,The glossary defines 'orphan' as 'The child of a parent process that terminates in a system that does not require a terminating parent to cause its children to be terminated.'
"In UNIX/Linux, what role does the `init` (or `systemd`) process play concerning orphan processes?",It immediately terminates all orphan processes to free up resources.,It sends a signal to orphan processes to restart them under a new parent.,It becomes the new parent for orphan processes and periodically calls `wait()` to clean them up.,It changes the process ID of orphan processes to a random value.,It places orphan processes into a special queue for manual user intervention.,C,"The text states '`init` (or `systemd`) becomes new parent for orphans, periodically calls `wait()` to clean up.'"
Which of the following Android process types is considered the 'most important' and least likely to be terminated by the OS for resource reclamation?,Empty process,Background process,Service process,Visible process,Foreground process,E,"The Android process hierarchy section lists Foreground process as 'Visible, user interacting (most important)' and states 'Android terminates processes from least to most important'."
"In the Android process hierarchy, which process type is defined as 'not directly visible, but performing activity foreground process refers to'?",Foreground process,Visible process,Service process,Background process,Empty process,B,"The text defines 'Visible process' as 'Not directly visible, but performing activity foreground process refers to.'"
"When Android terminates processes to reclaim resources, in what order does it typically terminate them?",From most important to least important.,From processes with the largest memory footprint to the smallest.,From least important to most important.,"Randomly, to ensure fairness among applications.",Only processes that have been idle for a long time are terminated.,C,"The text states, 'Android terminates processes from least to most important to reclaim resources.'"
