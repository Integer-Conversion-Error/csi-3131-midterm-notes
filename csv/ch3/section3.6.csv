Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary characteristic of message passing in Interprocess Communication (IPC)?,It requires processes to share a common memory address space.,It enables processes to communicate and synchronize without shared address space.,It is exclusively used for processes on the same computer.,It relies solely on direct memory access for data transfer.,"It is primarily a mechanism for resource arbitration, not data exchange.",B,"The text states, 'Message passing: allows processes to communicate and synchronize without shared address space.'"
In which type of environment is message passing particularly useful?,Environments with strict memory sharing requirements.,Single-processor systems primarily.,Distributed environments where processes are on different computers.,Systems where real-time clock synchronization is the main concern.,Environments where all processes reside in a single address space.,C,"The text specifies, 'Useful in distributed environments (processes on different computers).'"
What are the two fundamental operations provided by message passing systems?,read() and write(),fork() and exec(),send(message) and receive(message),lock() and unlock(),open() and close(),C,"The text explicitly states, 'Provides `send(message)` and `receive(message)` operations.'"
What is the trade-off associated with implementing fixed versus variable message sizes in message passing?,Performance overhead vs. security.,Scalability vs. reliability.,Implementation complexity vs. programming ease.,Latency vs. throughput.,Memory usage vs. CPU utilization.,C,"The text notes, 'Messages can be fixed or variable size (trade-off: implementation complexity vs. programming ease).'"
What essential component must exist between communicating processes in a message-passing system?,A shared memory segment.,A common register set.,A Communication Link.,A direct interrupt line.,A global semaphore.,C,"The text states, 'Communication Link: Must exist between communicating processes.'"
Which of the following is NOT listed as a logical implementation method for message passing?,Direct or indirect communication.,Synchronous or asynchronous communication.,Manual or automatic buffering.,Automatic or explicit buffering.,None of the above (all are listed).,C,"The listed methods are 'Direct or indirect communication,' 'Synchronous or asynchronous communication,' and 'Automatic or explicit buffering.' 'Manual buffering' is not listed."
"What does ""Naming"" refer to in the context of message passing systems?",Assigning unique identifiers to messages.,How processes refer to each other.,The process of encrypting communication channels.,Defining the size of messages.,The protocol used for network discovery.,B,The text defines 'Naming: How processes refer to each other.'
"According to the provided text, what is the defining characteristic of ""direct communication"" in IPC?",Messages are sent to and received from mailboxes.,Processes communicate using a shared memory segment.,Each process explicitly names the recipient or sender of the communication.,Communication links can be associated with more than two processes.,The sender never blocks when sending a message.,C,The glossary defines 'direct communication' as 'a communication mode in which each process that wants to communicate must explicitly name the recipient or sender of the communication.'
"In direct communication, which syntax correctly represents the `send` and `receive` operations?",`send(message_data)` and `receive(buffer)`,"`send(address, message)` and `receive(port, message)`","`send(P, message)` and `receive(Q, message)`","`send(mailbox_ID, message)` and `receive(mailbox_ID, message)`",`send(data_stream)` and `receive(data_stream)`,C,"The text gives examples: '`send(P, message)`: Send to process P. `receive(Q, message)`: Receive from process Q.'"
Which of the following is a property of communication links established through direct communication?,A link may be associated with more than two processes.,Multiple links can exist between any pair of processes.,Links are established only if a mailbox is shared.,Exactly one link exists per pair of communicating processes.,"Sender names recipient, but receiver does not name sender.",D,"Properties listed for direct communication include 'exactly two processes per link, exactly one link per pair.' Option D is a direct restatement of one part of this."
"What does ""symmetry"" refer to in the context of direct communication?",The sender's and receiver's messages have the same size.,The communication link is bidirectional.,Both the sender process and the receiver process must name each other to communicate.,"Only the sender names the recipient, but the recipient does not name the sender.",The processes involved are located on the same machine.,C,The glossary defines 'symmetry' as 'a scheme in which both the sender process and the receiver process must name the other to communicate.'
"What is a characteristic of ""asymmetry"" in direct communication?",Both sender and receiver explicitly name each other.,Messages are sent to a mailbox rather than a specific process.,The `send()` operation is nonblocking.,"Only the sender names the recipient, and the receiver can receive from any process (`receive(id, message)`).",Communication is limited to a single direction.,D,"The text describes 'Asymmetry: Only sender names recipient (`receive(id, message)` from any process).' The glossary reinforces this."
What is a noted disadvantage of using direct communication for IPC?,It requires complex buffer management.,"It offers excessive modularity, leading to inefficiency.","It has limited modularity due to hard-coding identifiers, which is undesirable.",It cannot be used in distributed environments.,It inherently leads to deadlocks.,C,"The text states, 'Disadvantage: Limited modularity, hard-coding identifiers is undesirable.'"
"What is the primary mechanism for message exchange in ""indirect communication""?",Processes directly address each other.,Messages are sent and received via mailboxes or ports.,Shared memory segments are used exclusively.,Communication relies on process IDs being hard-coded.,It uses a rendezvous point for all communications.,B,"The glossary defines 'indirect communication' as 'A communication mode in which messages are sent to and received from mailboxes, or ports.'"
"In the context of indirect communication, what is a ""mailbox"" (or ""port"")?",A physical network interface card.,A process that relays messages between other processes.,An object with a unique ID for placing and removing messages.,A shared memory region for direct data access.,A kernel module that manages process scheduling.,C,"The text defines 'Mailbox: Object for placing/removing messages, unique ID.' The glossary also states: 'objects into which messages can be placed by processes and from which messages can be removed.'"
How are `send` and `receive` operations typically structured when using indirect communication?,"`send(process_ID, message)` and `receive(process_ID, message)`","`send(buffer, size)` and `receive(buffer, size)`","`send(A, message)` and `receive(A, message)`, where 'A' is a mailbox.","`send(socket, message)` and `receive(socket, message)`","`send(queue_name, message)` and `receive(queue_name, message)`",C,"The text gives examples: '`send(A, message)`: Send to mailbox A. `receive(A, message)`: Receive from mailbox A.'"
Which of the following is a property of communication links when using indirect communication?,Links are established automatically between any two processes.,Exactly one link exists per pair of communicating processes.,A link may be associated with more than two processes.,Communication is always symmetric.,Messages are always fixed size.,C,Properties listed for indirect communication include 'link may be associated with >2 processes' and 'multiple links per pair.'
"When multiple processes try to receive a single message from a mailbox in indirect communication, how might the system typically handle this?",All waiting processes receive a copy of the message.,The sender explicitly names which of the multiple receivers gets the message.,"At most one process executes `receive()` at a time, and the system arbitrarily selects a receiver (e.g., using round robin).",The message is broadcast to all potential receivers simultaneously.,"The message is discarded, and an error is returned.",C,"The text specifies: 'Handling multiple receivers for one message: At most one process executes `receive()` at a time. System arbitrarily selects receiver (e.g., round robin).'"
"What happens to a mailbox when it is owned by a process, according to the text?",It exists independently of the owner process's lifetime.,Any process can send and receive messages from it.,"It becomes part of the process's address space, and it disappears upon owner termination.",The OS provides create/send/receive/delete mechanisms for it.,It can only be used by processes on different machines.,C,"The text states: 'By process: Part of process address space. Owner receives, user sends. Disappears on owner termination.'"
What is a characteristic of a mailbox when it is owned by the operating system?,It is part of a specific process's address space.,It disappears when the creating process terminates.,"It has an independent existence, and the OS provides mechanisms for its management.",Only the owner process can receive messages from it.,It can only have two processes associated with it.,C,The text states: 'By OS: Independent existence. OS provides create/send/receive/delete mechanisms. Can have multiple receivers.'
What is the primary role of `send()` and `receive()` primitives in message passing related to synchronization?,To ensure data integrity only.,To manage CPU scheduling.,To coordinate the timing and availability of messages between processes.,To establish network connections.,To compress messages before transmission.,C,The section 'Synchronization in Message Passing' discusses how these primitives manage blocking/nonblocking behavior to coordinate timing and availability.
"What defines a ""blocking send"" operation in message passing?",The sender sends the message and immediately resumes operation.,The sender is blocked until the message is received by the receiver or mailbox.,The sender is blocked until an acknowledgment is received from the OS.,The sender only sends messages of a fixed size.,The sender checks if the receiver is busy before sending.,B,The text defines 'Blocking send: Sender blocked until message received by receiver/mailbox.'
"What defines a ""blocking receive"" operation?",The receiver retrieves a valid message or null immediately.,The receiver is blocked until a message is available.,The receiver processes messages in a batch.,The receiver sends an acknowledgment before receiving.,The receiver has a fixed buffer size.,B,The text defines 'Blocking receive: Receiver blocked until message available.'
"What is characteristic of a ""nonblocking send"" operation?",The sender waits for the receiver to confirm receipt.,The sender is blocked until a message slot becomes available in the buffer.,The sender sends the message and immediately resumes its operation.,The sender retransmits the message if no acknowledgment is received.,The sender must pre-allocate memory for the message.,C,"The text defines 'Nonblocking send: Sender sends message, resumes operation.'"
"What is characteristic of a ""nonblocking receive"" operation?",The receiver is blocked until a message arrives.,The receiver acknowledges receipt only after processing the message.,The receiver retrieves a valid message or immediately returns null if no message is available.,The receiver must explicitly poll for messages.,The receiver can only receive messages from a specific sender.,C,The text defines 'Nonblocking receive: Receiver retrieves valid message or null.'
"In the context of message passing, what is a ""rendezvous""?",A situation where a message is lost in transit.,A protocol for negotiating message sizes.,A state where both the `send()` and `receive()` operations are blocking.,An agreement on message encryption keys.,A type of buffering mechanism where no queue exists.,C,The text and glossary define 'Rendezvous: Both `send()` and `receive()` are blocking.'
"What is the purpose of ""buffering"" in message passing systems?",To encrypt messages for secure transmission.,To provide a temporary queue for messages.,To compress messages to save bandwidth.,To convert message formats between different systems.,To prioritize messages based on urgency.,B,The text defines 'Buffering: Temporary queue for messages.'
"What is true about ""zero capacity buffering""?","The queue length is infinite, and the sender never blocks.","The queue has a finite length, and the sender blocks if the queue is full.",Messages are stored permanently until retrieved.,"The queue length is 0, meaning the sender blocks until the recipient receives the message.",It is primarily used for asynchronous communication.,D,The text states: 'Zero capacity: Queue length 0. Sender blocks until recipient receives. No buffering.'
"In ""bounded capacity buffering,"" when does the sender block?",Only if the receiver is not ready.,Never; messages are always accepted.,If the temporary queue (of finite length) is full.,Until the message is acknowledged by the receiver.,Only if the message size exceeds the maximum allowed.,C,The text states: 'Bounded capacity: Finite length $n$. Sender blocks if queue full. Automatic buffering.'
"What is a characteristic of ""unbounded capacity buffering""?",The sender is always blocked until the message is received.,"The queue has a finite, fixed length.",The sender is blocked if the buffer is full.,"The queue has a potentially infinite length, and the sender never blocks.",It requires manual intervention for message clearing.,D,The text states: 'Unbounded capacity: Potentially infinite length. Sender never blocks. Automatic buffering.'
"How do the terms ""synchronous"" and ""asynchronous"" relate to blocking and nonblocking communication modes in IPC?","Synchronous refers to nonblocking, and asynchronous refers to blocking.",Both synchronous and asynchronous refer to nonblocking communication.,"Synchronous is equivalent to blocking, and asynchronous is equivalent to nonblocking.","They describe the speed of communication, not blocking behavior.","Synchronous implies message encryption, while asynchronous implies plain text.",C,The glossary defines 'synchronous' identically to 'blocking' and implies 'asynchronous' for nonblocking. The text also lists them as distinct communication modes.
