Which of the following components are typically *exclusive* to a specific thread within a process and are not shared with other threads of the same process?,Code section and data section,Operating system resources like open files and signals,"Thread ID, program counter (PC), register set, and stack",Shared memory segments,The entire address space of the process,C,"A thread comprises a thread ID, program counter (PC), register set, and stack, which are unique to that thread's execution context. Threads share the code section, data section, and OS resources with other threads of the same process."
"According to the text, which of the following is NOT shared among threads belonging to the same process?",Code section,Data section,"Operating system resources (e.g., open files)",The program counter (PC),Signals,D,"Threads share the code section, data section, and OS resources (like open files and signals) with other threads of the same process. The program counter (PC) is part of a thread's unique context, along with its thread ID, register set, and stack."
What is the primary characteristic that distinguishes a traditional process from a multithreaded process?,A traditional process can only run on a single-core system.,"A multithreaded process has a single thread of control, while a traditional process has multiple.","A traditional process has a single thread of control, allowing it to perform only one task at a time, whereas a multithreaded process can perform multiple tasks concurrently.","Multithreaded processes do not require OS support, unlike traditional processes.",Traditional processes are more efficient in resource sharing than multithreaded processes.,C,"The text states, 'A traditional process has a single thread of control; a multithreaded process can perform multiple tasks concurrently.'"
Why is identifying opportunities for parallelism using threads considered crucial for modern multicore systems?,It simplifies the operating system kernel's design.,It ensures that applications are always single-threaded.,It allows applications to effectively leverage the multiple processing cores available for concurrent execution.,It reduces the need for context switching.,It limits the number of tasks a process can perform.,C,"The text explicitly states that 'Identifying opportunities for parallelism using threads is crucial for modern multicore systems,' implying that this is how applications can utilize multiple cores."
Which statement best describes the current trend in modern software applications?,Most modern software applications are single-threaded to simplify development.,Modern applications primarily use process-creation methods for concurrent tasks.,"The majority of modern software applications, such as web browsers and word processors, are multithreaded.",Modern applications avoid multithreading due to its complexity and resource overhead.,"Multithreading is only beneficial for small, specialized utility programs.",C,"The text states that 'Most modern software applications are multithreaded (e.g., web browsers, word processors, image thumbnail generators).'"
"In the context of a busy web server handling thousands of concurrent client requests, what is the primary disadvantage of using a single-threaded server model?",It consumes too many system resources for each client.,It cannot handle any client requests at all.,"It services only one client at a time, leading to long wait times for other clients.",It requires complex inter-process communication mechanisms.,It is less secure than multithreaded models.,C,"A single-threaded server 'services one client at a time, leading to long wait times,' as mentioned in the Web Server Example."
What is a significant drawback of a web server adopting a process-creation method (creating a separate process for each request) compared to a multithreaded approach?,It limits the server to handling only a single client at a time.,It results in less isolation between client requests.,It is generally more efficient for resource sharing.,It is time-consuming and resource-intensive due to the overhead of creating and managing processes.,It prevents the server from leveraging multicore systems effectively.,D,"The text states that the process-creation method is 'time-consuming, resource-intensive,' which makes it less efficient than a multithreaded server."
"Which of the following is listed as a benefit of multithreading that allows an application to remain responsive to the user, even when a part of it is performing a lengthy operation?",Resource Sharing,Economy,Scalability,Responsiveness,Inter-process communication,D,"The 'Responsiveness' benefit specifically states it 'Allows an application to continue running even if part is blocked or performing a lengthy operation,' which 'Increases responsiveness to the user.'"
"How do threads achieve resource sharing, and why is it considered more efficient than traditional Inter-Process Communication (IPC) methods like shared memory or message passing?","Threads require explicit IPC mechanisms, making them more complex.","Threads share memory and resources of their parent process by default, avoiding the overhead of explicit IPC.","Threads only share CPU time, not memory or other resources.",IPC is inherently faster than shared memory.,Resource sharing is not a benefit of multithreading.,B,"The 'Resource Sharing' benefit notes that 'Threads share memory and resources of their parent process by default,' which makes it 'More efficient than inter-process communication (shared memory, message passing).'"
What makes multithreading more 'Economical' compared to managing multiple processes?,Threads are unable to utilize multiple CPU cores.,"It is more economical to create and context-switch threads than processes, consuming less time and memory.",Multithreading eliminates the need for any form of memory management.,Multithreading requires significantly more system memory per task.,Process creation is always faster than thread creation.,B,The 'Economy' benefit states that it is 'More economical to create and context-switch threads than processes' and that 'Thread creation consumes less time and memory than process creation.'
"Which benefit of multithreading is primarily observed in multiprocessor architectures, where it allows different parts of a program to execute simultaneously on different processing cores?",Responsiveness,Resource Sharing,Economy,Scalability,Security,D,"The 'Scalability' benefit highlights 'Greater benefits in multiprocessor architectures, where threads can run in parallel on different processing cores.'"
"According to the text, what is a 'single-threaded' process or program?",A program that can only run on multi-core systems.,A process that has only one thread of control and executes on only one core at a time.,A process that is designed for parallel execution across multiple cores.,A program that shares its CPU utilization unit with other programs.,A process that manages multiple tasks concurrently.,B,The glossary defines 'single-threaded' as 'A process or program that has only one thread of control (and so executes on only one core at a time).'
A 'multithreaded' process or program is characterized by:,"Having a single thread of control, limiting it to one core.",Being unable to share resources with other processes.,"Having multiple threads of control, allowing multiple simultaneous execution points.","Exclusive execution on a single processor, regardless of available cores.",Being less efficient in terms of context switching than single-threaded processes.,C,"The glossary defines 'multithreaded' as 'A term describing a process or program with multiple threads of control, allowing multiple simultaneous execution points.'"
"Which of the following describes a thread as a basic unit of CPU utilization, encompassing its unique components and shared resources?","It is an entire process, including its own separate memory space for all resources.","It comprises a thread ID, a program counter (PC), a register set, and a stack, and shares its code section, data section, and OS resources with other threads of the same process.",It is an independent program that never shares any resources with other threads.,It is a light-weight process that can only execute one instruction at a time.,It is a hardware component responsible for managing CPU cores.,B,"The text and glossary comprehensively define a thread: 'A basic unit of CPU utilization; it comprises a thread ID, a program counter (PC), a register set, and a stack. It shares with other threads belonging to the same process its code section, data section, and other operating-system resources, such as open files and signals.'"
Which of the following is an example of an operating system component mentioned as being multithreaded?,User interface applications like web browsers.,Image thumbnail generators.,Linux kernel threads like `kthreadd` for device and memory management.,Traditional single-threaded processes.,Dedicated database servers running single-threaded operations.,C,"The text states, 'Most OS kernels are multithreaded (e.g., Linux kernel threads like `kthreadd` for device management, memory management, interrupt handling).'"
"What defines a ""multicore"" system in modern computing?",A system where multiple independent computers are networked together.,A single processing chip containing multiple computing cores that appear as separate CPUs.,A system with a single CPU that uses hyper-threading to run multiple logical threads.,A server farm with many distinct physical machines.,A system primarily designed for distributed computing across a wide area network.,B,"The text defines multicore systems as ""multiple computing cores on a single processing chip, appearing as separate CPUs to the operating system."""
What is a primary benefit of employing multithreaded programming in modern systems?,It simplifies the debugging process for parallel applications.,It reduces the need for complex operating system scheduling algorithms.,It enables more efficient utilization of multiple computing cores and improves concurrency.,It guarantees that all parts of an application will run purely in parallel.,It eliminates all data dependencies between tasks.,C,"The text states, ""Multithreaded programming enables more efficient use of these multiple computing cores and improves concurrency."""
"Which statement best describes a ""concurrent system""?",A system capable of performing multiple tasks simultaneously.,A system where tasks execute strictly one after another without any overlap.,"A system that supports more than one task by allowing all tasks to make progress, possibly through interleaving execution.",A system where all tasks must operate on different data sets.,A system exclusively found in multicore environments.,C,"The text defines a concurrent system as one that ""supports more than one task by allowing all tasks to make progress (e.g., interleaving execution on a single-core system)."""
"What is the defining characteristic of a ""parallel system""?","It only allows tasks to run sequentially, one after another.",It can perform more than one task simultaneously.,It primarily focuses on reducing memory usage for multiple tasks.,It necessitates all tasks to be independent of each other.,It is only achievable on single-core processors with hyper-threading.,B,"The text states that a parallel system ""Can perform more than one task simultaneously (e.g., assigning separate threads to each core on a multicore system)."""
"Regarding concurrency and parallelism, which statement is true?",Parallelism is always a prerequisite for concurrency.,Concurrency is impossible without a multicore system.,It is possible to achieve concurrency without true parallelism.,Concurrent systems inherently perform tasks simultaneously.,Parallelism implies only one task can make progress at a time.,C,"The text explicitly states, ""It is possible to have concurrency without parallelism."""
"One of the key programming challenges for multicore systems is ""Identifying tasks."" What does this challenge primarily involve?",Distributing the data accessed by tasks across separate cores.,Ensuring that parallel tasks perform equal work of equal value.,Examining data for dependencies between tasks to ensure synchronized execution.,"Finding areas in applications that can be divided into separate, concurrent, and ideally independent tasks.",Developing new operating system scheduling algorithms.,D,"The challenge of 'Identifying tasks' involves 'Finding areas in applications that can be divided into separate, concurrent, and ideally independent tasks.'"
"The ""Balance"" challenge in multicore programming refers to:",Balancing the workload between the CPU and GPU.,Ensuring that parallel tasks perform equal work of equal value to justify the use of separate execution cores.,Distributing data evenly across all available memory modules.,Balancing the number of threads with the number of processes.,Balancing the input/output operations with computational tasks.,B,The 'Balance' challenge is defined as 'Ensuring that parallel tasks perform equal work of equal value to justify the use of separate execution cores.'
"What is the main concern addressed by the ""Data splitting"" challenge in multicore programming?",Optimizing network bandwidth for data transfer.,Dividing the data accessed and manipulated by tasks to run on separate cores.,"Splitting a single large task into multiple smaller, independent tasks.",Separating application code from user data.,Ensuring that data is always processed sequentially.,B,The 'Data splitting' challenge involves 'Dividing the data accessed and manipulated by tasks to run on separate cores.'
"Why is ""Data dependency"" considered a key challenge in programming for multicore systems?",It restricts the ability to split data across multiple cores.,It makes identifying tasks much harder.,It requires examining data for dependencies between tasks and ensuring synchronized execution to accommodate these dependencies.,It complicates the process of balancing work among cores.,It is the primary cause of deadlocks in parallel programs.,C,The 'Data dependency' challenge necessitates 'Examining data for dependencies between tasks and ensuring synchronized execution to accommodate these dependencies.'
"Why is ""Testing and debugging"" particularly difficult for parallel programs on multicore systems?",They require specialized hardware not commonly available.,They always produce non-deterministic results.,"They have many possible execution paths, making comprehensive testing challenging.",The programming languages used for them are inherently more complex.,There are no adequate debugging tools available for multithreaded applications.,C,Testing and debugging is 'More difficult due to many possible execution paths in parallel programs.'
What is the primary purpose of Amdahl's Law?,To measure the power consumption of multicore processors.,To predict the optimal number of cores for any given application.,To identify potential performance gains from adding additional computing cores.,To calculate the maximum memory an application can use.,To determine the most efficient scheduling algorithm for parallel tasks.,C,Amdahl's Law is a formula that 'identifies potential performance gains from adding additional computing cores.'
"According to Amdahl's Law, what is the effect of the serial portion of an application on performance gains from adding computing cores?",The serial portion has no significant impact if enough cores are added.,The serial portion can disproportionately affect the performance gained.,"The serial portion primarily affects memory utilization, not speedup.","The smaller the serial portion, the less speedup is possible.",The serial portion only becomes relevant when N (number of cores) is very small.,B,"The text states, ""The serial portion of an application can disproportionately affect the performance gained by adding computing cores."""
"As the number of processing cores (N) approaches infinity, what does the speedup predicted by Amdahl's Law converge to?",Infinity,1,"1/S, where S is the serial portion",1-S,0,C,"The text states, ""As N approaches infinity, the speedup converges to 1/S."""
"An application is 75% parallel and 25% serial (S=0.25). According to Amdahl's Law, approximately what speedup can be expected on a 2-core system (N=2)?",1.2 times,1.6 times,2.0 times,2.28 times,4.0 times,B,Using the formula: speedup ≤ 1 / (S + (1 - S)/N) = 1 / (0.25 + (1 - 0.25)/2) = 1 / (0.25 + 0.75/2) = 1 / (0.25 + 0.375) = 1 / 0.625 = 1.6 times.
"Which characteristic best describes ""data parallelism""?","Distributes different tasks to different cores, with each task performing a unique operation.",Focuses on distributing subsets of the same data across multiple computing cores and performing the same operation on each core.,Primarily used for managing data dependencies between unrelated tasks.,A method to convert serial portions of an application into parallel ones.,A technique to balance the workload between CPU and GPU.,B,Data parallelism 'Focuses on distributing subsets of the same data across multiple computing cores. Performs the same operation on each core.'
An application divides a large array into four subsets and assigns each subset to a separate thread. Each thread then calculates the sum of elements within its assigned subset. This is an example of what type of parallelism?,Task parallelism,Instruction-level parallelism,Data parallelism,Concurrency without parallelism,Distributed parallelism,C,This scenario matches the example given for data parallelism: 'Summing elements of an array by dividing the array into subsets for different threads.'
"What is a defining feature of ""task parallelism""?",It requires all threads to operate on identical data sets.,"It distributes subsets of the same data across multiple cores, performing the same operation.","It distributes tasks (threads) across multiple computing cores, with each thread performing a unique operation.",It eliminates the need for data synchronization.,It is primarily concerned with reducing the serial portion of an application.,C,Task parallelism 'Distributes tasks (threads) across multiple computing cores. Each thread performs a unique operation.'
"Consider an application where one thread calculates the mean of an array, while another thread simultaneously calculates the standard deviation of the same array. This scenario is an example of:",Data parallelism,Implicit parallelism,Hybrid parallelism,Task parallelism,Control parallelism,D,This example aligns with task parallelism: 'Two threads performing unique statistical operations on the same array.'
Are data parallelism and task parallelism mutually exclusive?,"Yes, an application must choose one or the other exclusively.","No, they are often used interchangeably to refer to the same concept.","Yes, they operate on different hardware architectures.","No, applications may use a hybrid approach combining both.","Yes, one is for single-core systems and the other for multicore.",D,"The text states, 'Data and task parallelism are not mutually exclusive; applications may use a hybrid approach.'"
Which type of threads are supported above the kernel and managed without kernel support?,Kernel threads,Operating system threads,Hardware threads,User threads,System threads,D,"User threads are defined as being supported above the kernel and managed without kernel support, typically by a thread library in user space."
Which type of threads are supported and managed directly by the operating system?,Application threads,User threads,Kernel threads,Library threads,Process threads,C,Kernel threads are explicitly stated to be supported and managed directly by the operating system.
Which of the following contemporary operating systems are mentioned as supporting kernel threads?,Solaris and early Java,MS-DOS and Windows 95,"Windows, Linux, and macOS",Unix and BSD,Android and iOS,C,"The text explicitly states that 'Most contemporary operating systems (Windows, Linux, macOS) support kernel threads.'"
"In the Many-to-One multithreading model, how are user-level threads mapped to kernel threads?",Each user-level thread maps to a separate kernel thread.,Many user-level threads map to a smaller or equal number of kernel threads.,Many user-level threads map to one kernel thread.,One user-level thread maps to many kernel threads.,User-level threads are managed directly by hardware.,C,The Many-to-One model is defined as mapping many user-level threads to one kernel thread.
What is an advantage of the Many-to-One multithreading model regarding thread management?,It allows multiple threads to run in parallel on multicore systems.,"Thread management is done by the kernel, providing robust security.",It prevents the entire process from blocking on system calls.,"Thread management is done by the thread library in user space, making it efficient.",It dynamically adjusts the number of kernel threads based on application load.,D,"The text states that in the Many-to-One model, 'Thread management is done by the thread library in user space, making it efficient.'"
What is a significant drawback of the Many-to-One multithreading model concerning blocking system calls?,"Only the calling thread blocks, allowing others to continue.",The kernel automatically creates a new thread to handle the block.,The entire process blocks if a user thread makes a blocking system call.,Blocking system calls are not supported in this model.,It requires manual intervention to unblock the process.,C,A key drawback mentioned is that 'The entire process blocks if a user thread makes a blocking system call.'
Why is the Many-to-One model inefficient on multicore systems?,"It creates too many kernel threads, overwhelming the system.",It requires frequent context switching between user and kernel space.,Multiple user threads cannot run in parallel because only one kernel thread can access the kernel at a time.,"User threads are not preemptive, leading to starvation.",It lacks support for shared memory regions.,C,Another drawback highlighted is that 'Multiple user threads cannot run in parallel on multicore systems because only one kernel thread can access the kernel at a time.'
Which of the following is an example implementation of the Many-to-One multithreading model?,Windows XP,Linux distributions,"Green threads (Solaris, early Java)",macOS Ventura,Android OS,C,"The text provides 'Green threads (Solaris, early Java)' as an example of the Many-to-One model."
What is the primary reason the Many-to-One model is rarely used now?,It is too complex to implement.,It requires specialized hardware.,It is unable to leverage multicore systems.,It has severe security vulnerabilities.,It consumes excessive memory.,C,The text states it is 'Rarely used now due to inability to leverage multicore systems.'
How does the One-to-One multithreading model map user threads to kernel threads?,One user thread maps to many kernel threads.,Many user threads map to one kernel thread.,Each user thread maps to a kernel thread.,User threads are directly managed by hardware.,Kernel threads are mapped to multiple user threads.,C,The One-to-One model is defined as mapping 'each user thread to a kernel thread.'
Which advantage does the One-to-One model offer over the Many-to-One model concerning blocking system calls?,It completely eliminates the need for blocking system calls.,It allows a new process to be spawned when a thread blocks.,Another thread can run when a thread makes a blocking system call.,"Blocking calls are handled in user space, avoiding kernel intervention.",It queues all blocking calls until the original thread finishes.,C,An advantage of the One-to-One model is that 'Another thread can run when a thread makes a blocking system call.'
How does the One-to-One model facilitate parallel execution on multiprocessors?,It forces all threads to run on a single core sequentially.,It allows multiple threads to run in parallel on multiprocessors.,It dedicates a separate processor for each user thread.,It virtualizes processors to simulate parallelism.,It uses a single kernel thread to manage all parallel execution.,B,A key advantage of the One-to-One model is that it 'Allows multiple threads to run in parallel on multiprocessors.'
What is a major drawback of the One-to-One multithreading model?,It prevents the use of kernel-level scheduling.,"Creating a user thread requires creating a corresponding kernel thread, which can burden system performance.",It does not support blocking system calls.,It is less concurrent than the Many-to-One model.,It is exclusively used for single-core systems.,B,"The text states the drawback: 'Creating a user thread requires creating a corresponding kernel thread, which can burden system performance if too many kernel threads are created.'"
Which operating systems are mentioned as implementations of the One-to-One model?,Solaris and early Java,Green threads and macOS,Linux and Windows,FreeBSD and NetBSD,MS-DOS and Unix,C,"The text indicates that 'Linux, Windows operating systems' are implementations of the One-to-One model."
How does the Many-to-Many multithreading model map user-level threads to kernel threads?,It maps many user-level threads to a larger number of kernel threads.,It maps one user-level thread to one kernel thread.,It maps many user-level threads to a smaller or equal number of kernel threads.,It maps a fixed number of user-level threads to a fixed number of kernel threads.,It bypasses kernel threads entirely.,C,The Many-to-Many model is defined as multiplexing 'many user-level threads to a smaller or equal number of kernel threads.'
"In the Many-to-Many model, how is the number of kernel threads determined?",It is always fixed at one per processor core.,It is always equal to the number of user threads.,It is always determined by the operating system globally.,It can be specific to the application or machine.,It is decided solely by the hardware architecture.,D,"The text notes that 'The number of kernel threads can be specific to the application or machine (e.g., more kernel threads on a system with more cores).'"
What is an advantage of the Many-to-Many model for developers?,It eliminates the need for explicit thread creation.,Developers can create as many user threads as needed.,It enforces a strict limit on the number of user threads.,It ensures that all user threads are bound to a single kernel thread.,It simplifies debugging by reducing concurrency.,B,An advantage listed is that 'Developers can create as many user threads as needed.'
Which characteristic allows the Many-to-Many model to effectively utilize multiprocessors?,It maps all user threads to a single core.,Corresponding kernel threads can run in parallel on a multiprocessor.,It requires manual thread affinity settings.,It only supports sequential execution.,It relies on a single master kernel thread.,B,A stated advantage is that 'Corresponding kernel threads can run in parallel on a multiprocessor.'
How does the Many-to-Many model handle a thread performing a blocking system call?,The entire process blocks until the call completes.,The kernel suspends all other user threads.,The kernel can schedule another thread.,It automatically converts the blocking call to a non-blocking one.,It terminates the blocking thread and restarts it later.,C,"An advantage is that 'When a thread performs a blocking system call, the kernel can schedule another thread.'"
What is the defining feature of the Two-level model?,It maps two user-level threads to one kernel thread.,It is a variation of the Many-to-Many model that also allows a user-level thread to be bound to a kernel thread.,It provides two separate user-level thread libraries.,It uses two different types of kernel threads.,It requires two levels of hardware support for multithreading.,B,"The Two-level model is described as 'A variation where many user-level threads are multiplexed to a smaller or equal number of kernel threads, but also allows a user-level thread to be bound to a kernel thread.'"
What is a practical challenge associated with the Many-to-Many model?,It is rarely used in contemporary systems.,It is difficult to implement in practice.,"It requires a single, dedicated core for execution.",It cannot handle blocking system calls efficiently.,It offers less concurrency than the One-to-One model.,B,The text states that the Many-to-Many model is 'Difficult to implement in practice.'
"Why is the Many-to-Many model less common now, despite its advantages?",It has been replaced by more efficient single-threaded models.,Limiting kernel threads is less important with increasing core counts.,Its drawbacks outweigh its benefits in modern systems.,Contemporary concurrency libraries no longer support it.,It introduces excessive overhead for simple applications.,B,"The text explains it's 'Less common now as limiting kernel threads is less important with increasing core counts, but some contemporary concurrency libraries still use this model.'"
What is the primary function of a thread library?,To provide an API for managing process memory allocation.,To define the operating system's kernel architecture.,To offer an API for creating and managing threads.,To facilitate inter-process communication exclusively.,To compile source code into executable binaries.,C,"A thread library provides an API (Application Programming Interface) specifically for creating and managing threads, as stated in the text."
Which of the following best describes a user-space thread library?,It requires direct kernel support for all function calls.,Its function calls typically result in system calls to the kernel.,"It is implemented entirely in user space, with function calls being local rather than system calls.",It is exclusively used by operating systems like Windows.,It manages threads by mapping each user thread to a separate kernel thread.,C,"A user-space library is implemented entirely in user space, and its function calls are local, meaning they do not directly involve the kernel through system calls."
In which implementation approach do function calls typically result in system calls to the kernel?,User-space library,Kernel-level library,Hybrid threading model,Asynchronous threading,Java Virtual Machine (JVM) threads,B,"A kernel-level library is supported directly by the operating system, and its function calls typically result in system calls to the kernel for thread management."
Which of the following is NOT listed as a main thread library in the provided text?,POSIX Pthreads,Windows thread library,Java thread API,OpenMP,All of the above are listed.,D,"The text explicitly lists POSIX Pthreads, Windows, and Java as the main thread libraries. OpenMP is not mentioned."
How is the Java thread API typically implemented in relation to the host operating system?,It is an entirely user-space library independent of the host OS.,It always implements its own kernel-level thread management.,"It is implemented using the host system's thread library (e.g., Windows API on Windows, Pthreads on UNIX/Linux/macOS).","It runs threads only within the browser environment, separate from the OS.","It uses a proprietary, custom thread scheduler for all platforms.",C,"The Java thread API is implemented using the host system's thread library, such as the Windows API on Windows or Pthreads on UNIX/Linux/macOS systems."
"Regarding data sharing, how do POSIX Pthreads and Windows threads generally handle global data compared to Java threads?",All three explicitly arrange shared data access.,"POSIX and Windows do not share global data, while Java does.","POSIX and Windows automatically share global data, while Java requires explicit arrangement.","Java has global data similar to C/C++, while POSIX/Windows do not.",None of the above.,C,"POSIX and Windows share global data (declared outside functions) among all threads in the same process, whereas Java has no equivalent of global data and requires shared data access to be explicitly arranged."
"Which threading strategy describes a parent thread creating a child thread and then resuming execution independently, with little data sharing?",Synchronous threading,Parallel threading,Asynchronous threading,Cooperative threading,Detached threading,C,"Asynchronous threading involves the parent creating a child and resuming execution independently, leading to concurrent and independent execution with little data sharing. This is commonly used in multithreaded servers and responsive UIs."
"In synchronous threading, what is a characteristic behavior of the parent thread after creating child threads?","It immediately terminates, leaving child threads to run independently.","It resumes execution concurrently with the child threads, with no waiting.",It waits for all child threads to terminate before it resumes its own execution.,It delegates its remaining tasks to the child threads and then idles.,It only communicates with one child thread at a time.,C,"Synchronous threading is defined as the parent thread creating one or more child threads and waiting for them to terminate before it resumes. This strategy typically involves significant data sharing, such as the parent combining results from children."
What is Pthreads?,A specific implementation of a user-space thread library for macOS.,"The POSIX standard defining an API for thread creation and synchronization, which is a specification, not an implementation.",A proprietary thread library developed by Microsoft for Windows systems.,A Java framework for managing thread pools and asynchronous tasks.,A debugging tool for multi-threaded C++ applications.,B,"Pthreads is the POSIX standard (IEEE 1003.1c) defining an API for thread creation and synchronization. It is a specification, not an implementation itself."
Which header file is typically included in a C program that uses Pthreads?,windows.h,java.util.concurrent,pthread.h,threadlib.h,sys/thread.h,C,The text explicitly states that a basic Pthreads C program example includes 'pthread.h'.
"In Pthreads, which function is used by the parent thread to wait for a child thread to terminate?",pthread_create(),pthread_exit(),pthread_join(),pthread_terminate(),pthread_wait(),C,"The text states that the parent waits for the child thread to terminate using 'pthread_join(tid, NULL)'."
What is the typical method for a child thread to terminate its execution in Pthreads?,Returning from the runner function.,Calling `pthread_terminate()`.,Calling `pthread_exit(0)`.,By the parent thread calling `pthread_cancel()`.,Automatically when its stack is unwound.,C,The text indicates that the child thread terminates by calling 'pthread_exit(0)'.
Which header file is typically included when working with Windows threads?,pthread.h,windows.h,java.lang.Thread,unistd.h,sys/types.h,B,The text states that 'windows.h' is included when working with Windows threads.
"In Windows threads, which function is used to create a new thread?",CreateProcess(),pthread_create(),CreateThread(),new Thread(),StartThread(),C,"The 'CreateThread()' function is used for thread creation in Windows threads, as stated in the text."
How does a parent thread in Windows typically wait for a single child thread to complete its execution?,By calling `WaitForMultipleObjects()`.,By calling `pthread_join()`.,By calling `Sleep()` with a long duration.,"By calling `WaitForSingleObject(ThreadHandle, INFINITE)`.",Windows threads do not support parent-child waiting.,D,"To wait for a single thread in Windows, the function 'WaitForSingleObject(ThreadHandle, INFINITE)' is used."
What is the fundamental model of program execution in Java?,Process-based parallelism.,Single-threaded sequential execution.,The use of 'main()' method exclusively.,"Threads, with every Java program having at least one thread.",Distributed computing via network sockets.,D,"Threads are the fundamental model of program execution in Java, and every Java program has at least one thread (the 'main()' method)."
Which of the following is considered the more common technique for explicit thread creation in Java?,Creating a class derived from `Thread` and overriding its `start()` method.,Defining a class that implements the `Runnable` interface.,Using the `java.util.concurrent.Executor` framework directly without `Runnable`.,Calling `Thread.create()` with a lambda expression.,Extending the `Object` class and implementing a `run()` method.,B,The text states that defining a class that implements the `Runnable` interface is the more common technique for explicit thread creation in Java.
"When creating and executing a Java thread, what method is invoked on the `Thread` object to start the new thread's execution, rather than calling its `run()` method directly?",execute(),init(),run(),start(),go(),D,"After creating a `Thread` object, the `start()` method must be invoked. This allocates memory and initializes a new thread in the JVM, which then calls the `run()` method. Calling `run()` directly executes it in the current thread."
Which Java method is used to wait for the completion of a thread?,wait(),terminate(),join(),yield(),sleep(),C,"The `join()` method is used in Java to wait for thread completion, and it can throw an `InterruptedException`."
What is a key benefit of the Java Executor Framework (`java.util.concurrent`)?,It strictly enforces single-threaded execution.,It provides direct access to kernel-level thread management.,It separates thread creation from execution and offers greater control over thread management.,It compiles Java code into native machine code for faster thread execution.,It automatically converts synchronous tasks into asynchronous ones.,C,"The Java Executor Framework provides greater control over thread creation and communication, separating thread creation from execution, and offering benefits like returning results."
"How can a Java thread return a result from its execution, given that the `run()` method cannot return a value directly?",By declaring shared global data.,By using the `Thread.getReturnValue()` method.,By implementing the `Callable` interface and retrieving results as `Future` objects.,Results can only be returned through asynchronous callbacks.,By extending the `Thread` class and overriding the `returnResult()` method.,C,"The `Callable` interface, similar to `Runnable`, allows returning a result, which is then retrieved as a `Future` object using its `get()` method. The `run()` method of `Runnable` cannot return a result directly."
"Which term is synonymous with 'Lambda expressions' in the context of Java, according to the glossary?",Closure,Synchronous threading,Future object,Thread identifier,API,A,"The glossary defines 'closure' as a construct to provide a simple syntax for parallel applications, also known as Lambda expressions in Java."
What is the primary goal of 'implicit threading'?,To allow application developers full manual control over thread creation and management for maximum optimization.,To eliminate the need for any form of synchronization mechanisms in multithreaded applications.,To transfer the responsibility of thread creation and management from application developers to compilers and run-time libraries.,To ensure that all tasks always run on a single thread to avoid concurrency issues.,To strictly enforce a one-to-one mapping model between tasks and threads.,C,Implicit threading is a strategy that addresses the complexity of multithreaded application design by transferring thread creation and management from application developers to compilers and run-time libraries.
"In the context of implicit threading, what is the primary role of application developers?","To meticulously manage thread lifecycles, including creation, synchronization, and termination.",To identify tasks or functions within the application that can be executed in parallel.,To directly implement the many-to-many model for mapping user-level threads to kernel threads.,To write custom run-time libraries for thread scheduling.,To debug deadlocks and race conditions that arise from explicit thread management.,B,"With implicit threading, developers focus on identifying tasks (functions) that can run in parallel, while libraries handle the details of thread creation and management."
Which of the following is NOT a problem associated with creating a new thread for every request in a system like a web server?,Significant time and overhead involved in creating and discarding threads for each request.,The potential for an unbounded number of concurrent threads to exhaust system resources like CPU and memory.,Increased complexity in separating task definition from thread creation mechanics.,Difficulty in limiting the number of concurrently executing threads.,The inability to service requests immediately with existing threads.,C,"The text states that thread pools (which solve the 'new thread per request' problem) allow for separation of task definition from thread creation mechanics, implying this is a *benefit* of thread pools, not a problem with creating a new thread per request. The other options are listed problems."
What is a 'thread pool'?,A collection of tasks waiting to be assigned to newly created threads.,A mechanism for terminating threads immediately after their work is done to free up resources.,"A number of threads created at process startup and placed in a pool, waiting for work.",A system where each incoming request always creates a brand new thread.,A specific type of data structure used for inter-thread communication.,C,"A thread pool involves creating a number of threads at startup and placing them into a pool, where they wait for work."
Which of the following describes how a thread pool typically handles a new request if no thread is immediately available?,It creates a new thread on demand to service the request.,It immediately rejects the request.,The task is placed into a queue to await an available thread.,"It terminates an existing, busy thread to free up resources.",It sends the request to another server.,C,"If no thread is available, the task is queued until a thread becomes free to service it."
One of the key benefits of using a thread pool is that it 'limits the number of concurrent threads'. What specific problem does this address?,Ensuring faster request servicing by avoiding thread creation overhead.,Allowing for flexible scheduling options like delayed or periodic execution.,Preventing the exhaustion of system resources such as CPU and memory.,Separating the definition of a task from the mechanics of thread creation.,Simplifying the debugging of synchronization issues and deadlocks.,C,"Limiting the number of concurrent threads directly prevents the exhaustion of system resources (CPU, memory), which is a common problem with creating an unbounded number of threads."
"In the Windows Thread Pool API, which function is used to submit a function to be executed by a thread from the pool?",CreateThread(),SubmitTaskToPool(),QueueUserWorkItem(),ThreadPoolExecute(),DispatchThreadFunction(),C,The Windows Thread Pool API uses functions like `QueueUserWorkItem()` to submit a function for execution by a thread from the pool.
Which Java thread pool architecture provided by `java.util.concurrent` creates an unbounded pool that reuses threads as needed?,`newSingleThreadExecutor()`,`newFixedThreadPool(int size)`,`newScheduledThreadPool()`,`newCachedThreadPool()`,`newVirtualThreadExecutor()`,D,"The `newCachedThreadPool()` method creates an unbounded pool that reuses threads, as stated in the text."
What is the primary characteristic of the 'fork-join' model?,It creates an unbounded number of threads asynchronously without waiting for their completion.,A parent thread creates child threads and waits for them to terminate and join to combine results.,Threads are created once at startup and placed in a pool for future tasks.,It involves a single thread performing all computations sequentially.,Tasks are submitted to a queue and processed by a fixed number of threads independently.,B,The fork-join model is a synchronous threading strategy where a parent thread creates (forks) child threads and waits for them to terminate and join with it to combine results.
The Java Fork-Join Library (Java 1.7+) is specifically designed for which type of algorithms?,Algorithms requiring strict sequential execution.,Recursive divide-and-conquer algorithms.,Network communication protocols.,Algorithms that primarily involve I/O operations.,Algorithms that run entirely on a single thread.,B,"The Java Fork-Join Library is designed for recursive divide-and-conquer algorithms, such as Quicksort and Mergesort."
"In the Java Fork-Join Library, which method is used by a parent task to block until a child task completes and returns its result?",`compute()`,`execute()`,`fork()`,`join()`,`shutdown()`,D,The `join()` method blocks until a task completes and returns its result in the Java Fork-Join Library.
What is 'Work Stealing' in the context of the Java Fork-Join Library?,A mechanism where threads can take tasks from another thread's queue if their own queue is empty to balance workload.,A method for securely sharing data between threads without race conditions.,A process by which a parent thread assigns specific tasks to child threads.,A way to prioritize certain tasks over others based on their importance.,A technique for dynamically adjusting the number of threads in the `ForkJoinPool`.,A,"Work Stealing is a mechanism where if a thread's queue is empty, it can 'steal' a task from another thread's queue to balance workload."
OpenMP is a set of compiler directives and an API primarily used for parallel programming in which type of environment?,"Distributed memory environments (e.g., clusters).",GPU-accelerated computing environments.,Shared-memory environments.,Single-threaded embedded systems.,Network-based client-server architectures.,C,OpenMP supports parallel programming specifically in shared-memory environments.
What does OpenMP identify as 'parallel regions'?,Specific memory locations that can be accessed concurrently by multiple threads.,Blocks of code that may run in parallel.,External libraries that provide parallel algorithms.,Sections of an application's data that must be kept private to each thread.,User interfaces designed for concurrent user interaction.,B,OpenMP identifies 'parallel regions' as blocks of code that may run in parallel.
"When OpenMP encounters a directive like `#pragma omp parallel`, what action does it typically take regarding threads?",It terminates all existing threads before executing the region sequentially.,It creates a single new thread to execute the region.,"It creates as many threads as there are processing cores, and all threads execute the region simultaneously.",It pauses all other threads until the region completes.,"It queues the region to be executed by a single, pre-existing thread from a pool.",C,"When `#pragma omp parallel` is encountered, OpenMP creates as many threads as there are processing cores in the system, and all threads execute the parallel region simultaneously."
Grand Central Dispatch (GCD) was developed by which company and for which operating systems?,Microsoft for Windows and Xbox.,Google for Android and ChromeOS.,Apple for macOS and iOS.,IBM for AIX and Linux.,Oracle for Java and Solaris.,C,Grand Central Dispatch (GCD) was developed by Apple for macOS and iOS.
"In GCD, what is the purpose of a 'dispatch queue'?",To store shared data that multiple threads can access.,To synchronize access to critical sections of code.,"To schedule tasks by placing them on the queue, from which available threads remove them for execution.",To manage the creation and destruction of new threads for each task.,To perform load balancing across different CPU cores.,C,GCD schedules tasks by placing them on a dispatch queue. Tasks are assigned to available threads from a managed pool.
Which type of Grand Central Dispatch queue ensures that tasks are removed in FIFO order and that one task completes before the next is removed?,Concurrent queue,Global dispatch queue,Main queue,Serial queue,Background queue,D,"Serial queues remove tasks in FIFO order, and one task completes before the next is removed. The main queue is a type of serial queue, but 'serial queue' is the general category."
"What is the highest quality-of-service (QOS) class for system-wide concurrent queues in Grand Central Dispatch, typically used for user interface and event handling?",QOS_CLASS_BACKGROUND,QOS_CLASS_UTILITY,QOS_CLASS_USER_INITIATED,QOS_CLASS_USER_INTERACTIVE,QOS_CLASS_DEFAULT,D,"QOS_CLASS_USER_INTERACTIVE is for user interface and event handling, requiring a small amount of work for a responsive UI, making it the highest priority interactive class."
"In C, C++, or Objective-C, what is the term for a self-contained unit of work used to submit tasks to Grand Central Dispatch queues?",Method,Function pointer,Block,Closure,Delegate,C,"For C, C++, Objective-C, a 'block' (specified by `^{}`) is used as a self-contained unit of work for GCD."
Intel Threading Building Blocks (TBB) is characterized as a template library for designing parallel applications in which programming language?,Java,Python,C++,FORTRAN,C#,C,Intel Threading Building Blocks (TBB) is a template library for designing parallel C++ applications.
Which statement accurately describes a key advantage or feature of Intel Threading Building Blocks (TBB)?,It requires specific compiler extensions and language modifications.,"It is primarily designed for distributed memory systems, not shared memory.","It provides load balancing and is cache-aware, prioritizing tasks with data in cache.",Developers must manually manage thread creation and destruction.,It only supports sequential execution of tasks for simplicity.,C,"TBB provides load balancing and is cache-aware, prioritizing tasks with data in cache. It requires no special compiler or language support and its task scheduler maps tasks to threads, relieving developers of manual thread management."
"In the context of Intel TBB's `parallel_for` loop, what does the `range` parameter define?",The specific thread that will execute the loop.,The number of iterations to skip.,"The iteration space, or the range of elements that will be iterated.",The type of data to be processed.,The maximum execution time for the loop.,C,"In `parallel_for (range, body)`, `range` defines the iteration space, which is the range of elements that will be iterated."
How do the semantics of `fork()` and `exec()` change in multithreaded programs compared to single-threaded ones?,They remain identical.,"Only `fork()` semantics change, `exec()` remains the same.","Only `exec()` semantics change, `fork()` remains the same.",Both `fork()` and `exec()` semantics change.,`fork()` is not available in multithreaded contexts.,D,"The text explicitly states, ""The semantics of `fork()` and `exec()` change in multithreaded programs."""
"When a multithreaded program forks and immediately calls `exec()`, which version of `fork()` is typically more appropriate in UNIX systems?",The version that duplicates all threads in the new process.,The version that duplicates only the calling thread in the new process.,"Neither version is appropriate, as `exec()` should not be used after `fork()` in multithreaded programs.","The choice is irrelevant, as `exec()` replaces the process entirely anyway.","A new, specialized `fork_exec()` system call is used.",B,"The text states, ""If `exec()` is called immediately after forking, duplicating only the calling thread is appropriate."" This is because `exec()` will replace the entire process, making the duplication of other threads redundant."
"In a multithreaded UNIX program, if the new process created by `fork()` does NOT call `exec()`, what is the appropriate behavior for `fork()`?",It should duplicate only the calling thread to minimize overhead.,It should duplicate all threads in the new process.,"The `fork()` call will fail, as this scenario is not supported.",The behavior is undefined and depends on the specific UNIX system implementation.,The parent process's threads are destroyed upon forking.,B,"The text specifies, ""If the new process does not call `exec()`, duplicating all threads is appropriate."""
What happens when a thread invokes `exec()` in a multithreaded program?,Only the invoking thread is replaced by the new program.,The new program runs as a new thread within the existing process.,"The specified program replaces the entire process, including all threads.",`exec()` is blocked until all other threads in the process terminate.,"A new process is created, and the original process continues to run.",C,"The text clearly states, ""If a thread invokes `exec()`, the specified program replaces the entire process, including all threads."""
"In UNIX systems, what is the primary purpose of a signal?",To indicate that a process has completed execution.,To notify a process of an event.,To request a process to allocate more memory.,To synchronize access to shared resources between processes.,To initiate the creation of a new thread within a process.,B,"The glossary defines ""signal"" as ""In UNIX and other operating systems, a means used to notify a process that an event has occurred."""
Which sequence correctly describes the pattern of signal handling in UNIX systems?,Handled → Generated → Delivered,Delivered → Generated → Handled,Generated → Delivered → Handled,Generated → Handled → Delivered,Handled → Delivered → Generated,C,"The text outlines the ""Signal Pattern"" as ""Generated → Delivered → Handled."""
Which statement accurately describes synchronous signals?,They are generated by events external to the running process and typically sent to another process.,They are generated by an event within the running process and delivered to the same process that caused the signal.,They are primarily used for inter-process communication between unrelated processes.,They are always handled by a default signal handler and cannot be overridden.,They are specific to Windows operating systems and emulated by APCs.,B,"The text states, ""Synchronous Signals: Generated by an event within the running process (e.g., illegal memory access, division by zero); delivered to the same process that caused the signal."""
What distinguishes an asynchronous signal from a synchronous signal?,"Asynchronous signals are always delivered to a user-defined signal handler, while synchronous signals are not.","Asynchronous signals are generated by an event within the running process, whereas synchronous signals are external.","Asynchronous signals are generated by an event external to the running process, while synchronous signals originate internally.","Asynchronous signals are handled immediately, while synchronous signals are deferred.",Asynchronous signals can only be sent to the process that generated them.,C,"The text notes, ""Asynchronous Signals: Generated by an event external to the running process (e.g., <control><C>, timer expiration); typically sent to another process."" This contrasts with synchronous signals which are internal."
What is a default signal handler?,A signal handler defined by the user to override kernel actions.,A kernel-provided handler for each signal.,A handler that only processes asynchronous signals.,A function invoked when a thread is canceled.,A mechanism for thread-local storage.,B,"The glossary defines ""default signal handler"" as ""The signal handler that receives signals unless a user-defined signal handler is provided by a process."" The main text also says ""Kernel-provided handler for each signal."""
What is the primary role of a user-defined signal handler?,To generate new signals within a process.,To replace the entire process when a signal is received.,To override the default action for handling a signal.,To block the delivery of all signals to a process.,To deliver signals to specific threads in a multithreaded program.,C,"The glossary defines ""user-defined signal handler"" as ""The signal handler created by a process to provide non-default signal handling."" The main text says ""Overrides the default action to handle the signal."""
Which of the following is NOT a valid option for signal delivery in a multithreaded program?,Deliver to the thread to which the signal applies.,Deliver to every thread in the process.,Deliver to certain threads in the process.,Assign a specific thread to receive all signals for the process.,Signals are automatically converted to thread-local storage.,E,The text lists four valid options for signal delivery in multithreaded programs. Option E is not mentioned and represents a different concept entirely.
Which UNIX function is used to deliver a signal to a specified Pthread (POSIX thread)?,"`kill(pid_t pid, int signal)`","`signal(int signum, handler_t handler)`","`pthread_kill(pthread_t tid, int signal)`","`send_signal_to_thread(int signal, int thread_id)`",`raise(int signal)`,C,"The text explicitly lists `pthread_kill(pthread_t tid, int signal)` as the function for delivering a signal to a specified Pthread."
"How does Windows emulate UNIX-like signals, given that it does not explicitly support them?",By converting all signals into inter-process communication messages.,By using a kernel-level signal daemon that manages all signal events.,By blocking all signal-generating events from user applications.,By using asynchronous procedure calls (APCs) delivered to a particular thread.,Windows processes automatically terminate upon receiving any event that would trigger a signal in UNIX.,D,"The text states, ""Windows does not explicitly support signals but emulates them using Asynchronous Procedure Calls (APCs). An APC is delivered to a particular thread."""
"What does ""thread cancellation"" refer to?",The process of preventing a thread from being created.,The termination of a target thread before it has completed its task.,The ability of a thread to pause its own execution indefinitely.,The mechanism by which a thread communicates with another process.,The act of removing a thread from the CPU's ready queue.,B,"The glossary defines ""thread cancellation"" as ""Termination of a thread before it has completed."""
What is the primary difference between asynchronous cancellation and deferred cancellation?,"Asynchronous cancellation allows the target thread to clean up resources, while deferred cancellation does not.","Asynchronous cancellation immediately terminates the target thread, while deferred cancellation allows the target thread to periodically check for termination requests.","Asynchronous cancellation is supported by Pthreads, while deferred cancellation is unique to Java.","Asynchronous cancellation is safer for shared data, while deferred cancellation is not recommended.",There is no functional difference; they are just different naming conventions.,B,"The text defines: ""Asynchronous cancellation: One thread immediately terminates the target thread."" and ""Deferred cancellation: The target thread periodically checks whether it should terminate, allowing orderly termination."""
"Which of the following is a known difficulty associated with thread cancellation, especially asynchronous cancellation?",Increased CPU utilization across the system.,Guaranteeing that all resources allocated to the canceled thread are fully reclaimed and shared data is left in a consistent state.,Preventing the operating system from scheduling other threads.,The inability to initiate cancellation from a different thread.,It can only be applied to non-blocking threads.,B,"The text lists difficulties: ""Resources allocated to canceled thread may not be fully reclaimed."" and ""Data shared with other threads may be left in an inconsistent state (especially with asynchronous cancellation)."""
"In Pthreads, how is thread cancellation initiated?",By directly terminating the thread using a system call.,"By invoking `pthread_cancel(tid)`, which is a request that depends on the target thread's setup.",By sending a specific signal that forces immediate termination.,By marking the thread as 'canceled' in its thread control block.,Pthreads does not support thread cancellation.,B,"The text states, ""Initiated with `pthread_cancel(tid)`. This is a request; actual cancellation depends on target thread's setup."""
What is the default cancellation type in Pthreads?,Asynchronous cancellation.,Deferred cancellation.,Immediate cancellation.,Non-cancellable.,Dependent on the specific UNIX system.,B,"The text explicitly states, ""Default type is deferred cancellation."""
"In the context of deferred thread cancellation, what is a ""cancellation point""?",The precise moment when a thread is forcibly terminated by the operating system.,A point in the code where it is safe for the target thread to terminate.,The function responsible for initiating thread cancellation.,A flag that indicates whether a thread is active or inactive.,A mechanism to prevent threads from being canceled.,B,"The glossary defines ""cancellation point"" as ""With deferred thread cancellation, a point in the code at which it is safe to terminate the thread."" The text gives examples like blocking system calls."
What is the purpose of the `pthread_testcancel()` function in Pthreads?,To change the cancellation mode of a thread.,To explicitly establish a cancellation point within a thread's execution.,To determine if a thread has already been canceled.,To prevent a thread from ever being canceled.,To recover a thread after it has been canceled.,B,"The text specifies, ""`pthread_testcancel()`: Function to explicitly establish a cancellation point."""
What is the role of a cleanup handler in thread cancellation?,It is a handler that prevents a thread from being canceled.,It ensures that all memory allocated by the thread is zeroed out after termination.,"It is a function invoked if a thread is canceled, allowing resource release before termination.",It automatically restarts a canceled thread to re-attempt its operation.,It reports a log of all cancellation attempts to the operating system.,C,"The glossary defines ""clean-up handler"" as ""A function that allows any resources a thread has acquired to be released before the thread is terminated."" The main text also states it's ""A function invoked if a thread is canceled, allowing resource release before termination."""
What is the general recommendation regarding asynchronous cancellation in Pthreads?,It is the preferred method for immediate termination.,It is generally not recommended due to potential difficulties with resource reclamation and data consistency.,It should only be used for threads performing non-blocking operations.,It is the default cancellation type and thus widely used.,It requires special hardware support to be effective.,B,"The text states, ""Asynchronous cancellation is generally not recommended in Pthreads."""
How does Java's thread cancellation mechanism primarily operate?,It uses a direct `terminate()` method similar to asynchronous cancellation.,It relies on `pthread_cancel()` for cross-platform compatibility.,"It is similar to deferred cancellation, where `interrupt()` sets a status that the thread checks with `isInterrupted()`.",Java threads are designed to be non-cancellable by external requests.,It uses asynchronous procedure calls (APCs) internally.,C,"The text describes: ""Similar to deferred cancellation. Invoke `interrupt()` method on target thread to set its interruption status to true. Thread checks its interruption status using `isInterrupted()` method."""
What is Thread-Local Storage (TLS)?,Data that is shared by all threads in a process but is only accessible via specific system calls.,Memory allocated on the stack for function-specific variables.,"Data unique to each thread, even though threads typically share process data.",A mechanism for threads to communicate with each other through shared memory.,A temporary cache for frequently accessed global variables.,C,"The glossary defines ""thread-local storage (TLS)"" as ""Data available only to a given thread."" The main text expands: ""Data unique to each thread, even though threads typically share process data."""
What is a key distinction between Thread-Local Storage (TLS) data and typical local variables?,"TLS data is allocated on the heap, while local variables are on the stack.","TLS data is only visible within a single function invocation, while local variables persist across invocations.","TLS data is visible across function invocations, unlike local variables which are limited to their scope.","TLS data can be accessed by any thread, whereas local variables are private to one thread.","TLS data requires explicit deallocation by the developer, unlike local variables.",C,"The text states, ""TLS data are visible across function invocations, unlike local variables."""
In what scenario would Thread-Local Storage (TLS) be particularly useful?,When a global variable needs to be shared and modified by all threads simultaneously.,"When each thread needs its own independent copy of certain data, such as a unique transaction ID in a transaction-processing system.","When thread creation is strictly controlled by the developer, allowing for explicit data passing.",When the goal is to reduce memory consumption by sharing all data among threads.,When implementing inter-process communication between unrelated applications.,B,"The text states its purpose: ""When each thread needs its own copy of certain data (e.g., unique transaction ID for each transaction-processing thread)."" Also, ""Useful when thread creation is not controlled by the developer (e.g., thread pools)."""
Which Java class and its methods are specifically mentioned for supporting Thread-Local Storage (TLS)?,`java.lang.Thread` with `start()` and `run()`.,`java.util.concurrent.atomic.AtomicReference` with `get()` and `set()`.,`java.lang.ThreadLocal<T>` with `set()` and `get()`.,`java.util.ArrayList` with `add()` and `remove()`.,Java does not have explicit support for TLS.,C,"The text explicitly mentions, ""Java: `ThreadLocal<T>` class with `set()` and `get()` methods."""
What keyword does the `gcc` compiler provide for supporting Thread-Local Storage (TLS)?,`static`,`volatile`,`_thread`,`register`,`extern`,C,"The text states, ""`gcc` compiler: `_thread` storage class keyword."""
What is the primary concern addressed by scheduler activations?,Managing communication between different processes in a distributed system.,"Facilitating communication between the kernel and the thread library, especially in many-to-many and two-level threading models.",Optimizing context switching between user-level threads without involving the kernel.,Ensuring fair allocation of CPU time to single-threaded applications.,Providing a standard API for thread creation in all operating systems.,B,"The text states, ""Concerns communication between the kernel and the thread library, especially for many-to-many and two-level models."""
What is a Lightweight Process (LWP) in the context of scheduler activations?,A user-level thread that is directly scheduled by the operating system kernel.,An intermediate data structure that appears as a virtual processor to the user-thread library and is attached to a kernel thread.,A dedicated CPU core used for running only I/O-intensive tasks.,A kernel-level thread that cannot be blocked.,A mechanism for thread-local storage.,B,"The glossary defines ""lightweight process (LWP)"" as ""A virtual processor-like data structure allowing a user thread to map to a kernel thread."" The main text adds ""Appears as a virtual processor to the user-thread library."" and ""Each LWP is attached to a kernel thread""."
"In a system utilizing LWPs, what is the consequence if a kernel thread (and thus its associated LWP) blocks?",The kernel automatically detaches the LWP and assigns a new one.,The user-level thread currently scheduled on that LWP also blocks.,All other LWPs in the system are immediately unblocked.,The LWP is converted into a user-level thread.,The system creates a new process to handle the blocked operation.,B,"The text states, ""If a kernel thread (and thus its LWP) blocks, the user-level thread also blocks."""
"What is ""scheduler activation""?",A method where the user-thread library directly manages kernel threads.,A communication scheme where the kernel provides LWPs to an application and informs it of events via upcalls.,A process that solely handles CPU scheduling decisions without kernel involvement.,A technique to prevent deadlocks in multithreaded environments.,A system call that allows an application to explicitly request more physical processors.,B,"The glossary defines ""scheduler activation"" as ""A threading method in which the kernel provides an application with a set of LWPs, and the application can schedule user threads onto an available virtual processor and receive upcalls from the kernel to be informed of certain events."""
"What is the purpose of an ""upcall"" in the context of scheduler activations?",To allow a user-level thread to directly request kernel services.,To send a signal from the kernel to a process thread to communicate an event.,To enable the user-thread library to create new kernel threads.,To notify the kernel when a user thread has completed its execution.,To reassign a blocked LWP to a different kernel thread.,B,"The glossary defines ""upcall"" as ""A threading method in which the kernel sends a signal to a process thread to communicate an event."""
What is an upcall handler?,A kernel function that generates upcalls.,A function within the thread library that handles upcalls from the kernel.,A hardware component responsible for virtual processor management.,A user thread that periodically checks for new LWPs.,A debugger tool for monitoring thread states.,B,"The glossary defines ""upcall handler"" as ""A function in a process that handles upcalls."" The main text adds ""Function in the thread library that handles upcalls, running on a virtual processor."""
"According to the text, what might trigger an upcall from the kernel to the user-thread library in a scheduler activation model?",When a user thread successfully completes an I/O operation.,When an application thread is about to block.,When the user-thread library requests a new user thread.,When a kernel thread decides to terminate an LWP.,When a physical processor becomes idle.,B,"The example upcall scenario given is: ""When an application thread is about to block, the kernel makes an upcall..."""
"In the Windows operating system, what is the mapping model used for user-level threads to kernel threads?",Many-to-one mapping,One-to-many mapping,Many-to-many mapping,One-to-one mapping,Hybrid mapping,D,"Windows uses the one-to-one mapping model, where each user-level thread maps to an associated kernel thread."
A Windows application runs as a separate process. Which statement accurately describes its thread management?,A Windows application can contain only a single kernel thread.,A Windows application can contain one or more threads.,"Each thread in a Windows application runs as a distinct, separate process.","Windows applications are restricted to user-level threads only, with no kernel mapping.","Thread management in Windows applications is entirely handled by user-mode libraries, not the OS kernel.",B,"A Windows application runs as a separate process, which can contain one or more threads."
Which set of components collectively constitutes the 'context' of a thread in Windows?,"Thread ID, owning process pointer, and starting routine address.","Scheduling information, synchronization data, and kernel thread block pointer.","Register set, program counter, user stack, kernel stack, and private storage area.","User-mode stack, thread environment block, and thread-local storage array.","File system information, memory space, and signal handlers.",C,"The register set, stacks (user and kernel), and private storage area constitute the context of the thread."
"In Windows, which of the following general components is part of a thread's structure?",Process Control Block (PCB),Global system registry,Thread ID,Shared memory segment list,Hardware interrupt vector table,C,"A Thread ID is a general component of a thread, along with the register set, program counter, user stack, kernel stack, and private storage area."
Which of the primary data structures for a Windows thread exists entirely in user space?,ETHREAD (executive thread block),KTHREAD (kernel thread block),TEB (thread environment block),Both ETHREAD and KTHREAD,"All three (ETHREAD, KTHREAD, TEB)",C,"The TEB is a user-space data structure, while ETHREAD and KTHREAD exist in kernel space."
The KTHREAD (kernel thread block) in Windows is primarily responsible for holding which type of information?,The thread identifier and user-mode stack.,A pointer to the owning process and the thread's starting routine address.,"Scheduling and synchronization information, along with the kernel stack.",Private storage area for run-time libraries.,File system and memory space sharing flags.,C,"KTHREAD includes scheduling and synchronization information, the kernel stack, and a pointer to the TEB."
What information does the ETHREAD (executive thread block) in Windows typically contain?,Only the thread's unique identifier.,The user-mode stack and an array for thread-local storage.,Scheduling and synchronization details for the thread.,A pointer to the owning process and the thread's starting routine address.,The entire register set and program counter.,D,ETHREAD contains a pointer to the owning process and the thread's starting routine address; it also points to the corresponding KTHREAD.
"In Windows, which of the following statements is true regarding the accessibility of thread data structures?",TEB is accessible by the kernel only.,ETHREAD and KTHREAD are accessible by user applications.,ETHREAD and KTHREAD exist in kernel space and are only accessible by the kernel.,"All thread data structures (ETHREAD, KTHREAD, TEB) exist in kernel space.",Only the register set is kernel-accessible; other components are user-accessible.,C,ETHREAD and KTHREAD exist in kernel space (only accessible by the kernel); TEB is in user space.
"What term does Linux use to refer to a flow of control, which encompasses both processes and threads?",Process,Thread,Task,Execution context,Workload unit,C,Linux does not distinguish between processes and threads; it uses the term 'task' to refer to a flow of control.
"Which Linux system call is specifically designed for creating threads, offering various levels of resource sharing through flags?",fork(),exec(),create_thread(),clone(),spawn(),D,"Linux provides the clone() system call for creating threads, which is passed a set of flags that determine the level of sharing between parent and child tasks."
"When using the Linux `clone()` system call, which flag would you set to ensure the child task shares the same memory space as the parent?",`CLONE_FS`,`CLONE_SIGHAND`,`CLONE_FILES`,`CLONE_VM`,`CLONE_PID`,D,`CLONE_VM` is a flag passed to `clone()` that specifies sharing the same memory space.
How does the Linux `clone()` system call behave if no flags are set?,It creates a thread with maximum resource sharing.,"It functions similarly to `fork()`, resulting in no resource sharing.",It defaults to creating a lightweight process that shares only file system information.,"It results in an error, as flags are mandatory for `clone()`.",It automatically detects the optimal sharing level based on system load.,B,"If no flags are set, `clone()` provides functionality similar to `fork()` (no sharing)."
What is the primary kernel data structure used to represent a 'task' in the Linux kernel?,`struct process_control_block`,`struct kernel_flow`,`struct task_struct`,`struct thread_descriptor`,`struct exec_unit`,C,A unique kernel data structure (`struct task_struct`) exists for each task in Linux.
"How does `struct task_struct` in the Linux kernel typically manage information like open files, signal handling, and virtual memory?",It stores all this data directly within the `struct task_struct` itself.,It contains pointers to other separate data structures where this information is stored.,"It uses a global, shared array for all tasks' associated data.","This information is managed exclusively in user space, not by `task_struct`.",It relies on memory-mapped files to access such data on demand.,B,"This structure contains pointers to other data structures (e.g., open files, signal handling, virtual memory) rather than storing the data directly."
"When the Linux `fork()` system call is invoked to create a new task, how are the associated data structures handled?",The new task shares all data structures directly with the parent.,"The new task points to the parent's data structures, depending on user-specified flags.",A new task is created with copies of all associated data structures.,Only the kernel stack is copied; all other data structures are shared.,The new task receives entirely new and empty data structures.,C,"When `fork()` is invoked, a new task is created with copies of all associated data structures."
"The flexibility provided by the Linux `clone()` system call, particularly its ability to allow varying levels of resource sharing, is crucial for the implementation of which technology?",Graphical User Interfaces (GUIs),Real-time operating systems (RTOS),Network protocols like TCP/IP,"Linux containers (e.g., Docker)",File system encryption,D,"The flexibility of `clone()` extends to creating Linux containers, which are virtualized systems running in isolation under a single Linux kernel."
Which statement most accurately describes a 'thread' as a basic unit of CPU utilization?,It is an independent program that operates in isolation from other processes.,"It is the smallest executable unit of a process, sharing resources like code and data with other threads of the same process.",It is a kernel-level construct that always requires a dedicated CPU core.,"It represents an entire process, including its own separate memory space and resources.",It is a high-level abstraction primarily used for inter-process communication.,B,"The text states: 'A thread is a basic unit of CPU utilization; threads belonging to the same process share many process resources, including code and data.'"
Threads belonging to the same process primarily share which of the following resources?,Their own separate memory spaces.,Unique CPU cores for each thread.,Code and data segments.,Distinct sets of file descriptors and I/O devices.,Individual network connections.,C,"The text explicitly states: 'threads belonging to the same process share many process resources, including code and data.'"
"According to the provided text, what are the four primary benefits of multithreaded applications?","Efficiency, Security, Simplicity, Portability","Responsiveness, Resource sharing, Economy, Scalability","Concurrency, Parallelism, Atomicity, Durability","Reliability, Redundancy, Recoverability, Throughput","Virtualization, Encapsulation, Polymorphism, Inheritance",B,"The text lists: 'There are four primary benefits to multithreaded applications: (1) responsiveness, (2) resource sharing, (3) economy, and (4) scalability.'"
What is the defining characteristic of 'concurrency' in the context of multithreading?,Multiple threads executing simultaneously.,Multiple threads making progress.,A single thread completing multiple tasks sequentially.,Tasks running on separate physical machines.,Data being processed in parallel on different datasets.,B,The text defines 'Concurrency' as existing 'when multiple threads are making progress.'
Parallelism is specifically defined by which of the following conditions?,Threads taking turns to execute on a single processor.,Multiple threads making progress simultaneously.,The ability to run on a single CPU without interruption.,The use of virtual memory to manage thread execution.,Resource sharing among independent processes.,B,The text states: 'Parallelism exists when multiple threads are making progress simultaneously.'
"On which type of system is true parallelism, where multiple threads make progress simultaneously, possible?",A single-CPU system.,A uniprocessor system.,A system with only one core.,A multicore system with multiple CPUs.,"Any system with sufficient RAM, regardless of CPU count.",D,"The text clarifies: 'On a single-CPU system, only concurrency is possible; parallelism requires a multicore system with multiple CPUs.'"
Which of the following is identified as a challenge in designing multithreaded applications?,Simplified testing and debugging due to modularity.,Automatic elimination of data dependencies.,Effortless division and balancing of work.,Increased difficulty of testing and debugging.,Reduced need for data synchronization.,D,The text lists 'increased difficulty of testing and debugging' as one of the challenges in designing multithreaded applications.
"When designing multithreaded applications, what is a key challenge related to the manipulation of data?",Ensuring data encryption for all shared data.,Automatically compressing all data before sharing.,Dividing data between threads and identifying data dependencies.,Minimizing data redundancy across threads.,Implementing data virtualization.,C,The text mentions 'dividing data between threads' and 'identifying data dependencies' as challenges in multithreaded application design.
"In 'data parallelism', how are operations typically performed across computing cores?",Unique operations are performed on unique data subsets.,The same operation is performed on different subsets of the same data across multiple cores.,Different operations are performed on the same data set.,Operations are performed sequentially on a single core.,"Tasks, not data, are distributed across cores.",B,The text states: 'Data parallelism distributes subsets of the same data across different computing cores and performs the same operation on each core.'
What is the primary distinction of 'task parallelism' compared to 'data parallelism'?,"Task parallelism distributes subsets of the same data, while data parallelism distributes unique operations.","Task parallelism performs the same operation on all cores, whereas data parallelism runs unique operations.","Task parallelism distributes tasks (not data) across multiple cores, with each task running a unique operation, while data parallelism distributes data subsets and performs the same operation.","Task parallelism is only possible on single-core systems, unlike data parallelism.",Task parallelism always requires more memory resources than data parallelism.,C,"The text defines 'Task parallelism' as distributing 'tasks (not data) across multiple cores, with each task running a unique operation,' contrasting it with data parallelism."
Why must user-level threads be mapped to kernel threads for execution?,To allow them to run directly on the hardware without OS intervention.,Because user-level threads are purely abstract and cannot execute on a CPU without kernel support.,To convert them into full-fledged processes.,To enable implicit threading mechanisms.,To perform asynchronous cancellation.,B,"The text states: 'User applications create user-level threads, which must be mapped to kernel threads for execution on a CPU.'"
Which of the following is NOT listed as a common mapping model for user-level threads to kernel threads?,Many-to-one,One-to-one,Many-to-many,One-to-many,All of the above are common mapping models.,D,"The common mapping models listed are 'many-to-one, one-to-one, and many-to-many.' One-to-many is not listed."
What is the primary function of a 'thread library'?,To manage process memory allocations.,To provide an API for creating and managing threads.,To handle network communication protocols.,To compile source code into executable binaries.,To schedule processes for CPU execution.,B,The text states: 'A thread library provides an API for creating and managing threads.'
"Which key thread library is specifically designed for POSIX-compatible systems, including UNIX, Linux, and macOS?",Windows threads,Pthreads,Java threading,Grand Central Dispatch,OpenMP,B,"The text specifies: 'Pthreads is for POSIX-compatible systems (UNIX, Linux, macOS).'"
"The Java threading library is notable for its portability, allowing Java threads to run on which platforms?",Only Windows systems.,Only UNIX/Linux systems.,Any system supporting a Java Virtual Machine.,macOS only.,Systems with specific hardware accelerators.,C,The text states: 'Java threads run on any system supporting a Java Virtual Machine.'
What is the core principle of 'implicit threading'?,Programmers explicitly create and manage every thread manually.,Threads are always created directly by the operating system kernel.,It involves identifying tasks and allowing languages or API frameworks to create and manage threads.,It mandates the use of only a single thread for all application operations.,It requires threads to be directly mapped to hardware cores without any abstraction.,C,The text defines 'Implicit threading' as involving 'identifying tasks (not threads) and allowing languages or API frameworks to create and manage threads.'
Which of the following is an identified approach used in implicit threading?,Manual thread creation via system calls.,Explicit thread joining commands.,Thread pools.,Synchronous cancellation.,Direct kernel thread mapping by the programmer.,C,"The text lists 'thread pools, fork-join frameworks, and Grand Central Dispatch' as approaches to implicit threading."
Which type of thread cancellation results in the immediate termination of the target thread?,Deferred cancellation.,Asynchronous cancellation.,Synchronous cancellation.,Batch cancellation.,Provisional cancellation.,B,The text defines 'asynchronous cancellation' as 'immediate termination'.
Why is 'deferred cancellation' generally preferred over 'asynchronous cancellation' for thread termination?,It is faster to implement and execute.,It ensures immediate termination without any overhead.,"It allows the target thread to shut down orderly, helping with resource reclamation and data consistency.",It uses significantly less CPU resources during operation.,It guarantees perfect parallelism for the application.,C,The text states: 'Deferred cancellation is generally preferred due to issues with resource reclamation and data consistency in asynchronous cancellation.'
How does the Linux operating system generally refer to both processes and threads?,As 'jobs'.,As 'units'.,As 'tasks'.,As 'executables'.,"As 'processes only', without distinguishing threads.",C,"The text notes: 'Unlike many other operating systems, Linux does not distinguish between processes and threads, referring to both as tasks.'"
The Linux `clone()` system call can create tasks that behave more like processes or threads primarily depending on what?,The specific CPU architecture of the system.,The amount of available RAM at the time of the call.,The flags passed for resource sharing.,The user's permission level executing the call.,The compilation environment of the application.,C,"The text specifies: 'The Linux `clone()` system call can create tasks that behave more like processes or threads, depending on the flags passed for resource sharing.'"
