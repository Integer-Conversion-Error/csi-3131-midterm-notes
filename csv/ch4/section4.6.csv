Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
How do the semantics of `fork()` and `exec()` change in multithreaded programs compared to single-threaded ones?,They remain identical.,"Only `fork()` semantics change, `exec()` remains the same.","Only `exec()` semantics change, `fork()` remains the same.",Both `fork()` and `exec()` semantics change.,`fork()` is not available in multithreaded contexts.,D,"The text explicitly states, ""The semantics of `fork()` and `exec()` change in multithreaded programs."""
"When a multithreaded program forks and immediately calls `exec()`, which version of `fork()` is typically more appropriate in UNIX systems?",The version that duplicates all threads in the new process.,The version that duplicates only the calling thread in the new process.,"Neither version is appropriate, as `exec()` should not be used after `fork()` in multithreaded programs.","The choice is irrelevant, as `exec()` replaces the process entirely anyway.","A new, specialized `fork_exec()` system call is used.",B,"The text states, ""If `exec()` is called immediately after forking, duplicating only the calling thread is appropriate."" This is because `exec()` will replace the entire process, making the duplication of other threads redundant."
"In a multithreaded UNIX program, if the new process created by `fork()` does NOT call `exec()`, what is the appropriate behavior for `fork()`?",It should duplicate only the calling thread to minimize overhead.,It should duplicate all threads in the new process.,"The `fork()` call will fail, as this scenario is not supported.",The behavior is undefined and depends on the specific UNIX system implementation.,The parent process's threads are destroyed upon forking.,B,"The text specifies, ""If the new process does not call `exec()`, duplicating all threads is appropriate."""
What happens when a thread invokes `exec()` in a multithreaded program?,Only the invoking thread is replaced by the new program.,The new program runs as a new thread within the existing process.,"The specified program replaces the entire process, including all threads.",`exec()` is blocked until all other threads in the process terminate.,"A new process is created, and the original process continues to run.",C,"The text clearly states, ""If a thread invokes `exec()`, the specified program replaces the entire process, including all threads."""
"In UNIX systems, what is the primary purpose of a signal?",To indicate that a process has completed execution.,To notify a process of an event.,To request a process to allocate more memory.,To synchronize access to shared resources between processes.,To initiate the creation of a new thread within a process.,B,"The glossary defines ""signal"" as ""In UNIX and other operating systems, a means used to notify a process that an event has occurred."""
Which sequence correctly describes the pattern of signal handling in UNIX systems?,Handled → Generated → Delivered,Delivered → Generated → Handled,Generated → Delivered → Handled,Generated → Handled → Delivered,Handled → Delivered → Generated,C,"The text outlines the ""Signal Pattern"" as ""Generated → Delivered → Handled."""
Which statement accurately describes synchronous signals?,They are generated by events external to the running process and typically sent to another process.,They are generated by an event within the running process and delivered to the same process that caused the signal.,They are primarily used for inter-process communication between unrelated processes.,They are always handled by a default signal handler and cannot be overridden.,They are specific to Windows operating systems and emulated by APCs.,B,"The text states, ""Synchronous Signals: Generated by an event within the running process (e.g., illegal memory access, division by zero); delivered to the same process that caused the signal."""
What distinguishes an asynchronous signal from a synchronous signal?,"Asynchronous signals are always delivered to a user-defined signal handler, while synchronous signals are not.","Asynchronous signals are generated by an event within the running process, whereas synchronous signals are external.","Asynchronous signals are generated by an event external to the running process, while synchronous signals originate internally.","Asynchronous signals are handled immediately, while synchronous signals are deferred.",Asynchronous signals can only be sent to the process that generated them.,C,"The text notes, ""Asynchronous Signals: Generated by an event external to the running process (e.g., <control><C>, timer expiration); typically sent to another process."" This contrasts with synchronous signals which are internal."
What is a default signal handler?,A signal handler defined by the user to override kernel actions.,A kernel-provided handler for each signal.,A handler that only processes asynchronous signals.,A function invoked when a thread is canceled.,A mechanism for thread-local storage.,B,"The glossary defines ""default signal handler"" as ""The signal handler that receives signals unless a user-defined signal handler is provided by a process."" The main text also says ""Kernel-provided handler for each signal."""
What is the primary role of a user-defined signal handler?,To generate new signals within a process.,To replace the entire process when a signal is received.,To override the default action for handling a signal.,To block the delivery of all signals to a process.,To deliver signals to specific threads in a multithreaded program.,C,"The glossary defines ""user-defined signal handler"" as ""The signal handler created by a process to provide non-default signal handling."" The main text says ""Overrides the default action to handle the signal."""
Which of the following is NOT a valid option for signal delivery in a multithreaded program?,Deliver to the thread to which the signal applies.,Deliver to every thread in the process.,Deliver to certain threads in the process.,Assign a specific thread to receive all signals for the process.,Signals are automatically converted to thread-local storage.,E,The text lists four valid options for signal delivery in multithreaded programs. Option E is not mentioned and represents a different concept entirely.
Which UNIX function is used to deliver a signal to a specified Pthread (POSIX thread)?,"`kill(pid_t pid, int signal)`","`signal(int signum, handler_t handler)`","`pthread_kill(pthread_t tid, int signal)`","`send_signal_to_thread(int signal, int thread_id)`",`raise(int signal)`,C,"The text explicitly lists `pthread_kill(pthread_t tid, int signal)` as the function for delivering a signal to a specified Pthread."
"How does Windows emulate UNIX-like signals, given that it does not explicitly support them?",By converting all signals into inter-process communication messages.,By using a kernel-level signal daemon that manages all signal events.,By blocking all signal-generating events from user applications.,By using asynchronous procedure calls (APCs) delivered to a particular thread.,Windows processes automatically terminate upon receiving any event that would trigger a signal in UNIX.,D,"The text states, ""Windows does not explicitly support signals but emulates them using Asynchronous Procedure Calls (APCs). An APC is delivered to a particular thread."""
"What does ""thread cancellation"" refer to?",The process of preventing a thread from being created.,The termination of a target thread before it has completed its task.,The ability of a thread to pause its own execution indefinitely.,The mechanism by which a thread communicates with another process.,The act of removing a thread from the CPU's ready queue.,B,"The glossary defines ""thread cancellation"" as ""Termination of a thread before it has completed."""
What is the primary difference between asynchronous cancellation and deferred cancellation?,"Asynchronous cancellation allows the target thread to clean up resources, while deferred cancellation does not.","Asynchronous cancellation immediately terminates the target thread, while deferred cancellation allows the target thread to periodically check for termination requests.","Asynchronous cancellation is supported by Pthreads, while deferred cancellation is unique to Java.","Asynchronous cancellation is safer for shared data, while deferred cancellation is not recommended.",There is no functional difference; they are just different naming conventions.,B,"The text defines: ""Asynchronous cancellation: One thread immediately terminates the target thread."" and ""Deferred cancellation: The target thread periodically checks whether it should terminate, allowing orderly termination."""
"Which of the following is a known difficulty associated with thread cancellation, especially asynchronous cancellation?",Increased CPU utilization across the system.,Guaranteeing that all resources allocated to the canceled thread are fully reclaimed and shared data is left in a consistent state.,Preventing the operating system from scheduling other threads.,The inability to initiate cancellation from a different thread.,It can only be applied to non-blocking threads.,B,"The text lists difficulties: ""Resources allocated to canceled thread may not be fully reclaimed."" and ""Data shared with other threads may be left in an inconsistent state (especially with asynchronous cancellation)."""
"In Pthreads, how is thread cancellation initiated?",By directly terminating the thread using a system call.,"By invoking `pthread_cancel(tid)`, which is a request that depends on the target thread's setup.",By sending a specific signal that forces immediate termination.,By marking the thread as 'canceled' in its thread control block.,Pthreads does not support thread cancellation.,B,"The text states, ""Initiated with `pthread_cancel(tid)`. This is a request; actual cancellation depends on target thread's setup."""
What is the default cancellation type in Pthreads?,Asynchronous cancellation.,Deferred cancellation.,Immediate cancellation.,Non-cancellable.,Dependent on the specific UNIX system.,B,"The text explicitly states, ""Default type is deferred cancellation."""
"In the context of deferred thread cancellation, what is a ""cancellation point""?",The precise moment when a thread is forcibly terminated by the operating system.,A point in the code where it is safe for the target thread to terminate.,The function responsible for initiating thread cancellation.,A flag that indicates whether a thread is active or inactive.,A mechanism to prevent threads from being canceled.,B,"The glossary defines ""cancellation point"" as ""With deferred thread cancellation, a point in the code at which it is safe to terminate the thread."" The text gives examples like blocking system calls."
What is the purpose of the `pthread_testcancel()` function in Pthreads?,To change the cancellation mode of a thread.,To explicitly establish a cancellation point within a thread's execution.,To determine if a thread has already been canceled.,To prevent a thread from ever being canceled.,To recover a thread after it has been canceled.,B,"The text specifies, ""`pthread_testcancel()`: Function to explicitly establish a cancellation point."""
What is the role of a cleanup handler in thread cancellation?,It is a handler that prevents a thread from being canceled.,It ensures that all memory allocated by the thread is zeroed out after termination.,"It is a function invoked if a thread is canceled, allowing resource release before termination.",It automatically restarts a canceled thread to re-attempt its operation.,It reports a log of all cancellation attempts to the operating system.,C,"The glossary defines ""clean-up handler"" as ""A function that allows any resources a thread has acquired to be released before the thread is terminated."" The main text also states it's ""A function invoked if a thread is canceled, allowing resource release before termination."""
What is the general recommendation regarding asynchronous cancellation in Pthreads?,It is the preferred method for immediate termination.,It is generally not recommended due to potential difficulties with resource reclamation and data consistency.,It should only be used for threads performing non-blocking operations.,It is the default cancellation type and thus widely used.,It requires special hardware support to be effective.,B,"The text states, ""Asynchronous cancellation is generally not recommended in Pthreads."""
How does Java's thread cancellation mechanism primarily operate?,It uses a direct `terminate()` method similar to asynchronous cancellation.,It relies on `pthread_cancel()` for cross-platform compatibility.,"It is similar to deferred cancellation, where `interrupt()` sets a status that the thread checks with `isInterrupted()`.",Java threads are designed to be non-cancellable by external requests.,It uses asynchronous procedure calls (APCs) internally.,C,"The text describes: ""Similar to deferred cancellation. Invoke `interrupt()` method on target thread to set its interruption status to true. Thread checks its interruption status using `isInterrupted()` method."""
What is Thread-Local Storage (TLS)?,Data that is shared by all threads in a process but is only accessible via specific system calls.,Memory allocated on the stack for function-specific variables.,"Data unique to each thread, even though threads typically share process data.",A mechanism for threads to communicate with each other through shared memory.,A temporary cache for frequently accessed global variables.,C,"The glossary defines ""thread-local storage (TLS)"" as ""Data available only to a given thread."" The main text expands: ""Data unique to each thread, even though threads typically share process data."""
What is a key distinction between Thread-Local Storage (TLS) data and typical local variables?,"TLS data is allocated on the heap, while local variables are on the stack.","TLS data is only visible within a single function invocation, while local variables persist across invocations.","TLS data is visible across function invocations, unlike local variables which are limited to their scope.","TLS data can be accessed by any thread, whereas local variables are private to one thread.","TLS data requires explicit deallocation by the developer, unlike local variables.",C,"The text states, ""TLS data are visible across function invocations, unlike local variables."""
In what scenario would Thread-Local Storage (TLS) be particularly useful?,When a global variable needs to be shared and modified by all threads simultaneously.,"When each thread needs its own independent copy of certain data, such as a unique transaction ID in a transaction-processing system.","When thread creation is strictly controlled by the developer, allowing for explicit data passing.",When the goal is to reduce memory consumption by sharing all data among threads.,When implementing inter-process communication between unrelated applications.,B,"The text states its purpose: ""When each thread needs its own copy of certain data (e.g., unique transaction ID for each transaction-processing thread)."" Also, ""Useful when thread creation is not controlled by the developer (e.g., thread pools)."""
Which Java class and its methods are specifically mentioned for supporting Thread-Local Storage (TLS)?,`java.lang.Thread` with `start()` and `run()`.,`java.util.concurrent.atomic.AtomicReference` with `get()` and `set()`.,`java.lang.ThreadLocal<T>` with `set()` and `get()`.,`java.util.ArrayList` with `add()` and `remove()`.,Java does not have explicit support for TLS.,C,"The text explicitly mentions, ""Java: `ThreadLocal<T>` class with `set()` and `get()` methods."""
What keyword does the `gcc` compiler provide for supporting Thread-Local Storage (TLS)?,`static`,`volatile`,`_thread`,`register`,`extern`,C,"The text states, ""`gcc` compiler: `_thread` storage class keyword."""
What is the primary concern addressed by scheduler activations?,Managing communication between different processes in a distributed system.,"Facilitating communication between the kernel and the thread library, especially in many-to-many and two-level threading models.",Optimizing context switching between user-level threads without involving the kernel.,Ensuring fair allocation of CPU time to single-threaded applications.,Providing a standard API for thread creation in all operating systems.,B,"The text states, ""Concerns communication between the kernel and the thread library, especially for many-to-many and two-level models."""
What is a Lightweight Process (LWP) in the context of scheduler activations?,A user-level thread that is directly scheduled by the operating system kernel.,An intermediate data structure that appears as a virtual processor to the user-thread library and is attached to a kernel thread.,A dedicated CPU core used for running only I/O-intensive tasks.,A kernel-level thread that cannot be blocked.,A mechanism for thread-local storage.,B,"The glossary defines ""lightweight process (LWP)"" as ""A virtual processor-like data structure allowing a user thread to map to a kernel thread."" The main text adds ""Appears as a virtual processor to the user-thread library."" and ""Each LWP is attached to a kernel thread""."
"In a system utilizing LWPs, what is the consequence if a kernel thread (and thus its associated LWP) blocks?",The kernel automatically detaches the LWP and assigns a new one.,The user-level thread currently scheduled on that LWP also blocks.,All other LWPs in the system are immediately unblocked.,The LWP is converted into a user-level thread.,The system creates a new process to handle the blocked operation.,B,"The text states, ""If a kernel thread (and thus its LWP) blocks, the user-level thread also blocks."""
"What is ""scheduler activation""?",A method where the user-thread library directly manages kernel threads.,A communication scheme where the kernel provides LWPs to an application and informs it of events via upcalls.,A process that solely handles CPU scheduling decisions without kernel involvement.,A technique to prevent deadlocks in multithreaded environments.,A system call that allows an application to explicitly request more physical processors.,B,"The glossary defines ""scheduler activation"" as ""A threading method in which the kernel provides an application with a set of LWPs, and the application can schedule user threads onto an available virtual processor and receive upcalls from the kernel to be informed of certain events."""
"What is the purpose of an ""upcall"" in the context of scheduler activations?",To allow a user-level thread to directly request kernel services.,To send a signal from the kernel to a process thread to communicate an event.,To enable the user-thread library to create new kernel threads.,To notify the kernel when a user thread has completed its execution.,To reassign a blocked LWP to a different kernel thread.,B,"The glossary defines ""upcall"" as ""A threading method in which the kernel sends a signal to a process thread to communicate an event."""
What is an upcall handler?,A kernel function that generates upcalls.,A function within the thread library that handles upcalls from the kernel.,A hardware component responsible for virtual processor management.,A user thread that periodically checks for new LWPs.,A debugger tool for monitoring thread states.,B,"The glossary defines ""upcall handler"" as ""A function in a process that handles upcalls."" The main text adds ""Function in the thread library that handles upcalls, running on a virtual processor."""
"According to the text, what might trigger an upcall from the kernel to the user-thread library in a scheduler activation model?",When a user thread successfully completes an I/O operation.,When an application thread is about to block.,When the user-thread library requests a new user thread.,When a kernel thread decides to terminate an LWP.,When a physical processor becomes idle.,B,"The example upcall scenario given is: ""When an application thread is about to block, the kernel makes an upcall..."""
