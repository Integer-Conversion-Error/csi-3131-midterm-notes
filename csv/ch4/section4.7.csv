Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
"In the Windows operating system, what is the mapping model used for user-level threads to kernel threads?",Many-to-one mapping,One-to-many mapping,Many-to-many mapping,One-to-one mapping,Hybrid mapping,D,"Windows uses the one-to-one mapping model, where each user-level thread maps to an associated kernel thread."
A Windows application runs as a separate process. Which statement accurately describes its thread management?,A Windows application can contain only a single kernel thread.,A Windows application can contain one or more threads.,"Each thread in a Windows application runs as a distinct, separate process.","Windows applications are restricted to user-level threads only, with no kernel mapping.","Thread management in Windows applications is entirely handled by user-mode libraries, not the OS kernel.",B,"A Windows application runs as a separate process, which can contain one or more threads."
Which set of components collectively constitutes the 'context' of a thread in Windows?,"Thread ID, owning process pointer, and starting routine address.","Scheduling information, synchronization data, and kernel thread block pointer.","Register set, program counter, user stack, kernel stack, and private storage area.","User-mode stack, thread environment block, and thread-local storage array.","File system information, memory space, and signal handlers.",C,"The register set, stacks (user and kernel), and private storage area constitute the context of the thread."
"In Windows, which of the following general components is part of a thread's structure?",Process Control Block (PCB),Global system registry,Thread ID,Shared memory segment list,Hardware interrupt vector table,C,"A Thread ID is a general component of a thread, along with the register set, program counter, user stack, kernel stack, and private storage area."
Which of the primary data structures for a Windows thread exists entirely in user space?,ETHREAD (executive thread block),KTHREAD (kernel thread block),TEB (thread environment block),Both ETHREAD and KTHREAD,"All three (ETHREAD, KTHREAD, TEB)",C,"The TEB is a user-space data structure, while ETHREAD and KTHREAD exist in kernel space."
The KTHREAD (kernel thread block) in Windows is primarily responsible for holding which type of information?,The thread identifier and user-mode stack.,A pointer to the owning process and the thread's starting routine address.,"Scheduling and synchronization information, along with the kernel stack.",Private storage area for run-time libraries.,File system and memory space sharing flags.,C,"KTHREAD includes scheduling and synchronization information, the kernel stack, and a pointer to the TEB."
What information does the ETHREAD (executive thread block) in Windows typically contain?,Only the thread's unique identifier.,The user-mode stack and an array for thread-local storage.,Scheduling and synchronization details for the thread.,A pointer to the owning process and the thread's starting routine address.,The entire register set and program counter.,D,ETHREAD contains a pointer to the owning process and the thread's starting routine address; it also points to the corresponding KTHREAD.
"In Windows, which of the following statements is true regarding the accessibility of thread data structures?",TEB is accessible by the kernel only.,ETHREAD and KTHREAD are accessible by user applications.,ETHREAD and KTHREAD exist in kernel space and are only accessible by the kernel.,"All thread data structures (ETHREAD, KTHREAD, TEB) exist in kernel space.",Only the register set is kernel-accessible; other components are user-accessible.,C,ETHREAD and KTHREAD exist in kernel space (only accessible by the kernel); TEB is in user space.
"What term does Linux use to refer to a flow of control, which encompasses both processes and threads?",Process,Thread,Task,Execution context,Workload unit,C,Linux does not distinguish between processes and threads; it uses the term 'task' to refer to a flow of control.
"Which Linux system call is specifically designed for creating threads, offering various levels of resource sharing through flags?",fork(),exec(),create_thread(),clone(),spawn(),D,"Linux provides the clone() system call for creating threads, which is passed a set of flags that determine the level of sharing between parent and child tasks."
"When using the Linux `clone()` system call, which flag would you set to ensure the child task shares the same memory space as the parent?",`CLONE_FS`,`CLONE_SIGHAND`,`CLONE_FILES`,`CLONE_VM`,`CLONE_PID`,D,`CLONE_VM` is a flag passed to `clone()` that specifies sharing the same memory space.
How does the Linux `clone()` system call behave if no flags are set?,It creates a thread with maximum resource sharing.,"It functions similarly to `fork()`, resulting in no resource sharing.",It defaults to creating a lightweight process that shares only file system information.,"It results in an error, as flags are mandatory for `clone()`.",It automatically detects the optimal sharing level based on system load.,B,"If no flags are set, `clone()` provides functionality similar to `fork()` (no sharing)."
What is the primary kernel data structure used to represent a 'task' in the Linux kernel?,`struct process_control_block`,`struct kernel_flow`,`struct task_struct`,`struct thread_descriptor`,`struct exec_unit`,C,A unique kernel data structure (`struct task_struct`) exists for each task in Linux.
"How does `struct task_struct` in the Linux kernel typically manage information like open files, signal handling, and virtual memory?",It stores all this data directly within the `struct task_struct` itself.,It contains pointers to other separate data structures where this information is stored.,"It uses a global, shared array for all tasks' associated data.","This information is managed exclusively in user space, not by `task_struct`.",It relies on memory-mapped files to access such data on demand.,B,"This structure contains pointers to other data structures (e.g., open files, signal handling, virtual memory) rather than storing the data directly."
"When the Linux `fork()` system call is invoked to create a new task, how are the associated data structures handled?",The new task shares all data structures directly with the parent.,"The new task points to the parent's data structures, depending on user-specified flags.",A new task is created with copies of all associated data structures.,Only the kernel stack is copied; all other data structures are shared.,The new task receives entirely new and empty data structures.,C,"When `fork()` is invoked, a new task is created with copies of all associated data structures."
"The flexibility provided by the Linux `clone()` system call, particularly its ability to allow varying levels of resource sharing, is crucial for the implementation of which technology?",Graphical User Interfaces (GUIs),Real-time operating systems (RTOS),Network protocols like TCP/IP,"Linux containers (e.g., Docker)",File system encryption,D,"The flexibility of `clone()` extends to creating Linux containers, which are virtualized systems running in isolation under a single Linux kernel."
