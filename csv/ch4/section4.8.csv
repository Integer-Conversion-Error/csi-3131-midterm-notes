Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which statement most accurately describes a 'thread' as a basic unit of CPU utilization?,It is an independent program that operates in isolation from other processes.,"It is the smallest executable unit of a process, sharing resources like code and data with other threads of the same process.",It is a kernel-level construct that always requires a dedicated CPU core.,"It represents an entire process, including its own separate memory space and resources.",It is a high-level abstraction primarily used for inter-process communication.,B,"The text states: 'A thread is a basic unit of CPU utilization; threads belonging to the same process share many process resources, including code and data.'"
Threads belonging to the same process primarily share which of the following resources?,Their own separate memory spaces.,Unique CPU cores for each thread.,Code and data segments.,Distinct sets of file descriptors and I/O devices.,Individual network connections.,C,"The text explicitly states: 'threads belonging to the same process share many process resources, including code and data.'"
"According to the provided text, what are the four primary benefits of multithreaded applications?","Efficiency, Security, Simplicity, Portability","Responsiveness, Resource sharing, Economy, Scalability","Concurrency, Parallelism, Atomicity, Durability","Reliability, Redundancy, Recoverability, Throughput","Virtualization, Encapsulation, Polymorphism, Inheritance",B,"The text lists: 'There are four primary benefits to multithreaded applications: (1) responsiveness, (2) resource sharing, (3) economy, and (4) scalability.'"
What is the defining characteristic of 'concurrency' in the context of multithreading?,Multiple threads executing simultaneously.,Multiple threads making progress.,A single thread completing multiple tasks sequentially.,Tasks running on separate physical machines.,Data being processed in parallel on different datasets.,B,The text defines 'Concurrency' as existing 'when multiple threads are making progress.'
Parallelism is specifically defined by which of the following conditions?,Threads taking turns to execute on a single processor.,Multiple threads making progress simultaneously.,The ability to run on a single CPU without interruption.,The use of virtual memory to manage thread execution.,Resource sharing among independent processes.,B,The text states: 'Parallelism exists when multiple threads are making progress simultaneously.'
"On which type of system is true parallelism, where multiple threads make progress simultaneously, possible?",A single-CPU system.,A uniprocessor system.,A system with only one core.,A multicore system with multiple CPUs.,"Any system with sufficient RAM, regardless of CPU count.",D,"The text clarifies: 'On a single-CPU system, only concurrency is possible; parallelism requires a multicore system with multiple CPUs.'"
Which of the following is identified as a challenge in designing multithreaded applications?,Simplified testing and debugging due to modularity.,Automatic elimination of data dependencies.,Effortless division and balancing of work.,Increased difficulty of testing and debugging.,Reduced need for data synchronization.,D,The text lists 'increased difficulty of testing and debugging' as one of the challenges in designing multithreaded applications.
"When designing multithreaded applications, what is a key challenge related to the manipulation of data?",Ensuring data encryption for all shared data.,Automatically compressing all data before sharing.,Dividing data between threads and identifying data dependencies.,Minimizing data redundancy across threads.,Implementing data virtualization.,C,The text mentions 'dividing data between threads' and 'identifying data dependencies' as challenges in multithreaded application design.
"In 'data parallelism', how are operations typically performed across computing cores?",Unique operations are performed on unique data subsets.,The same operation is performed on different subsets of the same data across multiple cores.,Different operations are performed on the same data set.,Operations are performed sequentially on a single core.,"Tasks, not data, are distributed across cores.",B,The text states: 'Data parallelism distributes subsets of the same data across different computing cores and performs the same operation on each core.'
What is the primary distinction of 'task parallelism' compared to 'data parallelism'?,"Task parallelism distributes subsets of the same data, while data parallelism distributes unique operations.","Task parallelism performs the same operation on all cores, whereas data parallelism runs unique operations.","Task parallelism distributes tasks (not data) across multiple cores, with each task running a unique operation, while data parallelism distributes data subsets and performs the same operation.","Task parallelism is only possible on single-core systems, unlike data parallelism.",Task parallelism always requires more memory resources than data parallelism.,C,"The text defines 'Task parallelism' as distributing 'tasks (not data) across multiple cores, with each task running a unique operation,' contrasting it with data parallelism."
Why must user-level threads be mapped to kernel threads for execution?,To allow them to run directly on the hardware without OS intervention.,Because user-level threads are purely abstract and cannot execute on a CPU without kernel support.,To convert them into full-fledged processes.,To enable implicit threading mechanisms.,To perform asynchronous cancellation.,B,"The text states: 'User applications create user-level threads, which must be mapped to kernel threads for execution on a CPU.'"
Which of the following is NOT listed as a common mapping model for user-level threads to kernel threads?,Many-to-one,One-to-one,Many-to-many,One-to-many,All of the above are common mapping models.,D,"The common mapping models listed are 'many-to-one, one-to-one, and many-to-many.' One-to-many is not listed."
What is the primary function of a 'thread library'?,To manage process memory allocations.,To provide an API for creating and managing threads.,To handle network communication protocols.,To compile source code into executable binaries.,To schedule processes for CPU execution.,B,The text states: 'A thread library provides an API for creating and managing threads.'
"Which key thread library is specifically designed for POSIX-compatible systems, including UNIX, Linux, and macOS?",Windows threads,Pthreads,Java threading,Grand Central Dispatch,OpenMP,B,"The text specifies: 'Pthreads is for POSIX-compatible systems (UNIX, Linux, macOS).'"
"The Java threading library is notable for its portability, allowing Java threads to run on which platforms?",Only Windows systems.,Only UNIX/Linux systems.,Any system supporting a Java Virtual Machine.,macOS only.,Systems with specific hardware accelerators.,C,The text states: 'Java threads run on any system supporting a Java Virtual Machine.'
What is the core principle of 'implicit threading'?,Programmers explicitly create and manage every thread manually.,Threads are always created directly by the operating system kernel.,It involves identifying tasks and allowing languages or API frameworks to create and manage threads.,It mandates the use of only a single thread for all application operations.,It requires threads to be directly mapped to hardware cores without any abstraction.,C,The text defines 'Implicit threading' as involving 'identifying tasks (not threads) and allowing languages or API frameworks to create and manage threads.'
Which of the following is an identified approach used in implicit threading?,Manual thread creation via system calls.,Explicit thread joining commands.,Thread pools.,Synchronous cancellation.,Direct kernel thread mapping by the programmer.,C,"The text lists 'thread pools, fork-join frameworks, and Grand Central Dispatch' as approaches to implicit threading."
Which type of thread cancellation results in the immediate termination of the target thread?,Deferred cancellation.,Asynchronous cancellation.,Synchronous cancellation.,Batch cancellation.,Provisional cancellation.,B,The text defines 'asynchronous cancellation' as 'immediate termination'.
Why is 'deferred cancellation' generally preferred over 'asynchronous cancellation' for thread termination?,It is faster to implement and execute.,It ensures immediate termination without any overhead.,"It allows the target thread to shut down orderly, helping with resource reclamation and data consistency.",It uses significantly less CPU resources during operation.,It guarantees perfect parallelism for the application.,C,The text states: 'Deferred cancellation is generally preferred due to issues with resource reclamation and data consistency in asynchronous cancellation.'
How does the Linux operating system generally refer to both processes and threads?,As 'jobs'.,As 'units'.,As 'tasks'.,As 'executables'.,"As 'processes only', without distinguishing threads.",C,"The text notes: 'Unlike many other operating systems, Linux does not distinguish between processes and threads, referring to both as tasks.'"
The Linux `clone()` system call can create tasks that behave more like processes or threads primarily depending on what?,The specific CPU architecture of the system.,The amount of available RAM at the time of the call.,The flags passed for resource sharing.,The user's permission level executing the call.,The compilation environment of the application.,C,"The text specifies: 'The Linux `clone()` system call can create tasks that behave more like processes or threads, depending on the flags passed for resource sharing.'"
