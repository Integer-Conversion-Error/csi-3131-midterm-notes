Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What entity do modern operating systems primarily schedule for CPU execution?,Processes,User-level threads,Kernel-level threads,Lightweight processes,Applications,C,"Modern operating systems schedule kernel-level threads, not processes."
How do user-level threads gain access to a CPU for execution?,They directly access the CPU.,They are managed and scheduled by the operating system kernel directly.,"They are mapped to kernel-level threads, possibly via a Lightweight Process (LWP).",They run independently of kernel-level threads.,They must first be converted into full processes.,C,"User-level threads are managed by a thread library and must be mapped to kernel-level threads (possibly via a lightweight process, LWP) to run on a CPU."
"In the context of thread scheduling, what defines Process-Contention Scope (PCS)?",The kernel schedules kernel-level threads among all threads in the system.,"The thread library schedules user-level threads onto available LWPs, with competition among threads within the same process.",Competition for the CPU occurs among all processes in the system.,Threads are scheduled directly onto the CPU without intermediate mapping.,Only a single thread from a process can run at a time.,B,"Process-contention scope (PCS) is where the thread library schedules user-level threads onto available LWPs, and competition for the CPU occurs among threads within the same process."
What characterizes System-Contention Scope (SCS) in thread scheduling?,User-level threads compete for CPU time within a single process.,The thread library manages scheduling exclusively.,"The kernel schedules kernel-level threads onto a CPU, with competition among all threads in the system.",Scheduling is limited to threads of the same priority level.,It applies only to many-to-one threading models.,C,"System-contention scope (SCS) is a method in which kernel schedules kernel-level threads onto a CPU, and competition for the CPU occurs among all threads in the system."
Which of the following is typically true regarding Process-Contention Scope (PCS) scheduling?,It guarantees time slicing among equal-priority threads.,It is solely managed by the operating system kernel.,It uses priority-based scheduling and preempts lower-priority threads.,Competition for the CPU occurs among all threads in the system.,It is the only scheduling scope used in one-to-one systems like Windows.,C,"PCS typically uses priority-based scheduling, preempting lower-priority threads."
"Under Process-Contention Scope (PCS), what is the guarantee regarding time slicing among equal-priority threads?",Time slicing is always guaranteed.,Time slicing is guaranteed only if there are enough LWPs.,There is no guarantee of time slicing.,Time slicing is managed by the kernel.,Time slicing only occurs for higher-priority threads.,C,"The text states that for PCS, there is 'No guarantee of time slicing among equal-priority threads'."
Which type of threading model system commonly schedules threads using *only* System-Contention Scope (SCS)?,Many-to-many models,Many-to-one models,One-to-one models,User-level only models,Hybrid models,C,"Systems using the one-to-one model (e.g., Windows, Linux) schedule threads using only SCS."
What Pthread constant is used to specify Process-Contention Scope (PCS) during thread creation?,PTHREAD_SCOPE_SYSTEM,PTHREAD_SCOPE_THREAD,PTHREAD_SCOPE_PROCESS,PTHREAD_SCOPE_KERNEL,PTHREAD_SCOPE_LWP,C,The POSIX Pthread API allows specifying PCS using PTHREAD_SCOPE_PROCESS.
Which Pthread constant is utilized to specify System-Contention Scope (SCS) when creating a thread?,PTHREAD_SCOPE_PROCESS,PTHREAD_SCOPE_USER,PTHREAD_SCOPE_LIBRARY,PTHREAD_SCOPE_SYSTEM,PTHREAD_SCOPE_GLOBAL,D,The POSIX Pthread API allows specifying SCS using PTHREAD_SCOPE_SYSTEM.
"On many-to-many threading systems, what is the effect of using PTHREAD_SCOPE_PROCESS for user-level thread scheduling?",It creates and binds an LWP for each user-level thread.,It causes the kernel to schedule user-level threads directly.,It schedules user-level threads onto LWPs managed by the thread library.,It forces all threads to run in System-Contention Scope.,It disables time slicing for equal-priority threads.,C,"On many-to-many systems, PTHREAD_SCOPE_PROCESS schedules user-level threads onto LWPs managed by the thread library."
"When PTHREAD_SCOPE_SYSTEM is used on a many-to-many threading system, what is the resulting behavior?",User-level threads are scheduled by the thread library onto available LWPs.,It effectively uses a one-to-one policy by creating and binding an LWP for each user-level thread.,Threads compete for the CPU only within their own process.,The system switches to a many-to-one model.,User-level threads are not mapped to kernel-level threads.,B,"PTHREAD_SCOPE_SYSTEM on many-to-many systems creates and binds an LWP for each user-level thread, effectively using a one-to-one policy."
Which pair of functions is used in the Pthread API to set and get the contention scope of a thread's attributes?,pthread_create() and pthread_join(),pthread_setscope() and pthread_getscope(),pthread_attr_setscope() and pthread_attr_getscope(),pthread_config_scope() and pthread_query_scope(),set_thread_scope() and get_thread_scope(),C,The functions for setting/getting contention scope are pthread_attr_setscope() and pthread_attr_getscope().
Which operating systems are mentioned as only allowing PTHREAD_SCOPE_SYSTEM for thread scheduling?,Windows and Solaris,Linux and macOS,UNIX and BSD,Android and iOS,IBM AIX and HP-UX,B,"Some systems (e.g., Linux, macOS) only allow PTHREAD_SCOPE_SYSTEM."
