Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following best describes a 'soft real-time system'?,"It guarantees that a critical real-time process will be serviced by its deadline, or it's considered a failure.",It provides a strict guarantee on when a critical real-time process will be scheduled.,It offers preference to critical real-time processes over noncritical ones but provides no strict guarantee on scheduling time.,It prioritizes noncritical processes to ensure overall system stability.,"It uses a first-come, first-served policy for all processes, irrespective of priority.",C,"Soft real-time systems provide no guarantee on when a critical real-time process will be scheduled, only preference over noncritical processes."
What is the defining characteristic of a 'hard real-time system'?,"It prioritizes processes based on their CPU burst time, not their deadlines.",It allows critical processes to miss their deadlines occasionally without system failure.,"It has stricter requirements, where a task must be serviced by its deadline, or it is considered a failure.",It guarantees that all processes will receive an equal share of CPU time.,It relies solely on a round-robin scheduling policy for all tasks.,C,"Hard real-time systems have stricter requirements; a task must be serviced by its deadline, or it's considered a failure."
What does 'event latency' refer to in real-time systems?,The total time a process waits in the ready queue.,The time elapsed from when an event occurs to when it is serviced.,The delay between a user input and system response in non-real-time systems.,The time it takes for a CPU to switch between two different processes.,The period during which interrupts are disabled.,B,Event latency is defined as the time elapsed from when an event occurs to when it is serviced.
Which type of latency measures the time from an interrupt arrival at the CPU to the start of the interrupt service routine (ISR)?,Dispatch latency,Event latency,Scheduling latency,Interrupt latency,Processing latency,D,Interrupt latency is the time from interrupt arrival at CPU to the start of the interrupt service routine (ISR).
"For hard real-time systems, how must interrupt latency be managed?",It can vary widely and does not need to be bounded.,It must be maximized to allow other processes to run.,It must be minimized and bounded.,It is not a critical factor in hard real-time systems.,Interrupts should be disabled for extended periods.,C,"Interrupt latency must be minimized and bounded for hard real-time systems. Also, interrupts should be disabled for very short periods."
What is 'dispatch latency'?,The time a process waits for I/O completion.,The time for the scheduling dispatcher to stop one process and start another.,The total time from process creation to termination.,The delay introduced by context switching overhead in non-real-time systems.,The time it takes for an interrupt to be recognized by the CPU.,B,Dispatch latency is the time for the scheduling dispatcher to stop one process and start another.
Which of the following is typically used to achieve minimized dispatch latency in real-time systems?,Non-preemptive kernels,Batch processing systems,Preemptive kernels,Maximizing interrupt disabling periods,Large time slices for all processes,C,"Minimized dispatch latency is achieved with preemptive kernels, which allow a higher-priority process to interrupt a lower-priority one immediately."
What are the two phases that comprise dispatch latency?,Arrival phase and service phase,Ready phase and running phase,Conflict phase and dispatch phase,Interrupt phase and processing phase,Blocking phase and unblocking phase,C,"Dispatch latency has a conflict phase (preemption of kernel processes, release of resources by low-priority processes) and a dispatch phase (scheduling high-priority process)."
What type of scheduling algorithm must real-time OS schedulers support to respond immediately to real-time processes?,Time-sharing with fixed time slices,"Non-preemptive, shortest-job-first",Priority-based with preemption,Round-robin without priorities,"First-come, first-served only",C,Real-time OS schedulers must support a priority-based algorithm with preemption to respond immediately to real-time processes.
"What does a preemptive, priority-based scheduler guarantee on its own?",Hard real-time functionality,Strict deadlines for all tasks,Optimal CPU utilization for all scenarios,Only soft real-time functionality,Equal CPU distribution among all processes,D,"Providing a preemptive, priority-based scheduler guarantees only soft real-time functionality. Hard real-time systems require additional features."
"For a periodic real-time task, if its processing time is $t$, deadline is $d$, and period is $p$, what is the correct relationship between these values?",$t > d > p$,$p > d > t$,$0 \le t \le d \le p$,$t + d = p$,$d = p - t$,C,"For periodic tasks, the relationship between processing time ($t$), deadline ($d$), and period ($p$) is $0 \le t \le d \le p$."
What is the 'rate' of a periodic real-time task?,Its processing time ($t$).,Its deadline ($d$).,The inverse of its period ($1/p$).,The sum of its processing time and deadline ($t+d$).,The frequency of its preemption.,C,"The rate of a periodic task is $1/p$, where $p$ is its period."
What is the purpose of an 'admission-control' algorithm in real-time scheduling?,To dynamically adjust the priorities of all running processes.,To ensure that all processes run for an equal amount of time.,"To allow a process to start only if its completion by deadline can be guaranteed; otherwise, it rejects the request.",To place processes into a FIFO queue upon arrival.,To determine the optimal CPU utilization bound for a system.,C,"An admission-control algorithm admits a process only if the scheduler can guarantee completion by its deadline; otherwise, it rejects the request."
How does the Rate-Monotonic scheduling algorithm assign priorities to periodic tasks?,"Dynamically, based on their remaining processing time.","Statically, based on their inverse period (shorter period = higher priority).","Dynamically, based on their earliest deadline.","Statically, based on their total processing time (longer time = higher priority).","Randomly, to ensure fairness.",B,"Rate-monotonic scheduling assigns priorities statically based on its period: shorter period = higher priority (i.e., inversely based on its period)."
What is a key assumption made by the Rate-Monotonic scheduling algorithm?,Processes are not periodic.,CPU utilization can always reach 100%.,Processing time is constant for each CPU burst.,Priorities are adjusted dynamically.,All tasks have the same deadline.,C,Rate-Monotonic scheduling assumes processing time is constant for each CPU burst.
What is the optimality claim for Rate-Monotonic scheduling?,It can schedule any set of processes to 100% CPU utilization.,It is optimal for dynamic priority policies.,"If a set of processes cannot be scheduled by rate-monotonic, it cannot be scheduled by any other static-priority algorithm.",It always guarantees earliest deadlines are met.,It minimizes dispatch latency in all cases.,C,"Rate-Monotonic is considered optimal because if a set of processes cannot be scheduled by rate-monotonic, it cannot be scheduled by any other static-priority algorithm."
What is the worst-case CPU utilization bound for $N$ processes under Rate-Monotonic scheduling?,$1/N$,$N 	imes (2^{1/N} - 1)$,$1 - N 	imes (2^{1/N} - 1)$,$100\% / N$,$N / (2^{1/N} - 1)$,B,"The worst-case CPU utilization for $N$ processes under Rate-Monotonic scheduling is $N\left( {{2^{1/N}} - 1} ight){m{.}}$"
"As the number of processes ($N$) approaches infinity, what percentage does the worst-case CPU utilization under Rate-Monotonic scheduling approach?",100%,83%,69%,50%,0%,C,"As $N 	o \infty$, the worst-case CPU utilization approaches 69%."
How does Earliest-Deadline-First (EDF) scheduling assign priorities?,"Statically, based on the process's period.","Dynamically, based on the process's remaining execution time.","Dynamically, based on the earliest deadline (earlier deadline = higher priority).","Statically, based on the process's initial arrival time.","Randomly, to distribute CPU load evenly.",C,EDF scheduling assigns priorities dynamically based on deadline: earlier deadline = higher priority.
"Which of the following is NOT a requirement for processes under Earliest-Deadline-First (EDF) scheduling, unlike Rate-Monotonic scheduling?",Processes must be periodic.,Processes must announce their deadline when runnable.,Priorities are adjusted dynamically.,Processes can have varying CPU burst times.,The system aims to meet deadlines.,A,"Unlike rate-monotonic, EDF does not require processes to be periodic or have constant CPU burst times."
"Theoretically, what is the maximum CPU utilization achievable with Earliest-Deadline-First (EDF) scheduling?",69%,83%,90%,100%,Dependent on the number of processes.,D,"Theoretically, EDF is optimal and can schedule processes to meet deadlines with 100% CPU utilization."
How do Proportional Share schedulers allocate CPU time?,"They allocate shares among applications, so an application with N shares out of T total receives N/T of the total processor time.","They allocate CPU time strictly based on process priority, ignoring shares.","They use a round-robin approach, giving equal time slices to all applications.",They prioritize tasks with the shortest remaining processing time.,They only admit applications if they can achieve 100% CPU utilization.,A,Proportional share schedulers allocate shares among applications. An application with $N$ shares out of a total $T$ shares receives $N/T$ of the total processor time.
What is a key feature of Proportional Share scheduling regarding client admission?,It admits all clients regardless of resource availability.,It only admits clients if they are hard real-time tasks.,"It works with an admission-control policy, admitting a client only if sufficient shares are available.",It uses a FIFO queue for client admission.,It requires clients to be periodic tasks.,C,"Proportional share scheduling works with an admission-control policy, where a client is admitted only if sufficient shares are available."
"According to POSIX.1b, which scheduling class uses a first-come, first-served policy with no time slicing among equal-priority threads?",SCHED_RR,SCHED_OTHER,SCHED_FIFO,SCHED_DYNAMIC,SCHED_BATCH,C,"SCHED_FIFO defines a First-come, first-served policy with a FIFO queue and no time slicing among equal-priority threads."
Which POSIX real-time scheduling class is similar to SCHED_FIFO but provides time slicing among equal-priority threads?,SCHED_FIFO,SCHED_OTHER,SCHED_RR,SCHED_BATCH,SCHED_NORMAL,C,"SCHED_RR is a Round-robin policy, similar to SCHED_FIFO but provides time slicing among equal-priority threads."
Which POSIX API function is used to retrieve the scheduling policy of a thread attribute object?,pthread_attr_setschedpolicy,pthread_create,pthread_attr_getschedpolicy,pthread_join,pthread_exit,C,"pthread_attr_getschedpolicy(pthread_attr_t *attr, int *policy) is used for getting the scheduling policy."
