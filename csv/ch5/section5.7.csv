Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
"In the context of operating system scheduling examples, what does the term ""process scheduling"" generally refer to for Solaris and Windows operating systems?",User-level threads,Application processes,Kernel threads,Background services,Graphical user interface tasks,C,"The text states, ""The term 'process scheduling' is used generally, referring to kernel threads (Solaris, Windows) or tasks (Linux)."""
Which of the following best describes the evolution of the Linux scheduler prior to Version 2.6.23?,"Started with O(1) scheduler, then moved to traditional UNIX scheduling.",Always used the Completely Fair Scheduler (CFS) since its inception.,"Began with traditional UNIX scheduling, then introduced the O(1) scheduler, and later CFS.",Directly transitioned from traditional UNIX scheduling to CFS.,Focused only on single-processor systems before Version 2.5.,C,"Linux scheduling history shows: 'Prior to Version 2.5: Traditional UNIX scheduling', 'Version 2.5: Introduced O(1) scheduler', and 'Version 2.6.23: Completely Fair Scheduler (CFS) became default'."
What significant improvements were introduced with the Linux O(1) scheduler in Version 2.5?,Reduced real-time latency and dynamic priority adjustments.,"Constant time scheduling, improved SMP support, processor affinity, and load balancing.",Integration of user-mode scheduling and the Concurrency Runtime.,Introduction of scheduling domains and NUMA node awareness.,Strict adherence to POSIX real-time standards only.,B,"The O(1) scheduler 'Introduced O(1) scheduler (constant time regardless of tasks), improved SMP support, processor affinity, and load balancing'."
On what fundamental concept is Linux scheduling based?,A single global priority queue for all tasks.,Strict time-slicing with equal quantum for all tasks.,"Scheduling classes, each with a specific priority.",User-defined priorities that override kernel settings.,A purely round-robin algorithm for all tasks.,C,"The text states, 'Linux scheduling is based on scheduling classes, each with a specific priority'."
Which two standard scheduling classes are implemented by default in Linux kernels?,Interactive and Time-sharing,System and Fixed-priority,Fair share and Real-time,Default (CFS) and Real-time,Variable and Real-time,D,Standard Linux kernels implement two classes: default (CFS) and real-time.
"In the Linux Completely Fair Scheduler (CFS), how is a proportion of CPU time assigned to each task?","Based on its process ID, with lower IDs getting more time.","Strictly on a round-robin basis, irrespective of task type.","According to its nice value, which influences its relative scheduling priority.",By assigning a fixed time quantum to every runnable task.,By dynamically adjusting priority based on I/O wait times only.,C,The CFS scheduler 'Assigns a proportion of CPU time to each task based on its nice value'.
What is the range and meaning of the 'nice value' used in the Linux CFS scheduler?,"0 to 100, where higher values indicate higher priority.","-20 to +19, where a numerically lower value indicates higher priority.","1 to 32, where values correspond to fixed time quanta.","0 to 99, used exclusively for real-time tasks.","-10 to +10, where values are dynamically adjusted by the kernel.",B,The nice value range is '-20 to +19; lower value = higher priority'.
What concept in the Linux CFS scheduler refers to an interval during which every runnable task should run at least once?,Time quantum,Virtual run time,Targeted latency,Scheduling epoch,Dynamic priority adjustment,C,The text defines 'targeted latency' as 'an interval during which every runnable task should run at least once'.
How does the Linux CFS scheduler primarily select the next task to run?,It selects the task that has been waiting the longest.,It chooses the task with the highest static priority.,It selects the task with the smallest virtual run time (vruntime).,It randomly picks a task from the runnable queue.,It prioritizes tasks based on their memory usage.,C,The CFS scheduler 'Selects the task with the smallest vruntime to run next'.
How does the Linux CFS scheduler typically handle I/O-bound tasks compared to CPU-bound tasks?,It gives CPU-bound tasks higher priority due to their longer burst times.,It assigns both types of tasks equal priority to ensure fairness.,It gives I/O-bound tasks higher priority because their vruntime is lower due to shorter bursts.,It delays I/O-bound tasks to allow CPU-bound tasks to complete faster.,It migrates I/O-bound tasks to different NUMA nodes.,C,CFS 'Handles I/O-bound vs. CPU-bound tasks by giving I/O-bound tasks higher priority due to their lower vruntime (they run for shorter bursts)'.
"What data structure does the Linux CFS scheduler use to store runnable tasks, and how is it keyed?","A hash table, keyed by process ID.","A linked list, ordered by arrival time.","A red-black tree (balanced binary search tree), keyed by vruntime.","A simple array, indexed by nice value.","A priority queue, keyed by remaining time quantum.",C,"CFS 'Uses a red-black tree (balanced binary search tree) to store runnable tasks, keyed by vruntime'."
Which POSIX standards are used by Linux for real-time scheduling?,SCHED_BATCH or SCHED_IDLE,SCHED_OTHER or SCHED_RR,SCHED_FIFO or SCHED_RR,SCHED_NORMAL or SCHED_REALTIME,SCHED_PRIORITY or SCHED_QUANTUM,C,Linux real-time scheduling 'Uses POSIX standard (SCHED_FIFO or SCHED_RR)'.
"In Linux, what are the priority ranges for real-time and normal tasks, respectively?","100-139 for real-time, 0-99 for normal","0-15 for real-time, 16-31 for normal","0-99 for real-time (static), 100-139 for normal (based on nice values)","-20 to +19 for real-time, 0 to 99 for normal","0-100 for real-time, 101-200 for normal",C,"Priority ranges: '0-99 for real-time (static), 100-139 for normal (based on nice values)'. Lower numeric value means higher priority."
What are the primary goals of the CFS load balancing mechanism in Linux?,To prioritize I/O-bound tasks and reduce context switches.,To ensure every task runs once per targeted latency and reduce nice values.,"To equalize load among processing cores, be NUMA-aware, and minimize thread migration.",To increase the virtual run time of CPU-bound tasks and avoid preemption.,To solely balance threads based on their static real-time priorities.,C,"CFS load balancing 'Equalizes load among processing cores, is NUMA-aware, and minimizes thread migration'."
What is a 'scheduling domain' in the context of Linux CFS load balancing?,A specific priority level assigned to a scheduling class.,An interval of time during which load balancing must occur.,A set of CPU cores that can be balanced against each other based on shared resources.,A user-defined group of tasks that share a common nice value.,A network boundary that prevents thread migration.,C,"Scheduling domains are defined as 'sets of CPU cores balanced against each other based on shared resources (e.g., L1, L2, L3 caches, NUMA nodes)'."
What type of scheduling algorithm does Windows use?,Pure round-robin,"First-come, first-served","Priority-based, preemptive","Non-preemptive, shortest job first",Fair-share based on CPU shares,C,"Windows uses a 'priority-based, preemptive scheduling algorithm'."
"In Windows, what is the role of the 'dispatcher'?",To manage system calls and interrupts.,To handle memory allocation for new processes.,To handle scheduling of threads.,To perform disk I/O operations.,To translate user-mode instructions to kernel-mode.,C,"The text states, 'The dispatcher handles scheduling'."
"What is the 32-level priority scheme in Windows, and which priority level is reserved for the memory management thread?","Variable class (0-15), Real-time class (16-31); Priority 31 for memory management.","Variable class (16-31), Real-time class (1-15); Priority 0 for memory management.","Variable class (1-15), Real-time class (16-31); Priority 0 for memory management.","Variable class (0-31), no specific priority for memory management.","Fixed-priority class (1-15), Dynamic class (16-31); Priority 1 for memory management.",C,"The 32-level priority scheme includes 'Variable class: priorities 1-15', 'Real-time class: priorities 16-31', and 'Priority 0: memory management thread'."
What happens in Windows if the dispatcher does not find any ready thread to run?,The system enters a low-power sleep state.,The last running thread resumes execution.,It executes a special thread called the 'idle thread'.,It waits indefinitely for an interrupt.,It requests the user to start a new application.,C,The dispatcher 'executes an idle thread if no ready thread is found'.
"In Windows, under what circumstances is a variable-priority thread's priority typically lowered?",When it calls a blocking system call.,When it is released from a wait operation.,"When its time quantum expires, but never below its base priority.",When it becomes the foreground process.,When another thread with a numerically lower base priority becomes ready.,C,For variable-priority threads: 'priority lowered when quantum expires (never below base priority)'.
"What is User-Mode Scheduling (UMS) in Windows, introduced in Windows 7+?",A feature that allows the kernel to manage threads more efficiently by reducing context switches.,A system that enables applications to directly interact with hardware without kernel intervention.,A feature that allows applications to create and manage threads independently of the kernel.,A debugging tool that provides insights into kernel thread behavior.,A framework for managing graphical user interface events and processes.,C,UMS is defined as 'A Microsoft Windows 7 feature that allows applications to create and manage threads independently of the kernel'.
"What was the predecessor to User-Mode Scheduling (UMS) in Windows, and what was its limitation?",Processes; they had no way to manage threads.,Kernel threads; they required too much kernel intervention.,Fibers; they had limited use due to a shared thread environment block.,Tasks; they could not be mapped to kernel threads.,Lightweight processes; they lacked true concurrency.,C,Predecessor: 'fibers (limited use due to shared thread environment block)'.
What are SMT sets in the context of Windows multiprocessor scheduling?,A collection of threads waiting for I/O operations.,"Sets of logical processors on the same CPU core, such as hyper-threaded cores.",Groups of processes that share a common base priority.,A type of memory caching mechanism for faster thread access.,Virtual machines running on a single physical processor.,B,"SMT sets are defined as 'sets of logical processors on the same CPU core, e.g., hyper-threaded cores'."
How many scheduling classes does Solaris use for its priority-based thread scheduling?,Two,Three,Four,Five,Six,E,"Solaris uses priority-based thread scheduling with six classes: Time sharing (TS), Interactive (IA), Real time (RT), System (SYS), Fair share (FSS), Fixed priority (FP)."
"Which of the following is the default scheduling class in Solaris, and how does it manage priorities?",Real time; uses static priorities for guaranteed response.,System; reserved for kernel threads with fixed priorities.,Time sharing; dynamically alters priorities and time slices using a multilevel feedback queue.,Fair share; uses CPU shares instead of priorities for groups of processes.,Fixed priority; has dynamically adjusted priorities but fixed time slices.,C,Default class: 'Time sharing. Dynamically alters priorities and time slices using a multilevel feedback queue'.
"In Solaris, what is the inverse relationship observed between priority and time quantum for Time sharing (TS) and Interactive (IA) threads?",Higher priority means larger time quantum.,Higher priority means smaller time quantum.,Priority and time quantum are unrelated.,"Only time quantum changes, priority remains static.",Time quantum only applies to real-time threads.,B,"The dispatch table for TS/IA threads indicates an 'Inverse relationship with priority' for the time quantum, meaning higher priority gets a smaller time slice as per the 'multilevel feedback queue' description for Time sharing."
Which Solaris scheduling class has the highest priority and guarantees bounded response time for processes?,Time sharing (TS),Interactive (IA),Real time (RT),System (SYS),Fixed priority (FP),C,"Real-time class: 'Highest priority; real-time processes run before any other class, guaranteeing bounded response time'."
What is the primary characteristic that differentiates the Fixed-priority class from the Time-sharing class in Solaris 9+?,"Fixed-priority uses CPU shares, while Time-sharing uses priorities.","Fixed-priority allows dynamic priority adjustments, while Time-sharing does not.","Fixed-priority has static priorities that are not dynamically adjusted, unlike Time-sharing.","Fixed-priority is for kernel threads, Time-sharing is for user threads.","Fixed-priority guarantees bounded response time, Time-sharing does not.",C,"Fixed-priority class (Solaris 9+): 'Same priority range as time-sharing, but priorities are not dynamically adjusted'."
"In Solaris's Fair-share class (Solaris 9+), what concept is used instead of priorities to make scheduling decisions?",Nice values,Virtual run time,CPU shares,Targeted latency,Process IDs,C,Fair-share class (Solaris 9+): 'Uses CPU shares (entitlement to CPU resources) instead of priorities'.
How did the thread model in Solaris change with Solaris 9?,It introduced a many-to-one model.,It switched from a one-to-one model to a many-to-many model.,It switched from a many-to-many model to a one-to-one model.,It started supporting only user-mode threads.,It eliminated the concept of threads entirely.,C,"Solaris 'traditionally used many-to-many model, switched to one-to-one model with Solaris 9'."
What is the definition of 'scheduling classes' in Linux?,A method to group tasks based on their CPU utilization.,"A system where each class is assigned a specific priority, forming the basis of scheduling.",A historical term for kernel threads in older Linux versions.,A set of CPU cores balanced against one another.,A mechanism for real-time task priority adjustments.,B,The glossary defines 'scheduling classes' as 'Scheduling in the Linux system is based on scheduling classes - each class is assigned a specific priority.'
What does a numerically lower 'nice value' signify in Linux scheduling?,A lower CPU utilization.,A lower relative scheduling priority.,A higher relative scheduling priority.,A longer virtual run time.,A larger time quantum.,C,The glossary defines 'nice value' as 'where a numerically lower nice value indicates a higher relative scheduling priority.'
"According to the glossary, what is 'targeted latency' in Linux scheduling?",The maximum time a task can wait before execution.,The total CPU time allocated to a task.,An interval during which every runnable thread should run at least once.,The time it takes for a task to complete an I/O operation.,The delay introduced by context switching.,C,The glossary defines 'targeted latency' as 'an interval of time during which every runnable thread should run at least once.'
What is 'virtual run time' (vruntime) in Linux scheduling?,The actual CPU time a task has spent running.,"A metric that records how long each task has run, decaying based on priority.",A measure of a task's priority relative to other tasks.,The remaining time quantum for a task.,The time a task spends in a blocked state.,B,The glossary defines 'virtual run time' as 'A Linux scheduling aspect in which it records how long each task has run by maintaining the virtual run time of each task.' The main text adds that it 'decays based on priority (lower priority = higher decay rate)'.
What is the purpose of a 'scheduling domain' in Linux?,To define the scope of real-time priorities.,To group tasks with similar nice values.,To specify which threads can access shared memory.,To define a set of CPU cores that can be balanced against one another.,To control the dynamic adjustment of priorities.,D,The glossary defines 'scheduling domain' as 'A set of CPU cores that can be balanced against one another.'
"In Windows, what is an 'idle thread'?",A thread that is waiting for an I/O operation.,A thread that has terminated and is awaiting cleanup.,A special thread executed by the dispatcher if no ready thread is found.,A background thread performing low-priority system maintenance.,A thread that has been preempted but not yet scheduled.,C,"The glossary defines 'idle thread' as 'If no ready thread is found, the dispatcher will execute a special thread called the idle thread that runs on the CPU until the CPU is needed for some other activity.'"
What is Microsoft Windows' 'Concurrency Runtime' (ConcRT) primarily designed for?,Managing network connections and protocols.,Providing a framework for task-based parallelism on multicore processors in C++.,Handling graphical rendering and user interface events.,Implementing a secure boot process for Windows.,Optimizing memory usage for single-threaded applications.,B,The glossary defines 'Concurrency Runtime (ConcRT)' as 'A Microsoft Windows concurrent programming framework for C++ that is designed for task-based parallelism on multicore processors.'
"In Solaris's Fair-share class, what are 'shares'?",The number of processes within a given project.,A measure of a process's current CPU utilization.,A concept of CPU entitlement used instead of priorities for scheduling decisions.,The proportion of memory allocated to a process.,The time quantum assigned to a thread.,C,"The glossary defines 'shares' as 'A scheduling concept in which CPU shares instead of priorities are used to make scheduling decisions, providing an entitlement to CPU time for a process or a set of processes.'"
What is a 'project' in the context of Solaris scheduling?,"A single, high-priority process.",A group of CPU cores assigned to a specific task.,"A set of processes grouped together for scheduling purposes, particularly in the Fair-share class.",A system-level daemon responsible for resource management.,A temporary state a thread enters when waiting for I/O.,C,The glossary defines 'project' as 'A Solaris scheduling concept in which processes are grouped into a project and the project is scheduled.'
