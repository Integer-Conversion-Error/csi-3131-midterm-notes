Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary task of CPU scheduling?,Managing memory allocation for processes.,Selecting a waiting process from the ready queue and allocating the CPU to it.,Ensuring data consistency across multiple processors.,Handling I/O operations for active processes.,Terminating processes that have completed their execution.,B,CPU scheduling is the task of selecting a waiting process from the ready queue and allocating the CPU to it.
Which component is responsible for allocating the CPU to the selected process in a CPU scheduling system?,The kernel,The memory manager,The dispatcher,The process control block,The interrupt handler,C,The CPU is allocated to the selected process by the dispatcher.
In which type of scheduling algorithm can the CPU be taken away from a process before it voluntarily relinquishes control?,Nonpreemptive scheduling,Cooperative scheduling,Preemptive scheduling,Batch scheduling,"First-come, first-served (FCFS) scheduling",C,Preemptive scheduling is where the CPU can be taken away from a process.
What is a characteristic of almost all modern operating systems regarding CPU scheduling?,They primarily use nonpreemptive scheduling.,They require processes to voluntarily relinquish the CPU.,They are preemptive.,"They only use First-come, first-served (FCFS) scheduling.",They prioritize I/O-bound tasks over CPU-bound tasks in all scenarios.,C,Almost all modern operating systems are preemptive.
Which of the following is NOT one of the standard criteria used to evaluate CPU scheduling algorithms?,CPU utilization,Throughput,Memory footprint,Turnaround time,Response time,C,"The five criteria listed are CPU utilization, throughput, turnaround time, waiting time, and response time. Memory footprint is not among them."
"What is a primary disadvantage of First-come, first-served (FCFS) scheduling, despite its simplicity?",It requires complex CPU burst prediction.,It cannot be used in preemptive systems.,It can cause short processes to wait for very long processes.,It does not consider process priority.,It has the highest overhead among all algorithms.,C,FCFS scheduling is simple but can cause short processes to wait for very long processes.
Which CPU scheduling algorithm is provably optimal in providing the shortest average waiting time?,"First-come, first-served (FCFS)",Round-robin (RR),Shortest-job-first (SJF),Priority scheduling,Earliest-deadline-first (EDF),C,"Shortest-job-first (SJF) scheduling is provably optimal, providing the shortest average waiting time."
What is the main reason why implementing Shortest-job-first (SJF) scheduling is difficult in practice?,It requires constant context switching.,It does not support preemptive execution.,Predicting the length of the next CPU burst is difficult.,It suffers from starvation for long processes.,It is only suitable for batch systems.,C,Implementing SJF scheduling is difficult because predicting the length of the next CPU burst is difficult.
How does Round-robin (RR) scheduling handle a process that does not relinquish the CPU before its time quantum expires?,The process is terminated immediately.,The process's priority is reduced.,"The process is preempted, and another process is scheduled.",The time quantum is extended for that process.,The process is moved to a lower-priority queue.,C,"If the process does not relinquish the CPU before its time quantum expires, the process is preempted, and another process is scheduled."
"When multiple processes have the same priority in a priority scheduling system, how are they typically scheduled?",They are assigned random CPU times.,They are scheduled using only Round-robin (RR).,"They are scheduled using only First-come, first-served (FCFS).",They can be scheduled in FCFS order or using RR scheduling.,They are immediately terminated to resolve the conflict.,D,Processes with the same priority can be scheduled in FCFS order or using RR scheduling.
"Which scheduling approach partitions processes into several separate queues arranged by priority, with the scheduler executing processes in the highest-priority queue?",Round-robin scheduling,Multilevel queue scheduling,Proportional share scheduling,Earliest-deadline-first (EDF) scheduling,Shortest-job-first (SJF) scheduling,B,"Multilevel queue scheduling partitions processes into several separate queues arranged by priority, and the scheduler executes the processes in the highest-priority queue."
A key feature of multilevel queue scheduling is that:,All queues must use the same scheduling algorithm.,Processes can freely migrate between different queues.,Only batch processes can be in the highest-priority queue.,Different scheduling algorithms may be used in each queue.,It only supports nonpreemptive scheduling.,D,Different scheduling algorithms may be used in each queue in multilevel queue scheduling.
What is the distinguishing characteristic of multilevel feedback queues compared to standard multilevel queues?,They only allow nonpreemptive scheduling.,They only support two priority levels.,A process may migrate between different queues.,All processes must have a fixed priority.,They do not use time quantums.,C,"Multilevel feedback queues are similar to multilevel queues, except that a process may migrate between different queues."
"From the perspective of the operating system, what does each hardware thread on a multicore processor appear to be?",A virtual machine,A separate physical CPU,A logical CPU,An I/O device,A memory module,C,"From the perspective of the operating system, each hardware thread appears to be a logical CPU."
"While load balancing on multicore systems aims to equalize loads, what potential drawback is associated with migrating threads between cores?",It always reduces overall system throughput.,It increases the likelihood of deadlocks.,It may invalidate cache contents and therefore may increase memory access times.,It significantly reduces the number of available logical CPUs.,It can only be done in nonpreemptive systems.,C,Migrating threads between cores to balance loads may invalidate cache contents and therefore may increase memory access times.
What is the primary objective of soft real-time scheduling?,To provide absolute timing guarantees for tasks.,To ensure all tasks complete within their deadlines without fail.,To give priority to real-time tasks over non-real-time tasks.,To exclusively schedule periodic tasks.,To minimize the average waiting time for all processes.,C,Soft real-time scheduling gives priority to real-time tasks over non-real-time tasks.
What is a defining characteristic of hard real-time scheduling?,It allows for occasional deadline misses.,It focuses on maximizing CPU utilization.,It provides timing guarantees for real-time tasks.,It prioritizes non-real-time tasks when system load is high.,It is primarily used in general-purpose operating systems.,C,Hard real-time scheduling provides timing guarantees for real-time tasks.
Rate-monotonic real-time scheduling schedules periodic tasks using what type of policy?,"Dynamic priority, nonpreemptive","Static priority, nonpreemptive","Dynamic priority, preemptive","Static priority, preemptive",FCFS based on task arrival time,D,Rate-monotonic real-time scheduling schedules periodic tasks using a static priority policy with preemption.
How does Earliest-deadline-first (EDF) scheduling assign priorities to tasks?,Based on the shortest processing time.,According to their memory requirements.,Randomly to ensure fairness.,"According to deadline, where earlier deadlines mean higher priority.",Based on the task's arrival time.,D,"EDF scheduling assigns priorities according to deadline. The earlier the deadline, the higher the priority."
"If an application is allocated N shares of time in a proportional share scheduling system, what is it ensured of receiving?",Exactly N time quantums in every cycle.,A guaranteed minimum of N processes running simultaneously.,"N / T of the total processor time, where T is the total number of shares.",Priority over all applications with fewer than N shares.,Exclusive access to the CPU for a duration of N seconds.,C,"If an application is allocated N shares of time, it is ensured of having N / T of the total processor time."
What is the primary concept behind the Linux Completely Fair Scheduler (CFS)?,It uses a 32-level priority scheme.,It strictly adheres to FCFS for all tasks.,It assigns a proportion of CPU processing time to each task based on its `virtual runtime (vruntime)` value.,It schedules tasks based on their I/O burst length.,It partitions tasks into multiple queues with fixed priorities.,C,The Linux Completely Fair Scheduler (CFS) assigns a proportion of CPU processing time to each task based on the `virtual runtime (vruntime)` value associated with each task.
What type of priority scheme does Windows scheduling use to determine the order of thread scheduling?,"A nonpreemptive, 5-level priority scheme.","A preemptive, 32-level priority scheme.","A dynamic, 10-level priority scheme based on I/O.","A static, 6-class priority scheme.",A FCFS-based scheme with aging.,B,"Windows scheduling uses a preemptive, 32-level priority scheme to determine the order of thread scheduling."
"In Solaris scheduling, how are CPU-intensive threads generally prioritized and given time quantums?",They are assigned higher priorities and shorter time quantums.,They are assigned lower priorities and longer time quantums.,They are scheduled using an FCFS approach exclusively.,They are migrated between queues frequently to improve response time.,They are given guaranteed timing budgets.,B,"In Solaris, CPU-intensive threads are generally assigned lower priorities (and longer time quantums)."
"In Solaris scheduling, how are I/O-bound threads typically prioritized and given time quantums?","Lower priority, longer time quantums.","Higher priority, longer time quantums.","Lower priority, shorter time quantums.","Higher priority, shorter time quantums.","They are handled by a separate I/O scheduler, not CPU scheduler.",D,"In Solaris, I/O-bound threads are usually assigned higher priorities (with shorter time quantums)."
"What methods, besides analytical modeling, can be used to evaluate a CPU scheduling algorithm?",Only direct observation in a live production environment.,Modeling and simulations.,User surveys exclusively.,Hardware benchmark tests only.,Financial cost analysis.,B,Modeling and simulations can be used to evaluate a CPU scheduling algorithm.
