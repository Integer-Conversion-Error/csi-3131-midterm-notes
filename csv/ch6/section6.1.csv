Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary characteristic of a 'race condition' in concurrent systems?,It occurs when a system runs out of memory due to excessive concurrent processes.,"It describes a situation where processes compete for CPU time, leading to slow performance.","It happens when shared data access is uncontrolled, potentially leading to data corruption.",It is a deliberate security vulnerability introduced by parallel threads.,It refers to a process completing its execution faster than expected.,C,"A race condition occurs when multiple threads or processes access and manipulate shared data concurrently, and the final outcome depends on the specific order of execution, often leading to incorrect or corrupted data if not properly controlled."
What is the main purpose of 'process synchronization' in concurrent programming?,To increase the speed of individual process execution by minimizing overhead.,To ensure that all processes start and end their execution at precisely the same time.,To prevent unauthorized access to system resources by non-privileged processes.,To control access to shared data and prevent race conditions.,To convert sequential programs into parallel ones automatically.,D,"Process synchronization involves providing tools and mechanisms to control the access of multiple processes or threads to shared data, thereby preventing race conditions and maintaining data consistency."
What potential negative consequence can arise from the incorrect use of synchronization tools?,Enhanced system security against external attacks.,Automatic load balancing across all available CPU cores.,Improved data compression and storage efficiency.,"Poor system performance, including the possibility of deadlock.",Reduced energy consumption of the CPU.,D,"While synchronization is crucial, its incorrect application can lead to significant issues such as poor system performance due to excessive overhead or, more critically, deadlock, where processes become permanently blocked."
Which of the following best defines a 'cooperating process'?,A process that exclusively uses its private memory space and does not interact with others.,A process that is designed to run only on a single CPU core without interruption.,A process that can affect or be affected by other processes executing in the system.,"A process that operates entirely in kernel mode, hidden from user applications.",A process that always yields its CPU time to higher-priority processes.,C,"A cooperating process is one whose execution can influence or be influenced by other processes running concurrently, typically through shared resources or inter-process communication."
How do cooperating processes typically share data or information?,"Exclusively through local, non-shared CPU registers.",By replicating data across isolated logical address spaces for each process.,Through a shared logical address space (code and data) or via shared memory/message passing.,Only by writing data to a persistent storage device like a hard drive.,"Via secure, encrypted network connections, even within the same machine.",C,Cooperating processes achieve data sharing by either sharing a common logical address space (where code and data segments are accessible to multiple processes) or by using explicit inter-process communication mechanisms like shared memory or message passing.
What is the consequence of concurrent access to shared data by cooperating processes if not properly controlled?,Increased system throughput and efficiency.,Guaranteed data consistency across all processes.,"Data inconsistency, leading to incorrect results.",Automatic detection and correction of programming errors.,Reduced CPU utilization and power consumption.,C,"Without proper control mechanisms, concurrent access to shared data can lead to data inconsistency, where the value of the shared data becomes incorrect or unpredictable due to interleaved operations."
"In the context of concurrent processes, what is the key difference between 'concurrent execution' and 'parallel execution'?","Concurrent execution involves multiple CPUs, while parallel execution is on a single CPU.",Concurrent execution is sequential execution with rapid switching; parallel execution is simultaneous on separate cores.,Concurrent execution only applies to kernel processes; parallel execution applies to user processes.,"Parallel execution requires an operating system, while concurrent execution does not.",There is no functional difference; the terms are interchangeable.,B,"Concurrent execution means multiple processes appear to run at the same time through rapid CPU scheduling and switching. Parallel execution means multiple processes are truly running simultaneously on separate processing units (e.g., different CPU cores)."
"Consider the Bounded Buffer example where 'count' is a shared variable. If 'count' is 5, and both a producer (executing count++) and a consumer (executing count--) run concurrently, which of the following is NOT a possible incorrect outcome for 'count'?",4,5,6,"Expected result is 5, so 4 and 6 are incorrect outcomes.","All listed values (4, 5, 6) are possible due to interleaving.",B,"The expected result is 5. However, due to race conditions and interleaving of the machine instructions for `count++` and `count--`, the final value of `count` could incorrectly become 4 or 6. The question asks which is NOT a possible incorrect outcome. The value 5 is the expected correct outcome, not an incorrect one."
Which set of machine language instructions accurately represents the operation `count++` in a simplified model?,"read count, add 1, write count",register1 = count; register1 = register1 + 1; count = register1,increment count_atomic,count_new = count + 1,lock(count); count = count + 1; unlock(count),B,"The text explicitly states the three machine instructions: first, the value of count is loaded into a register; second, the register is incremented; and third, the updated value from the register is stored back into count. This sequence is crucial for understanding race conditions."
"Based on the provided example of interleaving for `count` (initially 5) between a producer (`count++`) and a consumer (`count--`), what is the final value of `count`?",5,6,4,Undefined,Depends on CPU speed,C,The example interleaving shows: T0 (P): `register1 = count` (5); T1 (P): `register1 = register1 + 1` (6); T2 (C): `register2 = count` (5); T3 (C): `register2 = register2 - 1` (4); T4 (P): `count = register1` (count becomes 6); T5 (C): `count = register2` (count becomes 4). The final operation is the consumer writing its incorrect result.
What is the fundamental requirement to prevent race conditions involving shared variables like 'count'?,"All processes must execute on separate, dedicated CPU cores.",The shared variable must be declared as a constant.,Only one process at a time should be allowed to manipulate the shared variable.,The operating system must prioritize processes accessing shared data.,All processes must complete their execution sequentially before another can start.,C,"To prevent race conditions, a critical section (the part of the code that accesses shared resources) must be protected such that only one process can execute it at any given time. This mutual exclusion ensures data integrity."
In which contexts are race conditions most frequently encountered?,"Only in single-threaded, batch processing systems.",Primarily in embedded systems with limited memory.,Frequently in operating systems (resource manipulation) and multithreaded applications (shared data on multicore systems).,Only in distributed systems where data is replicated across networks.,They are a theoretical concept with no practical implications.,C,"The text explicitly states that race conditions are frequent in OS (due to resource manipulation) and multithreaded applications (due to shared data on multicore systems), highlighting the crucial role of process synchronization."
What does the term 'coordination' specifically refer to in the context of process synchronization?,The speed at which processes are dispatched by the CPU scheduler.,The graphical arrangement of process icons on a user interface.,The ordering of the access to data by multiple threads or processes.,The total number of processes that can run simultaneously on a system.,The process of converting source code into machine-executable instructions.,C,"According to the glossary, 'coordination' is defined as the 'Ordering of the access to data by multiple threads or processes,' which is essential for maintaining data consistency."
