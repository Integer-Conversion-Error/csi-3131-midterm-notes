Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following statements accurately describes a 'race condition'?,"It occurs when processes concurrently access shared data, and the final result depends on the specific order of these accesses.",It always leads to a system deadlock.,It is a mechanism used to ensure mutual exclusion.,It describes a situation where a single process accesses its private data.,It refers to the speed at which a process executes its instructions.,A,"A race condition occurs when multiple processes access and manipulate shared data concurrently, and the outcome depends on the order of execution, often leading to corrupted values."
What is a potential consequence of a race condition?,Guaranteed mutual exclusion,Prevention of instruction reordering,Corrupted values of shared data,Automatic deadlock resolution,Increased system throughput,C,"Race conditions can lead to situations where the final value of shared data is incorrect or inconsistent because the concurrent accesses interfere with each other, resulting in corrupted values."
What defines a 'critical section' in concurrent programming?,A section of code that is executed only once during program execution.,A code segment where only local variables are manipulated.,"A code segment where shared data may be manipulated, potentially leading to a race condition.",A hardware component responsible for process scheduling.,A part of the operating system kernel that cannot be interrupted.,C,"A critical section is specifically defined as a code segment where shared data is accessed and modified, and where a race condition might occur if not properly synchronized."
What is the core challenge addressed by the 'critical-section problem'?,To maximize the number of processes accessing shared data simultaneously.,To eliminate all forms of inter-process communication.,To design a protocol for processes to synchronize their activity and cooperatively share data.,To prevent processes from ever entering a waiting state.,To ensure that all data is kept private to individual processes.,C,"The critical-section problem is about designing protocols that allow processes to cooperate safely when accessing shared resources, ensuring data integrity and proper synchronization."
Which requirement for a critical-section solution ensures that only one process is active in its critical section at any given time?,Progress,Bounded waiting,Mutual exclusion,Atomicity,Liveness,C,"Mutual exclusion is the fundamental requirement that guarantees that if one process is executing in its critical section, no other process can be executing in its critical section."
The requirement for a critical-section solution that states processes cooperatively determine which process enters its critical section next is known as:,Mutual exclusion,Bounded waiting,Fairness,Progress,Non-blocking,D,"Progress ensures that if no process is executing in its critical section and some processes wish to enter their critical sections, then only those processes that are not executing in their remainder sections can participate in the decision on which will enter its critical section next, and this decision cannot be postponed indefinitely."
What does the 'bounded waiting' requirement for a critical-section solution guarantee?,A limit on the total number of processes allowed to enter the critical section.,That a process will not have to wait indefinitely to enter its critical section.,That the critical section will always complete within a fixed time frame.,That processes will enter the critical section in the order they requested access.,A maximum size for the shared data being accessed.,B,Bounded waiting ensures that there is a limit on the number of times other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted. This prevents indefinite postponement or starvation.
"Which of the following is an example of a software solution for the critical-section problem, known for not working well on modern computer architectures due to instruction reordering?",Mutex locks,Semaphores,Peterson's solution,Monitors,Atomic variables,C,"Peterson's solution is a classic software-based algorithm for mutual exclusion that, while theoretically sound, often fails in practice on modern architectures due to compiler and processor optimizations like instruction reordering."
"Why do traditional software solutions for critical sections, like Peterson's solution, often fail on modern computer architectures?",They require excessive CPU cycles.,They are incompatible with 64-bit systems.,Due to instruction reordering by compilers and processors.,They can only be implemented in assembly language.,They cause immediate system deadlocks.,C,"Modern computer architectures and compilers often reorder instructions for performance optimization. Software solutions like Peterson's rely on a specific execution order that can be violated by such reordering, leading to incorrect behavior."
Which of the following is a form of hardware support typically used to solve the critical-section problem?,Application-level libraries,Peterson's solution,Memory barriers,Operating system schedulers,High-level programming languages,C,"Memory barriers are hardware mechanisms that enforce specific ordering of memory operations, preventing instruction reordering across the barrier and thus supporting correct synchronization in critical sections."
The `compare-and-swap` instruction is an example of what kind of support for critical sections?,A software-only algorithm.,A high-level synchronization abstract data type.,A hardware instruction providing atomic operations.,A type of liveness problem.,A method for deadlock detection.,C,"`compare-and-swap` is a hardware instruction that atomically compares the content of a memory location with a given value and, only if they are the same, modifies the contents of that memory location to a new given value. This atomicity is crucial for implementing synchronization primitives."
What is the primary synchronization property that Mutex Locks are designed to provide?,Progress,Bounded waiting,Mutual exclusion,Starvation avoidance,Deadlock detection,C,"Mutex locks (short for mutual exclusion locks) are designed specifically to provide mutual exclusion, ensuring that only one process can hold the lock and access a critical section at a time."
How do processes typically interact with a mutex lock to access a critical section?,They signal the lock before entering and wait after exiting.,They acquire the lock before entering and release it upon exiting.,They check the lock status periodically without acquiring it.,They disable system interrupts before entering and re-enable them after exiting.,They perform a series of `compare-and-swap` operations indefinitely.,B,"The standard protocol for using a mutex lock is for a process to 'acquire' the lock before entering its critical section and 'release' the lock upon exiting, thereby enforcing mutual exclusion."
In what way can semaphores be similar to mutex locks?,Both are strictly binary in value.,Both are abstract data types (ADTs).,Both can provide mutual exclusion.,Both are primarily used for high-level process synchronization.,Both rely on hardware instruction reordering.,C,"Semaphores can be used to provide mutual exclusion. A binary semaphore, specifically, functions very similarly to a mutex lock, having only two states (0 or 1) representing locked or unlocked."
"What is a key distinguishing feature of semaphores compared to mutex locks, which allows them to solve a wider variety of synchronization problems?","Semaphores are implemented purely in hardware, unlike mutexes.","Semaphores inherently prevent deadlock, while mutexes do not.","Semaphores have an integer value, allowing for counting resources, unlike mutex locks' binary value.",Semaphores do not require acquire/release operations.,"Semaphores guarantee bounded waiting automatically, while mutexes require additional logic.",C,"The primary difference is that semaphores have an integer value, which allows them to act as counting semaphores (managing access to multiple instances of a resource), whereas mutex locks are strictly binary (managing access to a single critical section)."
What kind of synchronization construct is a 'monitor'?,A low-level hardware instruction.,A software algorithm prone to instruction reordering.,An abstract data type (ADT) for high-level synchronization.,A simple binary flag for mutual exclusion.,A specialized CPU register.,C,"Monitors are described as an abstract data type (ADT) that provides a high-level approach to process synchronization, encapsulating shared data and operations on that data."
What is the primary purpose of 'monitors' in the context of process synchronization?,To directly manage CPU scheduling queues.,To provide a high-level form of process synchronization.,To enforce strict memory access patterns at the hardware level.,To replace the need for critical sections entirely.,To solely detect and resolve deadlocks in a system.,B,"Monitors are designed to simplify the complex aspects of process synchronization by providing a structured, high-level mechanism that typically handles mutual exclusion implicitly."
"Within monitors, what is the function of 'condition variables'?",To count the number of processes currently inside the monitor.,To directly provide mutual exclusion for the monitor's code.,To allow processes to wait for specific conditions to become true and to signal other processes when those conditions are met.,To store the shared data that the monitor protects.,To act as an alternative to mutex locks outside the monitor.,C,"Condition variables within monitors enable processes to suspend themselves if a condition is not met (wait) and to be awakened by another process when that condition changes (signal), facilitating more complex synchronization logic."
"Solutions to the critical-section problem, while providing synchronization, may sometimes suffer from which category of undesirable issues?",Compiler errors,Hardware malfunctions,Liveness problems,Network latency,User interface freezes,C,"Even if a critical-section solution correctly implements mutual exclusion, progress, and bounded waiting, it can still lead to 'liveness problems' such as deadlock or starvation, where processes are unable to make progress."
Which of the following are examples of 'liveness problems' that can arise in concurrent systems?,Race condition and data corruption,Mutual exclusion and progress,Deadlock and starvation,Instruction reordering and memory barriers,Acquire and release operations,C,"Deadlock (processes indefinitely waiting for each other) and starvation (a process being indefinitely denied access to a resource) are classic examples of liveness problems, where processes cease to make forward progress."
How are various synchronization tools often evaluated to understand their performance characteristics?,Based solely on their lines of code.,"Under different contention levels (e.g., uncontended, moderate, high).",By the number of CPU cores available.,Strictly on their ability to prevent data corruption.,By their historical significance in computing.,B,Synchronization tools are often evaluated under varying levels of 'contention' (how many processes are trying to access the shared resource simultaneously) because their performance can differ significantly depending on the load.
What is generally observed about the performance of synchronization tools when evaluated under specific contention loads?,All synchronization tools perform identically regardless of the contention level.,Performance only improves as contention increases.,"Some tools perform better than others under specific contention loads (e.g., uncontended, moderate, high).",Contention levels have no measurable impact on synchronization tool performance.,Only hardware-based tools are affected by contention.,C,"The performance of synchronization tools is not uniform; some tools are optimized for low contention scenarios, while others might be more robust or efficient under high contention, leading to varying performance across different loads."
