Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
The critical-section problem is identified as a type of which fundamental system issue?,Performance bottleneck,Memory leak,Liveness problem,Security vulnerability,Resource fragmentation,C,The text explicitly states: 'The critical-section problem is a type of liveness problem.'
What defines 'liveness' in the context of system properties?,The ability of a system to recover from crashes without data loss.,Properties a system must satisfy to ensure processes make progress.,The responsiveness of a system to user input within a defined time limit.,The capacity of a system to handle increasing workloads without degradation.,Properties ensuring data consistency across distributed systems.,B,The definition provided is: 'Liveness: Properties a system must satisfy to ensure processes make progress.'
Which two common liveness problems are discussed in the provided text?,Race conditions and priority inversion,Deadlock and starvation,Concurrency and atomicity,Mutual exclusion and bounded waiting,Context switching and inter-process communication,B,The text states: 'This section discusses two common liveness problems: deadlock and starvation.'
"In multiprogramming, processes compete for which type of resources?",Virtual resources,Infinite resources,Ephemeral resources,Finite resources,Shared memory segments only,D,"The text specifies: 'In multiprogramming, processes compete for finite resources.'"
What is the correct sequence of operations a process typically follows when interacting with a resource?,"Use, Request, Release","Request, Release, Use","Request, Use, Release","Release, Request, Use","Acquire, Operate, Terminate",C,"The normal process operation sequence is listed as: 'Request', 'Use', 'Release'."
"According to the normal process operation sequence, what happens if a requested resource is unavailable?",The process terminates immediately.,The process switches to another task.,The process waits until the resource becomes available.,The process force-releases another resource.,The system grants the resource anyway.,C,"Under the 'Request' step, it states: 'Process requests resource. If unavailable, process waits.'"
What is the definition of a 'deadlock'?,A situation where a process cannot acquire a resource due to incorrect permissions.,A state where a process executes an infinite loop without progress.,A situation where two or more processes wait indefinitely for an event that can only be caused by one of the waiting processes.,A system crash caused by an unhandled exception.,A condition where CPU utilization drops to zero.,C,The text defines deadlock as: 'A situation where two or more processes wait indefinitely for an event that can only be caused by one of the waiting processes.'
What is a direct consequence of processes becoming deadlocked?,They consume excessive CPU cycles and slow down the system.,They transition to a low-priority state and are eventually killed.,"They never complete, and their held resources are never released.",They automatically restart after a short delay.,"Their memory footprint expands indefinitely, causing system instability.",C,"The text states the consequences: 'Deadlocked processes never complete, and their resources are never released.'"
"In the example provided, if Process P1 holds a DVD drive and requests a printer, while Process P2 holds a printer and requests a DVD drive, what is the outcome?","P1 completes, then P2 completes.","P2 completes, then P1 completes.",Both processes enter a state of starvation.,"A deadlock occurs, as neither process can proceed or release resources.",The operating system automatically resolves the conflict by preempting resources.,D,"The example states: '$P_1$ holds DVD drive, $P_2$ holds printer. $P_1$ requests printer, $P_2$ requests DVD drive. Result: Deadlock. $P_1$ waits for $P_2$'s printer, $P_2$ waits for $P_1$'s DVD drive. Neither can proceed or release resources.'"
"In a single-core system, what is a typical cause of deadlock?",Two processes simultaneously accessing the same memory location.,"A process waiting for an event that never occurs, such as a message from a terminated process.",The system running out of available CPU time slices.,Excessive context switching between processes.,A process being swapped out of memory too frequently.,B,"For a 'Single-core system', the text says: 'Process waits for an event that never occurs (e.g., message from a terminated process).'"
"How do deadlocks primarily manifest in a multicore system, as described?",Through continuous memory page faults.,When two or more processes wait for each other to release resources.,Due to a single core failing to execute instructions.,As a result of high cache miss rates.,When processes try to access non-existent hardware.,B,"For a 'Multicore system', the text states: 'Two or more processes wait for each other to release resources.'"
"Beyond process synchronization, where else can deadlocks occur?",Only within database management systems.,Exclusively in network communication protocols.,Only in distributed file systems.,"In memory management, file systems, and other areas.",Nowhere else; they are confined to process synchronization.,D,"The text mentions: 'Scope: Deadlock is not limited to process synchronization; it can occur in memory management, file systems, etc.'"
What is true regarding the relationship between semaphores and deadlock?,Semaphores completely prevent deadlock.,Semaphores are unrelated to deadlock occurrences.,Semaphores can lead to deadlock.,"Semaphores can only resolve deadlocks, not cause them.",Deadlock is a prerequisite for using semaphores.,C,The text explicitly states: 'Semaphores and Deadlock: Semaphores can lead to deadlock.'
"Consider two processes, P0 and P1, and two semaphores, S and Q, both initialized to 1. P0 executes `wait(S)` then `wait(Q)`. P1 executes `wait(Q)` then `wait(S)`. If P0 executes `wait(S)` and then P1 executes `wait(Q)`, what is the immediate result?",Both processes complete successfully.,"P0 acquires both S and Q, and P1 waits indefinitely.","P0 waits for `wait(Q)` and P1 waits for `wait(S)`, leading to deadlock.","P1 acquires both Q and S, and P0 waits indefinitely.",The operating system preempts one process to avoid deadlock.,C,"The example scenario shows: 'P0 executes `wait(S)`, then P1 executes `wait(Q)`. Result: P0 waits for `wait(Q)` (needs P1 to `signal(Q)`). P1 waits for `wait(S)` (needs P0 to `signal(S)`). Both `signal()` operations never execute, leading to deadlock.'"
What is 'starvation' in the context of process management?,A situation where a process consumes all available CPU resources.,A process's inability to access network resources due to firewall rules.,A situation in which a process is ready to run but cannot obtain a required resource for an indefinite period.,The state where a process has been terminated due to a critical error.,"When a process's memory allocation is too small, causing frequent swapping.",C,"The text defines starvation as: 'A situation in which a process is ready to run but cannot obtain a required resource (CPU core, mutex lock) for an indefinite period.'"
What is the key distinction between starvation and deadlock?,"Starvation occurs in single-core systems, while deadlock occurs in multicore systems.","In starvation, resources *do* become available but are repeatedly denied; in deadlock, the required event never occurs.","Deadlock is resolvable by the operating system, while starvation is not.","Starvation only affects CPU resources, while deadlock affects all resource types.","Deadlock is a liveness problem, but starvation is a safety problem.",B,"The text explicitly states: 'Distinction from Deadlock: In starvation, resources *do* become available, but the process is repeatedly denied access. In deadlock, the event never occurs.'"
How can a low-priority process experience starvation in a priority-based CPU scheduling system?,By continuously holding onto a resource needed by high-priority processes.,By being unable to access its allocated memory region.,"By being continuously preempted by high-priority processes, potentially never getting a chance to execute.","By entering an infinite loop, preventing other processes from running.",By requesting resources that are currently not available in the system.,C,The example states: 'Low-priority process is continuously preempted by high-priority processes. May never get a chance to execute. This is a form of starvation.'
Why is starvation considered a serious problem in real-time systems?,"It can lead to excessive memory consumption, causing system thrashing.","A starving process may miss its deadline, potentially causing system failure.","It significantly increases context switching overhead, reducing system throughput.",It often indicates a hardware malfunction that requires immediate attention.,"It causes all other processes to enter a waiting state, halting system operations.",B,"The text explains the impact: 'Serious problem in real-time systems; a starving process may miss its deadline, causing system failure.'"
What is 'Aging' as a technique for preventing starvation?,A method to gradually reduce the priority of processes that consume too many resources.,A technique to increase the execution speed of older processes.,A technique of gradually increasing the priority of processes that wait in the system for a long time.,"A process of archiving old, inactive processes to free up system resources.",A way to detect and terminate processes that have been running for an excessively long duration.,C,The text defines aging: 'A technique of gradually increasing the priority of processes that wait in the system for a long time.'
"If priorities range from 0-127, how might 'Aging' practically prevent starvation for a waiting process?",By decreasing its priority by 1 every 15 minutes.,By setting its priority to 127 immediately upon entering the system.,"By incrementing its priority by 1 every 15 minutes, eventually reaching a higher priority.",By periodically removing it from the ready queue and reinserting it at a lower priority.,By ensuring it gets a fixed time slice regardless of its priority.,C,"The example given for aging states: 'Example: If priorities are 0-127, increment priority by 1 every 15 minutes. Eventually, the process reaches highest priority and executes.'"
"Besides 'Aging', what other general technique is mentioned for preventing starvation?","Implementing a strict First-Come, First-Served (FCFS) scheduling policy.",Using a Preemptive Shortest Job First (PSJF) scheduling algorithm.,Ensuring processes release resources immediately after acquisition.,Employing a fair scheduling algorithm that ensures every process eventually gets access to needed resources.,Increasing the number of available CPU cores.,D,The second technique listed is: 'Fair scheduling algorithm: Ensures every process eventually gets access to needed resources.'
