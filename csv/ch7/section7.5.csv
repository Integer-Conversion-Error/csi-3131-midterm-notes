Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is a primary consequence of the emergence of multicore systems in application development?,Decreased demand for concurrent applications.,Reduced risk of race conditions and liveness hazards.,Increased pressure to develop concurrent applications.,Simplification of traditional mutex lock implementation.,Elimination of the need for process synchronization techniques.,C,The text states that the 'Emergence of multicore systems: increased pressure to develop concurrent applications.'
Which of the following hazards are specifically mentioned as increasing with the development of concurrent applications?,Memory leaks and buffer overflows.,"Race conditions and liveness hazards (e.g., deadlock).",Compilation errors and runtime exceptions.,Performance bottlenecks due to single-threaded execution.,Stack overflow and heap corruption.,B,"The text indicates that 'Concurrent applications: increased risk of race conditions and liveness hazards (e.g., deadlock).'"
Which of the following are traditionally used to address synchronization issues in concurrent applications?,"Compiler optimizations, garbage collectors, and JIT compilers.","Message queues, remote procedure calls, and distributed transactions.","Mutex locks, semaphores, and monitors.","Virtual memory, paging, and swapping.","Network protocols, firewalls, and encryption algorithms.",C,"The text states, 'Traditionally: mutex locks, semaphores, monitors used to address these.'"
"According to the text, what is the core definition of a 'memory transaction'?",A financial operation involving data exchange between two memory banks.,A sequence of memory read-write operations that are atomic.,A process of encrypting and decrypting data stored in memory.,A method for allocating and deallocating memory blocks dynamically.,A mechanism for virtual memory management.,B,The text defines 'memory transaction' as a 'sequence of memory read-write operations that are atomic.'
"In transactional memory, what happens if all operations within a memory transaction successfully complete?",The operations are aborted and rolled back.,The system generates a fatal error.,The transaction is committed.,The transaction enters a waiting state.,The memory is deallocated.,C,"The text states, 'If all operations complete: transaction committed.'"
What occurs in transactional memory if not all operations within a transaction complete successfully?,The transaction commits partially.,The operations are aborted and rolled back.,The system attempts to re-execute the operations indefinitely.,The memory state remains unchanged from before the transaction started.,A new transaction is automatically initiated.,B,The text specifies that 'Otherwise [if operations do not complete]: operations aborted and rolled back.'
From which field did the idea of transactional memory originate before being applied to process synchronization?,Artificial intelligence.,Network security.,Operating system kernel design.,Database theory.,Computer graphics.,D,"The text mentions, 'Idea originated in database theory, now used for process synchronization.'"
Which of the following are identified as problems with traditional locking mechanisms when designing multithreaded applications?,Increased memory usage and CPU caching issues.,Deadlock and poor scalability with increasing threads due to high contention.,Difficulty in debugging single-threaded programs.,Inability to support concurrent read access.,Limited support for object-oriented programming paradigms.,B,"The text highlights 'deadlock, poor scalability with increasing threads (high contention for lock ownership)' as problems with traditional locking."
What is the purpose of the `atomic{S}` construct in programming languages utilizing transactional memory?,To declare a block of code that is never executed.,To ensure operations in S execute as a transaction.,To mark S as a section for manual memory allocation.,To specify S as a region where race conditions are intentionally allowed.,To define S as a function that cannot be called concurrently.,B,The text states that the 'Construct `atomic{S}`: ensures operations in `S` execute as a transaction.'
One significant advantage of transactional memory over traditional locking is that atomicity is guaranteed by whom?,The application developer.,The operating system kernel.,The transactional memory system itself.,The database administrator.,"The compiler, but only with specific flags.",C,The text lists as an advantage: 'Transactional memory system (not developer) guarantees atomicity.'
"Why is deadlock not possible when using transactional memory, as described in the text?",It uses a global lock that prevents all contention.,It automatically detects and resolves deadlocks.,No locks are involved in its operation.,"It relies on a first-come, first-served scheduling policy.",It distributes memory transactions across multiple machines.,C,The text states as an advantage: 'No locks involved -> deadlock not possible.'
What capability does a transactional memory system possess regarding concurrent execution that is difficult for a programmer to manage with increasing thread counts?,Automatically generating documentation for concurrent code.,"Identifying concurrent execution of statements in atomic blocks (e.g., concurrent read access).",Optimizing network latency for distributed transactions.,Preventing all forms of resource contention automatically.,Debugging errors in single-threaded legacy code.,B,"The text notes that the 'System can identify concurrent execution of statements in atomic blocks (e.g., concurrent read access)' and that this is difficult for programmers as thread counts grow."
How is Software Transactional Memory (STM) typically implemented to manage transactions?,By requiring specialized hardware co-processors.,"By inserting instrumentation code inside transaction blocks, usually by a compiler.",By modifying the operating system kernel.,By relying solely on explicit developer-managed locks.,By using dedicated network protocols.,B,The text specifies that STM 'Works by inserting instrumentation code inside transaction blocks (by compiler).'
What is a key characteristic of Software Transactional Memory (STM) regarding hardware?,It requires modification of existing cache hierarchies.,It necessitates specialized transactional processing units.,It uses hardware cache coherency protocols exclusively.,No special hardware is needed.,It performs best on single-core processors.,D,The text states for STM: 'Implemented exclusively in software; no special hardware needed.'
What does Hardware Transactional Memory (HTM) utilize to manage and resolve conflicts for shared data in separate processors' caches?,Software-only instrumentation code.,Traditional mutex locks and semaphores.,Hardware cache hierarchies and cache coherency protocols.,Operating system-level virtual memory management.,Distributed ledger technology.,C,The text states that HTM 'Uses hardware cache hierarchies and cache coherency protocols.'
"Compared to Software Transactional Memory (STM), what is an advantage of Hardware Transactional Memory (HTM) concerning code instrumentation?",It requires extensive manual code instrumentation.,It introduces significant overhead due to complex instrumentation.,"It requires no special code instrumentation, resulting in less overhead.",It performs instrumentation at runtime only.,It uses the same instrumentation approach as STM.,C,The text indicates that HTM 'Requires no special code instrumentation (less overhead than STM).'
In what type of computing environment does OpenMP primarily support parallel programming?,Distributed memory systems.,Message-passing interface (MPI) clusters.,Shared-memory environments.,Cloud-based serverless architectures.,Single-core embedded systems.,C,The text states: 'OpenMP supports parallel programming in a shared-memory environment.'
What does OpenMP include as part of its framework for parallel programming?,A dedicated operating system and file system.,A set of compiler directives and an API.,A new programming language and runtime environment.,A hardware abstraction layer and device drivers.,A graphical user interface builder.,B,The text states OpenMP 'Includes: set of compiler directives and an API.'
What is the effect of the `#pragma omp parallel` compiler directive in OpenMP?,It causes the following code to be compiled sequentially.,"It defines the following code as a parallel region, performed by threads equal to processing cores.",It designates the following code as a critical section for exclusive access.,It explicitly instructs the developer to manage thread creation manually.,It includes an external library for network communication.,B,"The text explains that with `#pragma omp parallel`, the 'Code following this is a parallel region. Performed by number of threads equal to processing cores.'"
What is a significant advantage of OpenMP regarding thread creation and management?,It requires developers to manually create and destroy threads.,"The OpenMP library handles thread creation and management, not the application developers.","It only supports a fixed number of threads, regardless of processing cores.",It completely eliminates the need for threads in parallel applications.,It delegates thread management entirely to the operating system without any OpenMP involvement.,B,The text lists as an advantage: 'OpenMP library handles thread creation and management (not application developers' responsibility).'
What is the primary purpose of the `#pragma omp critical` compiler directive in OpenMP?,To indicate a section of code that is prone to errors.,To specify a code region as a critical section where only one thread is active at a time.,To mark a block of code for parallel execution by multiple threads.,To define a function that must be executed at a specific time.,To declare global variables for shared access.,B,The text states that `#pragma omp critical` 'Specifies code region as a critical section. Only one thread active at a time. Ensures threads do not generate race conditions.'
How does an OpenMP critical-section directive behave if a thread tries to enter it while another thread is already active within the same critical section?,The calling thread generates a runtime error.,The calling thread preempts the active thread.,"The calling thread proceeds immediately, leading to a race condition.",The calling thread blocks until the owner exits.,The critical section is automatically expanded to accommodate both threads.,D,The text states: 'If thread tries to enter when another is active (owns section): calling thread blocks until owner exits.'
What is true about multiple critical sections in OpenMP that are identified by a name?,"Only one thread can be active in any critical section, regardless of name.",A thread can be active in multiple named critical sections simultaneously.,The rule specifies only one thread active in critical section of the *same name* simultaneously.,Naming critical sections disables their synchronization properties.,Naming is purely for documentation purposes and has no functional impact.,C,The text explains: 'Multiple critical sections: each can be named; rule specifies only one thread active in critical section of same name simultaneously.'
"Despite its advantages, what responsibility still falls upon developers when using OpenMP to prevent race conditions?",They must rewrite the OpenMP library for their specific hardware.,They must manually manage thread creation and destruction.,They must still identify possible race conditions and adequately protect shared data.,They are required to use only single-threaded applications.,They must design new cache coherency protocols.,C,The text lists as disadvantages: 'Developers must still identify possible race conditions. Must adequately protect shared data using directive.'
"What is a potential issue that can still occur when using OpenMP critical sections, similar to mutex locks?",Performance degradation due to excessive parallelization.,Memory fragmentation.,"Deadlock, if two or more critical sections are identified.",Unpredictable program termination.,Automatic re-execution of failed transactions.,C,The text states as a disadvantage: 'Deadlock still possible if two or more critical sections are identified (behaves like mutex lock).'
"Which of the following is a defining characteristic of imperative (or procedural) programming languages, such as C, C++, Java, and C#?",They primarily operate without maintaining state.,"Variables, once defined, are immutable.",They implement state-based algorithms where program state is mutable.,They are designed to eliminate all concurrency issues automatically.,They only support functional programming paradigms.,C,The text describes imperative languages as implementing 'state-based algorithms' where 'Program state is mutable (variables can change values).'
"What is the fundamental difference in programming paradigm between functional languages and imperative languages, as described in the text?","Functional languages are compiled, while imperative languages are interpreted.","Functional languages utilize graphical interfaces, while imperative languages are text-based.","Functional languages do not maintain state, while imperative languages do.","Functional languages are strictly for scientific computing, while imperative languages are for general purpose.",Functional languages require more memory.,C,The text states that a 'Fundamental difference: [functional languages] do not maintain state' in contrast to imperative languages that 'Implement state-based algorithms'.
"What is a key property of variables in functional programming languages, once they have been defined and assigned a value?",Their value can be changed at any time.,Their value is mutable only within specific critical sections.,Their value is immutable and cannot change.,Their value can only be modified by the operating system.,They are automatically garbage collected immediately after assignment.,C,"The text states for functional languages: 'Once variable defined and assigned value, its value is immutable (cannot change).'"
"Due to the disallowance of mutable state, what major concurrency problems are generally nonexistent in functional programming languages?",Memory leaks and buffer overflows.,Runtime exceptions and syntax errors.,Race conditions and deadlocks.,Performance bottlenecks in single-threaded execution.,Issues with distributed consensus.,C,The text states for functional languages: 'Because mutable state disallowed: no concern with race conditions and deadlocks. Most problems addressed in this chapter are nonexistent.'
Which of the following functional languages is specifically mentioned as having gained attention for its concurrency support and ease of developing parallel applications?,C#.,Java.,Erlang.,C++.,Python.,C,The text lists 'Erlang: gained attention for concurrency support and ease of developing parallel applications' as an example.
"Based on the section glossary, what is the definition of 'transactional memory'?",A type of memory used for financial transactions.,Memory that supports advanced encryption algorithms.,Memory designed for single-threaded applications.,A type of memory supporting memory transactions.,Volatile memory that loses data upon power loss.,D,The glossary defines 'transactional memory' as 'Type of memory supporting memory transactions.'
"According to the glossary, what is an 'imperative language' (also known as a 'procedural language')?",A language that emphasizes immutable data structures.,A language for implementing state-based algorithms.,A language used exclusively for hardware programming.,A language that does not require states to be managed.,A language focused on parallel execution without explicit synchronization.,B,"The glossary defines both 'imperative language' and 'procedural language' as 'Language for implementing state-based algorithms (e.g., C, C++, Java, C#).'"
How does the glossary define a 'functional language'?,A programming language that requires states to be explicitly managed by programs.,A language primarily designed for database queries.,A programming language that does not require states to be managed by programs written in it.,A language that uses procedural calls exclusively.,A language that only supports concurrent execution.,C,"The glossary defines 'functional language' as a 'Programming language that does not require states to be managed by programs written in it (e.g., Erlang, Scala).'"
Which type of transactional memory implementation generally has less overhead because it requires no special code instrumentation?,Software Transactional Memory (STM),Hardware Transactional Memory (HTM),Hybrid Transactional Memory (HyTM),Distributed Transactional Memory (DTM),Compiler-assisted Transactional Memory (CATM),B,The text states for HTM: 'Requires no special code instrumentation (less overhead than STM).'
What is the current trend regarding the status of transactional memory implementation?,It has seen widespread implementation for many years.,It is being phased out due to inherent limitations.,The growth of multicore systems and emphasis on concurrent programming has prompted significant research.,It remains a theoretical concept with no practical applications.,"It is only used in highly specialized, niche applications.",C,The text notes its 'Status: existed for years without widespread implementation' but 'Current trend: growth of multicore systems and emphasis on concurrent/parallel programming has prompted significant research.'
What specific hardware modification is required for Hardware Transactional Memory (HTM) implementation?,Addition of specialized GPU units.,Modification of existing cache hierarchies and cache coherency protocols.,Installation of a dedicated transactional memory chip.,Redesign of the system's bus architecture.,Upgrading to Solid State Drives.,B,The text states for HTM: 'Requires modification of existing cache hierarchies and cache coherency protocols.'
The behavior of an OpenMP critical-section directive is described as being much like what traditional synchronization primitives?,Message queues or pipes.,Binary semaphore or mutex lock.,Condition variables or event flags.,Shared memory segments or files.,Remote procedure calls or sockets.,B,The text states: 'Behavior of critical-section directive: Much like binary semaphore or mutex lock.'
What is generally considered an advantage of the OpenMP critical-section directive compared to standard mutex locks?,It guarantees freedom from all deadlocks.,It automatically detects and resolves all race conditions.,It is generally considered easier to use.,It supports distributed memory environments natively.,It requires no explicit directives from the developer.,C,The text lists as an advantage: 'Generally considered easier to use than standard mutex locks.'
"With the current emphasis on concurrent/parallel programming for multicore systems, what type of programming languages are gaining greater focus?",Assembly languages.,Imperative languages.,Object-oriented languages (excluding functional features).,Functional programming languages.,Markup languages.,D,The text states: 'Current emphasis on concurrent/parallel programming for multicore systems: greater focus on functional programming languages.'
Which pair of languages are provided as examples of functional programming languages?,C and C++.,Java and C#.,Erlang and Scala.,Python and Ruby.,Fortran and COBOL.,C,The text lists 'Erlang' and 'Scala' as examples of functional languages.
