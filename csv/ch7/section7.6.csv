Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following are explicitly listed as classic process synchronization problems?,"Bounded-buffer problem, Readers-writers problem, Dining-philosophers problem","Deadlock problem, Starvation problem, Livelock problem","Producer-consumer problem, Critical-section problem, Mutual exclusion problem","Memory leak problem, Race condition problem, Priority inversion problem","File locking problem, Database concurrency problem, Network latency problem",A,"The text lists the Bounded-buffer, Readers-writers, and Dining-philosophers problems as classic process synchronization problems."
"According to the text, which of the following tools are generally used for solving process synchronization problems?","Mutex locks, Semaphores, Monitors, Condition variables","Atomic variables, Spinlocks, Dispatcher objects","Transactional memory, OpenMP, Functional languages","Events, Named semaphores, Unnamed semaphores","Critical sections, Race conditions, Deadlocks",A,"The text states that solutions use 'Mutex locks, Semaphores, Monitors, Condition variables' from the 'Synchronization Tools' chapter."
What primary objects does Windows synchronization utilize?,Dispatcher objects,Event objects,Mutex locks,Spinlocks,Semaphores,A,Windows synchronization 'Uses dispatcher objects'.
How does Windows implement its synchronization tools according to the provided text?,By using events,By using dispatcher objects directly as tools,By relying on shared memory segments,By incorporating POSIX API,By implementing atomic variables,A,Windows synchronization 'Uses events to implement synchronization tools'.
Which of the following synchronization mechanisms are explicitly mentioned as being used in Linux to protect against race conditions?,"Atomic variables, Spinlocks, Mutex locks","Dispatcher objects, Events","Named semaphores, Unnamed semaphores","Monitors, Reentrant locks","Transactional memory, OpenMP",A,"Linux synchronization 'Includes atomic variables, Includes spinlocks, Includes mutex locks'."
The POSIX API provides which of the following synchronization tools?,"Mutex locks, Semaphores, Condition variables","Dispatcher objects, Atomic variables","Monitors, Reentrant locks","Spinlocks, Events","Transactional memory, OpenMP",A,"The POSIX API 'Provides mutex locks, Provides semaphores, Provides condition variables'."
What are the two forms of semaphores provided by the POSIX API?,Named semaphores and Unnamed semaphores,Binary semaphores and Counting semaphores,Local semaphores and Global semaphores,System V semaphores and POSIX semaphores,Recursive semaphores and Non-recursive semaphores,A,The text explicitly states 'Two forms of semaphores: Named semaphores' and 'Unnamed semaphores'.
What is a key characteristic of POSIX named semaphores?,They are easily accessed by unrelated processes by name.,They require placement in shared memory to be shared.,They cannot be shared easily among processes.,They are primarily used for thread synchronization within a single process.,"They are built directly into the language level, not just the API.",A,Named semaphores are described as 'easily accessed by unrelated processes by name'.
What is a key characteristic of POSIX unnamed semaphores?,They cannot be shared as easily; require placement in shared memory.,They are easily accessed by unrelated processes by name.,They are typically used for inter-process communication directly.,They do not suffer from the critical-section problem.,They are managed by dispatcher objects.,A,Unnamed semaphores 'cannot be shared as easily; require placement in shared memory'.
Which of the following synchronization tools are available in Java according to the text?,"Monitors, Reentrant locks, Semaphores, Condition variables","Dispatcher objects, Atomic variables, Spinlocks","Named semaphores, Unnamed semaphores","Mutex locks, OpenMP, Transactional memory","Readers-writers locks, Bounded-buffer solutions",A,"Java's 'Available tools' are listed as 'Monitors, Reentrant locks, Semaphores, Condition variables'."
"In Java, which synchronization tool is provided at the language level?",Monitors,Reentrant locks,Semaphores,Condition variables,Mutex locks,A,Monitors in Java are listed as 'provided at language level'.
Which of the following Java synchronization tools are supported by its API?,"Reentrant locks, Semaphores, Condition variables",Monitors only,Mutex locks only,All listed tools are language-level,All listed tools are API-supported,A,"Reentrant locks, Semaphores, and Condition variables in Java are listed as 'supported by API'."
What alternative approaches to the critical-section problem are mentioned in the text?,"Transactional memory, OpenMP, Functional languages","Mutex locks, Semaphores, Monitors","Atomic variables, Spinlocks, Dispatcher objects","Named semaphores, Unnamed semaphores, Events","Bounded-buffer, Readers-writers, Dining-philosophers",A,"The text lists 'Transactional memory, OpenMP, Functional languages' as 'Alternative approaches to critical-section problem'."
"What is a fundamental characteristic of functional languages that distinguishes them from procedural languages, according to the text?",They do not maintain state.,They extensively use shared memory for communication.,They are primarily designed for embedded systems.,They are prone to race conditions and deadlocks.,They rely on dispatcher objects for synchronization.,A,"Functional languages, unlike procedural languages, 'do not maintain state'."
Why are functional languages generally immune from race conditions and critical sections?,Because they do not maintain state.,Because they heavily rely on mutex locks and semaphores.,Because they use transactional memory extensively.,Because they are a procedural programming paradigm.,Because they are optimized for single-threaded execution.,A,"Functional languages 'do not maintain state', which makes them 'Generally immune from race conditions and critical sections'."
