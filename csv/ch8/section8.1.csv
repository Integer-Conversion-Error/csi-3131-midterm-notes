Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
"In a multiprogramming environment, what do multiple threads typically compete for?",CPU speed,Network bandwidth,Finite resources,External peripherals,Developer attention,C,The text states that in a 'Multiprogramming Environment: Multiple threads compete for finite resources'.
"When a thread requests a resource that is currently unavailable, what state does it enter?",Terminated state,Running state,Waiting state,Ready state,Suspended state,C,"The text explicitly states under 'Resource Request': 'If unavailable, thread enters a waiting state'."
"Which of the following best describes a deadlock situation, as defined in the introduction?",A thread is indefinitely running a critical section.,A waiting thread can never change state because its requested resources are held by other waiting threads.,Multiple threads simultaneously access a shared resource without synchronization.,A thread requests a resource that does not exist.,A system crash due to excessive resource allocation.,B,The introduction defines deadlock as 'A situation where a waiting thread can never change state because its requested resources are held by other waiting threads'.
"According to the formal definition, a deadlock occurs when every process in a set is waiting for an event that can only be caused by which of the following?",An external interrupt,Another process in the set,The operating system kernel,User input,A timer expiration,B,The formal definition of deadlock is: 'Every process in a set is waiting for an event that can only be caused by another process in the set'.
How is the system described in terms of resources and threads?,An infinite number of resources shared among infinite threads.,A finite number of resources distributed among competing threads.,Resources are unlimited and available on demand.,Resources are exclusively allocated to a single thread.,"Resources are only available to processes, not threads.",B,The 'System model' section states the 'System Composition' is a 'Finite number of resources distributed among competing threads'.
How are resources typically organized or partitioned in the system model?,They are randomly assigned without structure.,"They are partitioned into types (classes), each with identical instances.",They are grouped by their physical location.,They are categorized by their usage frequency.,"They are all considered to be of a single, generic type.",B,"Under 'Resource Types', the text states: 'Resources partitioned into types (classes), each with identical instances'."
What characteristic of resource types ensures flexibility when a thread requests a resource?,Resources must be allocated sequentially.,Resources can only be used by their specific owner thread.,Any instance of a resource type should satisfy a request.,Resource instances are unique and non-interchangeable.,Resources are always pre-allocated to threads.,C,The text specifies that 'Any instance of a resource type should satisfy a request'.
Which of the following is NOT explicitly given as an example of a resource type or class in the text?,CPU cycles,Files,I/O devices,Mutex locks,User input,E,"CPU cycles, files, and I/O devices are given as examples of resource types. Mutex locks are stated to be 'common sources of deadlock' and 'Each lock instance is typically its own resource class'. User input is not mentioned as a resource type."
What are two common synchronization tools explicitly mentioned as sources of deadlock?,Message queues and pipes,Mutex locks and semaphores,Event flags and condition variables,Spinlocks and atomic operations,Monitors and barriers,B,"The text states, 'Mutex locks and semaphores are common sources of deadlock'."
What is the correct sequence of steps for a thread utilizing a resource?,"Use, Request, Release","Release, Request, Use","Request, Use, Release","Request, Release, Use","Use, Release, Request",C,"The 'Resource Utilization Sequence' is listed as 1. Request, 2. Use, 3. Release."
"During the 'Request' step of resource utilization, what happens if the requested resource is not immediately available?",The thread immediately terminates.,The thread proceeds without the resource.,The thread waits.,The operating system grants the resource anyway.,The resource is forcibly taken from another thread.,C,The description for the 'Request' step states: 'Thread requests a resource. Waits if not immediately available'.
Which of the following is explicitly mentioned as a mechanism for threads to request and release resources via system management?,Direct memory manipulation,Command-line interface commands,System calls like request() and release(),Inter-process communication via sockets,Hardware interrupts,C,"The text states: 'Request/release can be system calls (request(), release(), open(), close(), allocate(), free())'."
How does the Operating System (OS) check for resource allocation?,By polling all active threads.,Through a system table.,By directly inspecting hardware registers.,By receiving notifications from applications.,By user configuration files.,B,The text mentions that 'OS checks for resource allocation via a system table'.
What information does the OS system table track regarding resources?,Only the total number of resources.,Only resources currently in use.,Free/allocated resources and the owning thread.,The performance metrics of resource usage.,Historical logs of resource requests.,C,The system table 'tracks free/allocated resources and the owning thread'.
"What are the main events involved when a set of threads enters a deadlocked state, as described in the system model?",Only resource release.,Only CPU scheduling.,Resource acquisition and release.,Network communication.,Disk I/O operations.,C,"The text states that in a 'Deadlocked State', the 'Main events: resource acquisition and release'."
"Which classic problem is given as an example to illustrate a deadlocked state where threads exhibit a circular wait (e.g., holding one resource and waiting for another)?",Producer-consumer problem,Reader-writer problem,Dining-philosophers problem,Bounded-buffer problem,Sleeping barber problem,C,"The Dining-philosophers problem is specifically mentioned as an example of a deadlocked state: 'Each philosopher holds one chopstick and waits for another, creating a circular wait'."
What is a key responsibility of a developer regarding deadlock possibilities?,To ignore them as the OS handles all deadlocks.,To ensure locks are always acquired in an arbitrary order.,To be aware of them and manage lock acquisition/release carefully.,To use as many locks as possible without concern.,To delegate all locking to external libraries.,C,"Under 'Developer Responsibility', it states: 'Must be aware of deadlock possibilities' and 'require careful management of lock acquisition/release to avoid deadlocks'."
"While locking tools are effective in preventing race conditions, what specific management is required from developers to avoid deadlocks?",Minimizing the number of locks used.,Using only reentrant locks.,Careful management of lock acquisition/release.,Relying on hardware-level atomicity.,Disabling preemption.,C,The text advises that locking tools 'require careful management of lock acquisition/release to avoid deadlocks'.
"According to the section glossary, what defines a deadlock?",A situation where a process consumes all available CPU cycles.,The state in which two processes or threads are stuck waiting for an event that can only be caused by one of the processes or threads.,An error where a process attempts to access invalid memory.,A condition where a system runs out of disk space.,An infinite loop within a single thread.,B,The section glossary defines 'deadlock' as 'The state in which two processes or threads are stuck waiting for an event that can only be caused by one of the processes or threads'.
