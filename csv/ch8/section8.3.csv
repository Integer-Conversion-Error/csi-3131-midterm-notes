Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is a fundamental requirement for a deadlock situation to arise in a system?,At least two conditions must hold simultaneously.,Only the circular-wait condition is strictly necessary.,"All four specified conditions (Mutual exclusion, Hold and wait, No preemption, and Circular wait) must hold concurrently.",Deadlocks can arise even if only one condition is met.,Deadlocks are only possible if resources are sharable.,C,"The text states, ""A deadlock situation can arise if the following four conditions hold simultaneously in a system."""
Which of the following conditions for deadlock states that at least one resource must be held in a nonsharable mode?,Hold and wait,No preemption,Circular wait,Mutual exclusion,Resource allocation,D,"Mutual exclusion is defined as ""At least one resource must be held in a nonsharable mode."""
"In the context of deadlock conditions, what does ""Hold and wait"" mean?",A thread is waiting for resources but holds none.,A thread has released all its resources and is waiting for new ones.,A thread must be holding at least one resource and waiting to acquire additional resources held by other threads.,A thread is preempting resources from another thread.,A thread is only holding resources and not waiting for any.,C,"""Hold and wait"" means ""A thread must be holding at least one resource and waiting to acquire additional resources held by other threads."""
"According to the necessary conditions for deadlock, what does ""No preemption"" imply about resource release?",A resource can be forcibly taken away from a thread by the operating system.,Resources are always preemptible if a higher-priority thread requests them.,A resource can be released only voluntarily by the thread holding it.,Resources are automatically released after a fixed time.,A thread can preempt resources from another thread if it waits long enough.,C,"""No preemption"" means ""A resource can be released only voluntarily by the thread holding it."""
"Describe the ""Circular wait"" condition for deadlock.",All threads are waiting for the same resource.,"A set of waiting threads {T_0, T_1, ..., T_n} must exist such that T_0 is waiting for a resource held by T_1, T_1 is waiting for a resource held by T_2, ..., T_{n-1} is waiting for a resource held by T_n, and T_n is waiting for a resource held by T_0.",Threads are waiting in a linear sequence for resources.,A thread is waiting for a resource it previously held.,Threads are waiting for resources that are not currently available anywhere in the system.,B,The definition of circular wait explicitly states this chain of waiting threads.
Which of the following conditions is implied by the circular-wait condition?,Mutual exclusion,No preemption,Hold and wait,Resource starvation,Deadlock avoidance,C,"The text states, ""The circular-wait condition implies the hold-and-wait condition."""
What is the primary purpose of a system resource-allocation graph?,To visualize thread execution order.,To describe deadlocks precisely.,To manage memory allocation.,To represent network topology.,To monitor CPU utilization.,B,"The text and glossary define it as ""A directed graph for precise description of deadlocks."""
What are the two types of vertices that partition the set V in a system resource-allocation graph?,Edges and Nodes,Processes and Resources,Active threads and Resource types,Input and Output,Mutexes and Semaphores,C,Vertices V are partitioned into two types: T (active threads) and R (resource types).
"In a system resource-allocation graph, what does a directed edge from thread T_i to resource type R_j (T_i \rightarrow R_j) represent?",Resource R_j is allocated to thread T_i.,Thread T_i has released resource R_j.,Thread T_i has requested an instance of R_j.,Resource R_j is available for T_i.,Thread T_i is preempting resource R_j.,C,"An edge T_i \rightarrow R_j is a request edge, signifying that T_i has requested an instance of R_j."
What does a directed edge from resource type R_j to thread T_i (R_j \rightarrow T_i) signify in a system resource-allocation graph?,Thread T_i is requesting resource R_j.,An instance of R_j has been allocated to T_i.,Resource R_j is about to be released by T_i.,Thread T_i is waiting for R_j.,Resource R_j is being shared by T_i and other threads.,B,"An edge R_j \rightarrow T_i is an assignment edge, signifying that an instance of R_j has been allocated to T_i."
What can be definitively concluded if a system resource-allocation graph contains no cycles?,A deadlock may still exist.,All threads are actively running.,No thread is deadlocked.,All resources are fully utilized.,"The system is in a safe state, but deadlocks are still possible.",C,"The text states, ""If the graph contains no cycles, no thread is deadlocked."""
"If a system resource-allocation graph contains a cycle and each resource type has exactly one instance, what is the implication?","A deadlock is possible, but not certain.",No deadlock can occur.,A deadlock has occurred.,The system is in a safe state.,All resources are sharable.,C,"The text specifies, ""If each resource type has exactly one instance, a cycle implies a deadlock has occurred."""
"When a system resource-allocation graph contains a cycle, but each resource type has several instances, what does the cycle indicate?",A deadlock is guaranteed.,The system is deadlock-free.,A cycle is a necessary but not a sufficient condition for deadlock.,The system will recover from the deadlock automatically.,All resources are currently available.,C,"The text specifies, ""If each resource type has several instances, a cycle is a necessary but not a sufficient condition for deadlock."""
