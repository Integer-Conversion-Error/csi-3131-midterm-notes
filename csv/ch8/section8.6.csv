Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following is a side effect of deadlock prevention mechanisms?,Increased system throughput,Higher device utilization,Reduced system throughput,Elimination of all resource request errors,Automatic detection of unsafe states,C,"Deadlock prevention limits how requests are made, which can lead to side effects such as low device utilization and reduced system throughput."
What additional information does a deadlock-avoidance algorithm typically require compared to deadlock prevention?,The current CPU utilization of each thread,A priori knowledge of the maximum resources each thread may need,The history of all resource requests made by threads,The priority level of each thread,The total number of threads currently in the system,B,"Deadlock avoidance requires additional information, specifically that the system needs to know the maximum resources each thread may need (a priori information)."
What is the primary goal of a deadlock-avoidance algorithm regarding the resource-allocation state?,To maximize device utilization regardless of deadlock potential,To ensure that all resource requests are immediately granted,To dynamically examine the resource-allocation state to prevent circular-wait,To convert all request edges into assignment edges,To reduce the complexity of resource allocation to O(n) operations,C,"A deadlock-avoidance algorithm dynamically examines the resource-allocation state to prevent circular-wait, which is a necessary condition for deadlock."
How is the resource-allocation state defined in the context of deadlock avoidance?,By the number of active threads and their priorities,By the amount of free memory and disk space,"By the available and allocated resources, and the maximum demands of each thread",By the historical success rate of resource requests,By the total system uptime and number of system calls,C,"The resource-allocation state is defined by the available and allocated resources, and the maximum demands of each thread."
What characterizes a 'safe state' in deadlock avoidance?,A state where no thread is currently holding any resources.,A state where the system can allocate resources to each thread (up to its maximum) in some order and avoid deadlock.,A state where all resource requests are immediately denied to prevent future issues.,A state where the system has detected a cycle in its resource-allocation graph.,A state where no new threads are allowed to enter the system.,B,A state is safe if the system can allocate resources to each thread (up to its maximum) in some order and avoid deadlock.
When is a system considered to be in a 'safe state'?,Only when no threads are currently executing.,If a safe sequence of threads exists.,If the current resource utilization is below 50%.,If no new resource requests have been made in the last minute.,If the system has sufficient memory to run all processes simultaneously.,B,A system is safe if a safe sequence exists.
"What defines a 'safe sequence' $<T_1, T_2, \dots, T_n>$?",Each $T_i$ finishes execution before $T_{i+1}$ begins.,"For each $T_i$, its resource requests can be met by currently available resources plus resources held by all $T_j$ where $j < i$.",All $T_i$ have exactly the same resource needs.,"The sequence is ordered by thread priority, from highest to lowest.",No thread in the sequence ever makes a resource request.,B,"A safe sequence is one where for each $T_i$, its resource requests can be met by currently available resources plus resources held by all $T_j$ where $j < i$."
"Which statement accurately describes the relationship between safe, unsafe, and deadlocked states?",All unsafe states are deadlocks.,A deadlocked state can be a safe state.,"A safe state is not deadlocked, and a deadlocked state is unsafe.",Unsafe states always lead to deadlock.,Only safe states can experience deadlocks.,C,"A safe state is not deadlocked; a deadlocked state is unsafe. While not all unsafe states are deadlocks, unsafe states may lead to deadlock."
"In an unsafe state, who or what controls whether a deadlock occurs?","The operating system, by enforcing strict resource limits.","The system administrator, by manually reallocating resources.","The thread behavior, as the OS cannot prevent deadlocks.",External hardware controllers.,"The resource-allocation-graph algorithm, which automatically resolves cycles.",C,"In an unsafe state, the OS cannot prevent deadlocks; thread behavior controls unsafe states."
The Resource-Allocation-Graph algorithm for deadlock avoidance is applicable to systems with:,Multiple instances of each resource type.,Only one instance of each resource type.,Only two resource types in total.,An unlimited number of resources.,Resources that are never released.,B,The Resource-Allocation-Graph algorithm is specifically for systems with only one instance of each resource type.
What does a 'claim edge' ($T_i 	o R_j$ dashed line) signify in a Resource-Allocation-Graph for deadlock avoidance?,Thread $T_i$ currently holds resource $R_j$.,Resource $R_j$ is currently available to $T_i$.,Thread $T_i$ may request resource $R_j$ in the future.,Resource $R_j$ is permanently assigned to $T_i$.,Thread $T_i$ has released resource $R_j$.,C,A claim edge ($T_i 	o R_j$ dashed line) indicates that $T_i$ may request $R_j$ in the future.
"In the Resource-Allocation-Graph algorithm, when does a claim edge $T_i 	o R_j$ get converted to a request edge?",When $T_i$ releases $R_j$.,When $R_j$ is allocated to $T_i$.,When $T_i$ requests $R_j$.,When $R_j$ becomes available.,When a new thread enters the system.,C,A claim edge $T_i 	o R_j$ is converted to a request edge when $T_i$ requests $R_j$.
"According to the Resource-Allocation-Graph algorithm, when is a resource request granted?","Always, as long as the resource is available.",Only if no other thread is waiting for the same resource.,Only if no cycle is formed in the graph after the hypothetical allocation.,If the requesting thread has the highest priority.,Only if the graph contains no claim edges.,C,"A request is granted only if no cycle is formed in the graph, which is checked by a cycle-detection algorithm."
What does the presence of a cycle in the Resource-Allocation-Graph indicate in the context of deadlock avoidance?,A safe state.,An efficient resource allocation.,"An unsafe state, potentially leading to deadlock.",That all resources are fully utilized.,That a thread has finished its execution.,C,"A cycle indicates an unsafe state, meaning that the system could potentially enter a deadlocked state."
What is the time complexity of the Resource-Allocation-Graph algorithm for deadlock avoidance?,$O(n)$ operations,$O(m 	imes n)$ operations,$O(n^2)$ operations,$O(m^2)$ operations,$O(log n)$ operations,C,"The algorithm complexity for the Resource-Allocation-Graph algorithm is $O(n^2)$ operations, where $n$ is the number of threads."
The Banker's algorithm is specifically designed for systems with:,Only one instance of each resource type.,Multiple instances of each resource type.,A fixed number of threads.,No resource sharing.,Resource types that cannot be claimed a priori.,B,The Banker's algorithm is applicable to systems with multiple instances of each resource type.
How does the efficiency of the Banker's algorithm compare to the Resource-Allocation-Graph scheme?,It is generally more efficient.,It is generally less efficient.,They have comparable efficiency.,Efficiency depends solely on the number of resource types.,Efficiency depends solely on the number of threads.,B,The Banker's algorithm is described as 'Less efficient than resource-allocation graph scheme'.
What information must a new thread declare when it enters a system using the Banker's algorithm?,Its current CPU usage.,Its maximum demand for instances of each resource type.,The total time it expects to run.,Its priority level.,Whether it will ever release resources.,B,"When a new thread enters, it declares the maximum instances of each resource type needed (which cannot exceed total system resources)."
"Under the Banker's algorithm, a resource request is granted only if:",The requested resources are immediately available.,The allocation leaves the system in a safe state.,The requesting thread has the highest priority.,No other thread is currently waiting for any resource.,The system's total resource utilization is below 80%.,B,A request is granted only if allocation leaves the system in a safe state.
"In the Banker's algorithm, what does the `Available` vector represent?",The maximum number of instances of each resource type in the system.,The number of resources of each type currently allocated to threads.,The number of available resources of each type.,The remaining resource need of each thread.,The total number of threads waiting for resources.,C,`Available` is a vector of length $m$ representing the number of available resources of each type.
Which data structure in the Banker's algorithm represents the maximum demand of each thread?,Allocation,Need,Work,Max,Available,D,`Max` is an $n 	imes m$ matrix representing the max demand of each thread.
"In the Banker's algorithm, the `Need` matrix is calculated as:",`Need[i][j] = Available[j] - Allocation[i][j]`,`Need[i][j] = Max[i][j] + Allocation[i][j]`,`Need[i][j] = Max[i][j] - Allocation[i][j]`,`Need[i][j] = Allocation[i][j] - Available[j]`,`Need[i][j] = Work[j] - Max[i][j]`,C,The `Need` matrix represents the remaining resource need of each thread and is calculated as `Need[i][j] = Max[i][j] - Allocation[i][j]`.
What is the first step in the Banker's Safety Algorithm?,Find an index `i` such that `Finish[i] == false`.,Initialize `Work = Available` and `Finish[i] = false` for all threads.,Check if `Request_i <= Need_i`.,Grant the resource request.,Restore the old state of resources.,B,"The first step of the Safety Algorithm is to 'Initialize Work = Available, Finish[i] = false for i = 0, 1, ..., n-1'."
"In the Banker's Safety Algorithm, if no index `i` can be found such that `Finish[i] == false` and `Need_i <= Work`, what happens next?",The system is declared safe.,The algorithm restarts from step 1.,The algorithm proceeds to check if `Finish[i] == true` for all `i`.,A deadlock is immediately declared.,The `Work` vector is reset to `Available`.,C,"If no such `i` is found, the algorithm proceeds to step 4: 'If Finish[i] == true for all i, system is in safe state.'."
What is the time complexity of the Banker's Safety Algorithm?,$O(n)$ operations,$O(m + n)$ operations,$O(n^2)$ operations,$O(m 	imes n^2)$ operations,$O(m^2 	imes n)$ operations,D,The algorithm complexity for the Banker's Safety Algorithm is $O(m 	imes n^2)$ operations.
"When a thread $T_i$ makes a resource request $Request_i$ in the Banker's Resource-request algorithm, what is the first condition checked?",If $Request_i \le Available$,If the resulting state is safe.,If $Request_i \le Need_i$,If $Allocation_i + Request_i \le Max_i$,If $Need_i$ is zero.,C,"The first step is: 'If $Request_i \le Need_i$, go to step 2. Else, error (thread exceeded max claim).'"
"In the Banker's Resource-request algorithm, if $Request_i \le Available$ is false, what happens to thread $T_i$?",$T_i$ is immediately terminated.,The request is granted without further checks.,$T_i$ must wait.,The system enters an unsafe state.,The resource matrices are updated with the request.,C,"If $Request_i \le Available$ is false, it means the resources are currently unavailable, so '$T_i$ must wait'."
What happens during the 'pretend allocation' step in the Banker's Resource-request algorithm?,The system calculates the maximum possible future requests.,"The `Available` resources are increased, and `Allocation_i` is decreased.","The `Available`, `Allocation_i`, and `Need_i` matrices are updated as if the request were granted.",The algorithm checks for cycles in the resource graph.,The system asks for user confirmation to proceed.,C,"Pretend allocation involves updating `Available = Available - Request_i`, `Allocation_i = Allocation_i + Request_i`, and `Need_i = Need_i - Request_i`."
"If the state resulting from a 'pretend allocation' in the Banker's Resource-request algorithm is found to be unsafe, what action is taken?","The request is granted, but a warning is issued.",The system immediately initiates a deadlock recovery process.,"The request is granted, and the system moves to an unsafe state.","$T_i$ waits, and the old state of the resource allocation is restored.",All other threads are temporarily suspended.,D,"If the resulting state is unsafe (using the Safety Algorithm), then '$T_i$ waits, restore old state'."
