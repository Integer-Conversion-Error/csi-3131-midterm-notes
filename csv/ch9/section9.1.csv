Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
"What is the primary purpose of a computer system, and what must be true about programs and data during execution?",To manage networks; all programs and data must reside on external storage.,To execute programs; programs and data must be entirely in main memory.,To manage CPU scheduling; programs and data must be partially in main memory.,To execute programs; programs and data must be partially in main memory.,To store data; programs and data must be entirely on disk.,D,"The main purpose of a computer system is to execute programs, and during execution, programs and data must be partially in main memory."
Which of the following is true about modern computer systems regarding memory management?,They can only maintain one process in memory at a time.,Memory-management schemes are universal and do not vary.,Most memory management algorithms require specific software support only.,They maintain several processes concurrently in memory.,Memory management is solely handled by the user applications.,D,Modern systems are designed to maintain several processes in memory concurrently to improve CPU utilization and response speed.
What improves CPU utilization and response speed in a modern operating system?,Reducing the number of processes in memory.,Strictly limiting access to main memory.,"CPU Scheduling, which requires keeping many processes in memory.",Disabling hardware support for memory management.,Using only static linking for all programs.,C,"CPU Scheduling improves CPU utilization and response speed, and this requires keeping many processes in memory, necessitating memory sharing."
Which two general-purpose storage locations can the CPU access directly?,Hard disk and solid-state drive.,Main memory and registers.,Cache and external USB drives.,Network storage and CD-ROM.,Optical drives and magnetic tapes.,B,The CPU can only access instructions and data directly from main memory and registers.
How do access times for registers and main memory compare?,"Main memory is accessible within one CPU clock cycle, while registers take many cycles.",Registers and main memory have identical access times.,"Registers are accessible within one CPU clock cycle, while main memory may take many CPU cycles.",Access to main memory is faster than registers due to the memory bus.,Registers are slower than main memory because they are on the CPU chip.,C,"Registers are much faster, accessible within one CPU clock cycle, while main memory access via the memory bus can take many CPU cycles."
What is a 'stall' in the context of CPU operation?,A condition where the CPU runs at maximum speed.,"A state where the CPU is waiting for data from main memory, delaying execution.",An error that causes the CPU to halt permanently.,A process of transferring data between the CPU and registers.,A temporary increase in CPU clock speed to enhance performance.,B,"A 'stall' occurs when the CPU is forced to wait for data, typically from main memory, which delays its execution."
"What is the primary remedy for a CPU stall, and how is it managed?",Increasing the CPU clock speed; managed by the operating system.,Adding more main memory; managed by user programs.,Adding a fast memory called 'cache' between the CPU and main memory; managed automatically by hardware.,Implementing dynamic loading; managed by the application.,Using a faster memory bus; managed by the OS through privileged instructions.,C,"The remedy for a CPU stall is to add a fast memory called 'cache' between the CPU and main memory, and cache management is typically handled automatically by hardware with no OS control."
Why is memory protection necessary in a modern operating system?,To prevent unauthorized access to the CPU's registers.,To ensure that user processes can modify the operating system's code directly.,To protect the operating system from user processes and user processes from each other.,To allow all processes to share the same memory space without any restrictions.,To slow down memory access for security reasons.,C,"Memory protection is crucial for correct operation, protecting the OS from accidental or deliberate modification by user processes, and protecting user processes from each other."
How is memory protection typically implemented at the hardware level?,Through software-only checks by the operating system.,By assigning unique identifiers to each byte of memory.,Using a base register to store the smallest legal physical address and a limit register to store the size of the range.,By encrypting all memory contents to prevent unauthorized access.,By physically separating memory modules for different processes.,C,Memory protection is implemented by hardware using a base register to define the smallest legal physical memory address and a limit register to define the size of the legal address range.
What is the function of a base register in memory protection?,It defines the maximum legal physical memory address.,It stores the size of the memory region allocated to a process.,"It holds the starting address of an address space, representing the smallest legal physical memory address for a process.",It's used to store the last accessed memory address.,It manages the cache memory.,C,"The base register is a CPU register that holds the starting address of an address space, defining the smallest legal physical memory address for a process."
"What happens if a CPU, in user mode, attempts to access a memory address outside the range defined by its base and limit registers?",The access is silently redirected to a safe memory area.,"The operation completes successfully, but a warning is logged.",The CPU automatically adjusts the base and limit registers.,"A trap is generated to the operating system, indicating a fatal error.",The process is paused until the user manually corrects the address.,D,"An attempt to access memory outside the legal range defined by the base and limit registers results in a trap to the operating system, which treats it as a fatal error."
"Who is responsible for loading the base and limit registers, and what kind of instruction is used?",Any user process using a standard instruction.,The CPU hardware automatically during boot-up.,The operating system using a privileged instruction while in kernel mode.,The compiler during program compilation.,The linker/loader during program loading.,C,"The base and limit registers can only be loaded by the operating system using a privileged instruction while in kernel mode, ensuring proper memory protection."
Which of the following describes the sequence of address binding in a user program before execution?,Relocatable to symbolic to absolute.,Absolute to relocatable to symbolic.,Symbolic to absolute to relocatable.,Symbolic to relocatable to absolute.,Physical to logical to virtual.,D,"Addresses are initially symbolic in the source program, then the compiler binds them to relocatable addresses, and finally, the linker/loader binds relocatable addresses to absolute addresses."
What is 'binding' in the context of address management?,The process of compiling source code into an executable.,"The act of tying together different address spaces, such as symbolic to relocatable or relocatable to absolute.",The encryption of memory addresses for security.,The allocation of physical memory to a process.,The operation of moving data between cache and main memory.,B,"Binding refers to the process of tying together or mapping addresses from one address space to another, for example, from symbolic to relocatable or relocatable to absolute."
"Under what condition is 'absolute code' generated, and what type of address binding does it represent?",When the process can move during execution; execution-time binding.,When the process location is unknown at compile time; load-time binding.,When the process location is known at compile time; compile-time binding.,When dynamic loading is used; run-time binding.,When a relocation register is used; logical address binding.,C,"Absolute code is generated at compile time if the process's location in memory is known beforehand, representing compile-time binding."
When is 'relocatable code' typically generated?,Only when dynamic linking is employed.,If the process location in memory is unknown at compile time.,If the process location is fixed at compile time.,When the program is too large to fit in physical memory.,During the execution-time binding process.,B,Relocatable code is generated by the compiler if the process's location in main memory is not known until load time.
What is 'execution-time binding' used for?,When the program's memory location is fixed at compile time.,When the program's memory location is fixed at load time.,When the process can be moved in memory during its execution.,When static linking is preferred over dynamic linking.,When the program uses only registers for data storage.,C,"Execution-time binding is employed when the process can be moved around in memory during its execution, delaying the binding until run time."
What is the key difference between a logical address and a physical address?,"A logical address is seen by the memory unit, while a physical address is generated by the CPU.","A logical address is specific to the hardware, while a physical address is software-defined.",A logical address is generated by the CPU and translated before use; a physical address is the actual location in memory.,Logical and physical addresses are always identical in modern systems.,"A logical address refers to disk storage, while a physical address refers to main memory.",C,"A logical address is an address generated by the CPU, which is then translated by hardware to a physical address, which is the actual location in main memory."
"In the context of address binding, when do logical and physical addresses differ?","Always, as a fundamental principle of memory management.",Only when compile-time binding is used.,When execution-time binding is employed.,Only when load-time binding is used.,They never differ; they are just different names for the same thing.,C,"Logical and physical addresses differ when execution-time binding is used, meaning the process can be moved during execution, requiring run-time translation."
What is a 'virtual address' a synonym for?,Physical address.,Absolute address.,Logical address.,Relocatable address.,Symbolic address.,C,A logical address is also commonly referred to as a virtual address.
What hardware component is responsible for run-time mapping of virtual to physical addresses?,The CPU's arithmetic logic unit (ALU).,The hard disk controller.,The memory-management unit (MMU).,The graphics processing unit (GPU).,The network interface card (NIC).,C,The memory-management unit (MMU) is the hardware component responsible for translating logical (virtual) addresses to physical addresses at run time.
"In a simple MMU scheme, what is added to every address generated by a user process to create the physical address?",The value in the limit register.,The value in the program counter.,The value in the instruction register.,The value in the relocation register.,The base address of the operating system.,D,"In a simple MMU scheme, the value in the relocation register (a generalization of the base register) is added to every logical address generated by the user process to produce the physical address."
"From the perspective of a user program, what type of addresses does it typically deal with?",Only physical addresses directly.,"Real physical addresses, which it generates and accesses.","Logical addresses, with the memory-mapping hardware converting them to physical addresses.","Relocatable addresses, which are then manually converted to physical addresses.","Only symbolic addresses, without any direct interaction with memory locations.",C,A user program typically deals with logical addresses; it never accesses real physical addresses directly. The memory-mapping hardware (MMU) converts these logical addresses to physical ones.
What is 'dynamic loading' and what is its primary advantage?,"Loading the entire program into memory at process start, limiting process size.","Loading program routines only when they are called, improving memory-space utilization.",Loading data from a network drive instead of local storage.,The process of updating program code while it is running.,Loading system libraries at compile time to create a single executable.,B,"Dynamic loading means that a routine is not loaded until it is called. Its advantage is better memory-space utilization because routines are loaded only when needed, especially useful for large programs with infrequently used code."
Does dynamic loading typically require special operating system support?,"Yes, it is entirely managed by the OS.","No, it is primarily the responsibility of the user program.","Only for large programs, otherwise it's user responsibility.","It depends on the type of CPU, not the OS.","It requires special hardware, not OS support.",B,"Dynamic loading generally does not require any special operating system support; it is the responsibility of the user program to implement it, though the OS may provide library routines to help."
What are Dynamically Linked Libraries (DLLs) and when are they linked to user programs?,System libraries combined with user programs by the loader at compile time.,User-defined libraries that are linked manually by the developer.,"System libraries that are linked to user programs at run time, with linking postponed until execution.",Obsolete libraries no longer used in modern systems.,Libraries stored on a network drive and accessed remotely.,C,"Dynamically Linked Libraries (DLLs) are system libraries that are linked to user programs at run time, meaning the linking process is postponed until execution time."
What is a major advantage of using Dynamically Linked Libraries (DLLs) over static linking?,DLLs always result in larger executable file sizes.,DLLs provide better debugging capabilities for individual programs.,"DLLs allow system libraries to be shared among multiple processes, saving main memory.",Static linking offers better performance due to faster loading times.,DLLs make programs less portable across different operating systems.,C,"A significant advantage of DLLs (also known as shared libraries) is that they can be loaded once into memory and shared by multiple processes, which saves main memory space compared to static linking where each program has its own copy."
How do Dynamically Linked Libraries (DLLs) typically handle library updates and incompatible versions?,All programs must be recompiled and relinked manually when a DLL is updated.,"DLLs ignore version information, leading to potential crashes.","Programs use version information to ensure compatibility, and multiple versions of a library can be loaded concurrently.",DLLs are never updated once released to prevent compatibility issues.,Only programs compiled with the old library version can use the updated DLL.,C,"DLLs use version information to prevent incompatibilities. Multiple versions of a library can be loaded, and programs will use the version they were linked with. New versions only affect programs compiled with them, while older programs continue using older versions."
What is 'static linking'?,Linking that occurs only at execution time.,The process where system libraries are loaded dynamically when a routine is called.,A linking method where system libraries are combined by the loader into the binary program image.,A technique to move programs in memory during execution.,A method of memory management that uses a relocation register.,C,"Static linking is a linking method where system libraries are treated like object modules and combined by the loader into the final binary program image, meaning they become part of the executable file."
Does dynamic linking and the use of shared libraries generally require operating system help?,"No, it's entirely managed by the application program.","Yes, especially if processes are protected and need to access shared memory addresses.","Only for single-user systems, not multi-user.",Only if there is no cache memory present.,It depends on the amount of physical memory available.,B,"Dynamic linking and shared libraries generally require OS help, particularly if processes are protected, as the OS needs to check if a routine is already in another process's memory and allow multiple processes to access the same addresses."
"Which term describes a CPU state where it is waiting for data from main memory, causing delays in execution?",Cache hit,Bind,Stall,Trap,Relocation,C,"A 'stall' is defined as a CPU state when the CPU is waiting for data from main memory, which delays execution."
What is a 'cache' used for in a computer system?,To permanently store large datasets for archiving.,As a temporary copy of data in a reserved memory area to improve performance.,To convert logical addresses to physical addresses.,To manage network traffic between devices.,To perform arithmetic operations very quickly.,B,"A 'cache' is a temporary copy of data in a reserved memory area, strategically placed (like between CPU and main memory) to improve performance by reducing access times."
