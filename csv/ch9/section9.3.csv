Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following best defines 'Paging' in the context of memory management?,A scheme that allocates contiguous physical memory blocks to processes.,A method to compress logical memory into smaller physical spaces.,A memory-management scheme that allows a process's physical address space to be noncontiguous.,A technique primarily used to speed up disk I/O operations.,A system for encrypting memory contents to enhance security.,C,"Paging is a memory-management scheme specifically designed to allow the physical address space of a process to be noncontiguous, which helps in avoiding external fragmentation."
What is one primary advantage of using Paging for memory management?,It eliminates internal fragmentation completely.,It guarantees faster CPU clock speeds.,It avoids external fragmentation and compaction issues.,It simplifies the physical memory layout for contiguous allocation.,It reduces the need for hardware support in memory translation.,C,"Paging is beneficial because it avoids external fragmentation, a common problem in contiguous memory allocation, and thus eliminates the need for compaction."
"In paging, what are the fixed-sized blocks of physical memory called?",Pages,Segments,Clusters,Frames,Blocks,D,"Physical memory is broken into fixed-sized blocks known as frames, while logical memory is broken into same-sized blocks called pages."
What are the two main parts into which a CPU-generated logical address is divided in a paged memory system?,Segment number and offset,Base address and limit register,Page number and page offset,Frame number and frame offset,Process ID and memory address,C,A CPU-generated logical address in a paged system is divided into a page number (p) and a page offset (d).
What is the primary function of the 'page table' in a paged memory system?,To store the contents of each logical page.,To record which processes are currently running.,To map logical page numbers to physical frame numbers.,To manage disk space allocation for backing store.,To store CPU register values for context switching.,C,The page table is a per-process data structure that contains the base address (or frame number) of each frame in physical memory corresponding to a logical page number.
"If a logical address space is $2^m$ bytes and the page size is $2^n$ bytes, how are the page number and page offset determined?",Page number: low-order $n$ bits; Page offset: high-order $m-n$ bits.,Page number: high-order $m-n$ bits; Page offset: low-order $n$ bits.,Page number: $m$ bits; Page offset: $n$ bits.,Page number: low-order $m-n$ bits; Page offset: high-order $n$ bits.,Page number: $n$ bits; Page offset: $m-n$ bits.,B,"For a logical address space of $2^m$ bytes and a page size of $2^n$ bytes, the high-order $m-n$ bits represent the page number, and the low-order $n$ bits represent the page offset."
What type of fragmentation is generally associated with paging?,External fragmentation only,Both external and internal fragmentation,Internal fragmentation only,No fragmentation,Contiguous fragmentation,C,"Paging avoids external fragmentation because any free frame can be allocated. However, it may result in internal fragmentation if the last frame allocated to a process is not completely filled."
What is the average internal fragmentation per process in a paged system?,One full page,No internal fragmentation,One-quarter page,One-half page,Varies significantly with no average,D,"The average internal fragmentation is approximately one-half page per process, as the last page may be partially used."
Which of the following statements about page size is generally true?,Smaller page sizes increase internal fragmentation.,Larger page sizes improve disk I/O efficiency.,Page sizes are typically not powers of 2.,Page sizes have decreased over time.,The optimal page size is always 1 KB.,B,"While smaller page sizes reduce internal fragmentation, larger page sizes reduce overhead per page-table entry and make disk I/O more efficient with larger data transfers."
What is the function of the 'frame table' maintained by the operating system?,It maps logical addresses to physical addresses for all processes.,It stores CPU register values during context switches.,It tracks the allocation status of each physical page frame (free/allocated) and which process/page it belongs to.,It contains the page tables for all active processes.,It caches frequently accessed page table entries.,C,"The frame table is a system-wide data structure with one entry per physical page frame, indicating whether the frame is free or allocated, and if allocated, to which process and page."
"When page tables are kept in main memory, what CPU register is used to point to the base of the current process's page table?",Instruction Pointer (IP),Stack Pointer (SP),Page-Table Base Register (PTBR),Memory Data Register (MDR),Program Counter (PC),C,"When the page table is stored in main memory, the Page-Table Base Register (PTBR) holds the base address of the current page table."
What is the primary drawback of storing page tables in main memory without additional hardware support?,Increased internal fragmentation.,Slower memory access times due to two memory accesses for each data access.,Inability to support shared pages.,Higher CPU utilization for page table management.,Elimination of dynamic relocation.,B,"Storing the page table in main memory means that accessing a data item requires two memory accesses: one to fetch the page-table entry and another to fetch the actual data, effectively doubling memory access time."
What is a 'Translation Look-aside Buffer' (TLB) primarily used for?,Buffering disk I/O operations.,Caching frequently used instructions.,"A small, fast-lookup hardware cache for page table entries.",Managing the queue of processes waiting for CPU time.,Translating assembly code into machine code.,C,"The TLB is a special, small, fast-lookup hardware cache designed to speed up address translation by caching a subset of the page table entries."
What happens during a 'TLB miss' when translating a logical address?,The system immediately generates a memory protection fault.,The CPU fetches the frame number directly from main memory without using the page table.,A memory reference is made to the page table in main memory to obtain the frame number.,The process is immediately swapped out to backing store.,The TLB automatically updates its contents from disk.,C,"If a page number is not found in the TLB (a TLB miss), a memory reference must be made to the page table in main memory to retrieve the corresponding frame number."
What is an 'Address-Space Identifier' (ASID) in a TLB entry used for?,To specify the size of the logical address space.,To uniquely identify a process and allow the TLB to contain entries for multiple processes simultaneously.,To indicate whether a page is valid or invalid.,To determine the priority of a process for TLB access.,To mark a TLB entry as 'wired down'.,B,"An ASID uniquely identifies the process that owns a TLB entry, allowing the TLB to hold translations for multiple processes concurrently without flushing on every context switch if the ASID matches."
"If a TLB does not use ASIDs, what must happen on every context switch?",The TLB must be expanded to accommodate new entries.,The TLB must be 'flushed' (erased) to prevent incorrect translations.,The operating system must rebuild the page table from scratch.,The CPU must halt all memory access until the TLB is manually reloaded.,All pages for the outgoing process must be written to disk.,B,"If a TLB does not store ASIDs, it must be flushed on every context switch to ensure that the next process does not use old, incorrect translation information from the previous process."
What is the 'hit ratio' in the context of a TLB?,The percentage of processes that use the TLB.,The total number of entries a TLB can hold.,The percentage of times a page number is found in the TLB.,The ratio of TLB size to main memory size.,The frequency of TLB flush operations.,C,"The hit ratio is the percentage of times that the requested page number is found in the TLB, indicating the effectiveness of the cache."
"Consider a system with a memory access time of 10 ns. If the TLB hit ratio is 80%, and a TLB miss adds an extra 10 ns (for page table lookup in main memory), what is the effective memory-access time?",10 ns,12 ns,14 ns,18 ns,20 ns,B,"Effective Memory-Access Time = (Hit Ratio * TLB Access Time) + (Miss Ratio * (TLB Access Time + Page Table Access Time)). Given 10 ns for memory access (which is also TLB access on a hit, and page table access on a miss), and a 80% hit ratio: (0.80 * 10 ns) + (0.20 * (10 ns + 10 ns)) = (0.80 * 10 ns) + (0.20 * 20 ns) = 8 ns + 4 ns = 12 ns."
How is memory protection implemented in a paged environment?,By encrypting all memory contents.,By storing protection bits in the CPU's general-purpose registers.,"By assigning protection bits to each frame in the page table, checked on every memory reference.",By requiring user confirmation for every memory write operation.,By physically separating user and kernel memory with hardware walls.,C,"Memory protection in a paged environment is achieved by associating protection bits (e.g., read-write, read-only, execute-only) with each frame entry in the page table, which are checked during the address translation process."
What is the purpose of the 'valid-invalid' bit in a page table entry?,To indicate if the page has been modified since it was loaded.,To mark whether the page is currently in physical memory or on disk.,To specify if the page is part of the process's legal logical address space or not.,To denote if the page is shared among multiple processes.,To control the caching policy for the specific page.,C,The valid-invalid bit indicates whether the corresponding page is a legal page within the process's logical address space. An attempt to access a page marked invalid results in a trap to the OS.
What is 'reentrant code' and why is it important for shared pages?,Code that can be loaded into memory multiple times for performance.,"Code that modifies itself during execution, ensuring uniqueness.","Non-self-modifying code that can be executed simultaneously by multiple processes, allowing memory sharing.",Code that automatically reconfigures its page table entries.,Code specifically designed for single-process execution to avoid conflicts.,C,"Reentrant code is non-self-modifying, meaning it does not change during execution. This property allows multiple processes to execute the same copy of the code simultaneously, making it suitable for sharing in a paged environment."
"In a system with shared pages, what typically happens if 40 processes all need to use the standard C library (libc)?",Each process loads its own full copy of libc into physical memory.,"Only one copy of libc is loaded into physical memory, and all processes' page tables map to it.",The operating system prevents processes from using libc simultaneously.,Libc is converted into a non-reentrant form for security.,Libc is stored exclusively in the TLB for fast access.,B,"If libc is reentrant code, only one copy needs to be loaded into physical memory. The page tables for all user processes can then map their logical pages to this single shared physical copy, resulting in significant memory savings."
What is the purpose of the 'page-table length register' (PTLR)?,To store the number of physical frames available in the system.,To indicate the size of the current process's page table.,To count the number of TLB misses.,To define the maximum allowable page size.,To track the total number of logical addresses generated by a process.,B,"The page-table length register (PTLR) indicates the size of the page table for the current process, which can be checked against a logical address to verify it falls within the valid range."
Which of the following is true regarding the impact of paging on context-switch time?,Paging significantly reduces context-switch time due to simpler memory management.,Paging has no impact on context-switch time.,Paging increases context-switch time because the OS needs to reload the hardware page table and potentially flush the TLB.,Paging only affects context-switch time if page tables are stored in dedicated hardware registers.,Paging decreases context-switch time because processes share page tables.,C,"Paging generally increases context-switch time because the CPU dispatcher must reload the hardware page table (e.g., PTBR) for the new process and, if ASIDs are not used, flush the TLB."
What is 'wired down' in the context of TLB entries?,An entry that is marked for immediate removal from the TLB.,"An entry that cannot be removed from the TLB by the usual replacement algorithms, typically used for frequently accessed kernel code.",An entry that signifies a page fault has occurred and the page needs to be loaded from disk.,An entry that points to an invalid or unallocated physical frame.,An entry that is temporarily disabled until a specific event occurs.,B,"Some TLBs allow entries to be 'wired down', meaning they are locked into the TLB and cannot be removed by standard replacement policies, often used for critical kernel code that needs constant fast access."
