Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What are the three common techniques for structuring the page table mentioned in the text?,"Segmented paging, Indexed paging, Clustered paging","Hierarchical paging, Hashed page tables, Inverted page tables","Single-level paging, Multi-level paging, Forward-mapped paging","Direct-mapped paging, Cache-based paging, Linked-list paging","Virtual paging, Physical paging, Logical paging",B,"The text explicitly states that it ""Explores common techniques for structuring the page table: hierarchical paging, hashed page tables, and inverted page tables."""
What primary problem does the hierarchical paging scheme attempt to solve in modern computer systems?,Reducing the complexity of virtual address translation at the hardware level.,Minimizing the number of Translation Lookaside Buffer (TLB) misses.,Handling excessively large page tables that result from large logical address spaces.,Improving the speed of I/O operations by optimizing page transfers.,Enabling shared memory between multiple processes more efficiently.,C,"The text identifies that ""Modern computer systems support large logical address spaces... Page table itself becomes excessively large,"" and that hierarchical paging is a ""Solution: divide page table into smaller pieces."""
"For a 32-bit logical address space with a 4 KB page size, how many entries would a single-level page table typically have?",2^10 entries,2^12 entries,2^20 entries,2^32 entries,2^4 entries,C,"A 32-bit logical address space and 4 KB ($2^{12}$ bytes) page size implies a 12-bit page offset. The remaining bits for the page number are 32 - 12 = 20 bits. Thus, the page table would have $2^{20}$ entries."
"Considering a 32-bit logical address space with a 4 KB page size, if each page table entry is 4 bytes, how much physical memory could a single process's page table occupy?",4 KB,1 MB,4 MB,16 MB,1 GB,C,"The example calculates that with $2^{20}$ entries and 4 bytes per entry, the page table would consume ""up to 4 MB physical address space for page table alone"" ($2^{20} 	imes 4 	ext{ bytes} = 4,194,304 	ext{ bytes} = 4 	ext{ MB}$). "
"In a two-level paging algorithm for a 32-bit logical address space with a 4 KB page size, how is the 20-bit page number logically divided?",5-bit outer page number ($p_1$) and 15-bit inner page offset ($p_2$),12-bit outer page number ($p_1$) and 8-bit inner page offset ($p_2$),10-bit outer page number ($p_1$) and 10-bit inner page offset ($p_2$),15-bit outer page number ($p_1$) and 5-bit inner page offset ($p_2$),20-bit outer page number ($p_1$) and 0-bit inner page offset ($p_2$),C,"The text specifies: ""Page number further divided: $p_1$: 10-bit outer page number... $p_2$: 10-bit inner page offset."""
What is another term used to describe a hierarchical page table where address translation starts at the outer page table and moves inward?,Backward-mapped page table,Inverted page table,Hashed page table,Forward-mapped page table,Clustered page table,D,"The text explicitly states that this scheme is ""Also known as a forward-mapped page table."" The glossary also confirms this definition."
Why are hierarchical page tables generally considered inappropriate for 64-bit architectures?,They increase the complexity of I/O operations.,"They would require an excessive number of paging levels, leading to prohibitive memory accesses.",They are not compatible with the instruction sets of 64-bit CPUs.,They result in insufficient memory utilization for large address spaces.,They lack the necessary security features for modern 64-bit systems.,B,"The text states that a ""64-bit UltraSPARC: would require seven levels of paging (prohibitive memory accesses)"" and concludes that ""Hierarchical page tables generally inappropriate for 64-bit architectures."""
What is the primary purpose of hashed page tables?,To optimize physical memory allocation for small systems.,To handle address spaces larger than 32 bits.,To eliminate the need for a Translation Lookaside Buffer (TLB).,To provide direct mapping from virtual to physical addresses without intermediate structures.,To reduce the number of entries in the main system page table.,B,"The text states that hashed page tables are an ""Approach for handling address spaces larger than 32 bits."""
"In a hashed page table, what is typically used as the hash value?",The physical page number.,The page offset.,The virtual page number.,The process identifier (PID).,A combination of physical and virtual addresses.,C,"The text explicitly states: ""Hash value: virtual page number."""
How do hashed page tables typically resolve collisions when multiple virtual page numbers map to the same hash table entry?,By discarding the conflicting entry and marking it as an error.,By using a secondary hashing function to re-distribute entries.,By maintaining a linked list of elements at each hash table entry.,By dynamically resizing the hash table when collisions occur.,By triggering a page fault and loading the correct page.,C,"The text specifies that ""Each entry in hash table: linked list of elements (to handle collisions)."""
"What is a distinguishing characteristic of clustered page tables, a variation of hashed page tables for 64-bit address spaces?",Each entry refers to a single virtual page only.,They are exclusively used for mapping kernel memory regions.,"Each entry refers to several pages (e.g., 16), storing mappings for multiple physical-page frames.",They do not utilize a hash function for address lookup.,"They are optimized for dense, contiguous address spaces rather than sparse ones.",C,"The text states that in clustered page tables, ""Each entry refers to several pages (e.g., 16) instead of a single page,"" and they ""Single page-table entry stores mappings for multiple physical-page frames."""
For which type of address spaces are clustered page tables particularly useful?,Address spaces with very few entries.,Dense and contiguous address spaces.,"Sparse address spaces, where memory references are noncontiguous and scattered.",Physical address spaces exclusively.,"Small, fixed-size address spaces.",C,"The text states that clustered page tables are ""Useful for sparse address spaces (memory references noncontiguous, scattered)."" The glossary defines 'sparse' as a page table with noncontiguous, scattered entries or an address space with many holes."
What is the fundamental difference between an inverted page table and a standard page table regarding their entries?,"Standard page tables have one entry per process, while inverted have one entry per virtual page.","Standard page tables have one entry for each virtual address, while inverted page tables have one entry for each real physical page frame.","Inverted page tables are sorted by process ID, while standard page tables are sorted by virtual address.","Inverted page tables store only physical addresses, whereas standard page tables store only virtual addresses.","Standard page tables are managed by hardware, while inverted page tables are managed by software.",B,"The text clarifies: ""Standard page table: one entry for each page process is using (or each virtual address)... Inverted page table: one entry for each real page (frame) of memory."""
What information does each entry in an inverted page table typically contain?,Only the physical page number and permissions.,The virtual address of the page stored in that real memory location and process information.,The logical page number and page offset for all active processes.,A pointer to the next element in a linked list for collision resolution.,The hash value of the corresponding virtual page number.,B,"The text states that ""Each entry: virtual address of page stored in that real memory location, plus process information."""
How many inverted page tables typically exist within a single system?,One per active process.,One per CPU core.,One per physical memory block.,Only one for the entire system.,"Multiple, depending on the number of installed memory modules.",D,"The text specifies, ""Only one page table in system, one entry per physical memory page."""
What is a significant drawback of inverted page tables concerning address lookup performance?,They inherently cause more Translation Lookaside Buffer (TLB) misses.,"They increase the time to search the table because it's sorted by physical address, but lookups are by virtual address.","They are incompatible with multi-level paging schemes, slowing down translation.","They always require two physical memory reads for a single virtual memory reference, even with a hit.","They cannot support dynamic memory allocation, leading to fragmentation.",B,"The text notes, ""Drawback: increases time to search table (sorted by physical address, lookups by virtual address)."""
How is the increased search time drawback of inverted page tables commonly alleviated?,By reducing the page size to decrease table complexity.,By using a hash table to limit the search space.,By increasing the number of physical memory frames.,By storing the entire page table in the Translation Lookaside Buffer (TLB).,By implementing a Least Recently Used (LRU) page replacement policy.,B,"The text states, ""Alleviation: use a hash table to limit search."""
Which of the following describes a key issue with shared memory when using inverted page tables compared to standard paging?,Inverted page tables allow more flexible shared memory by design.,"Standard paging allows only one virtual address per physical page, while inverted allows many.","Inverted page tables allow only one virtual page entry for every physical page, making it difficult for multiple processes to directly share memory without special handling.",Shared memory segments are automatically swapped to disk with inverted page tables.,Inverted page tables do not support any form of shared memory.,C,"The text explains: ""Standard paging: multiple virtual addresses map to same physical address. Inverted page tables: only one virtual page entry for every physical page. One physical page cannot have two (or more) shared virtual addresses. Reference by another process sharing memory: page fault, replaces mapping."""
How does the Oracle SPARC Solaris system primarily solve the virtual memory problem efficiently for its 64-bit architecture?,By implementing a complex seven-level hierarchical page table structure.,"By exclusively using a single, centralized inverted page table.",Through the efficient use of hashed page tables.,"By eliminating the need for any form of page tables, using direct address mapping.",By relying solely on the Translation Lookaside Buffer (TLB) for all translations.,C,"The text states that Solaris ""Solves virtual memory problem efficiently using hashed page tables."""
How many distinct hash tables does Oracle SPARC Solaris typically utilize for virtual to physical memory mapping?,"One for all processes, including the kernel.",Two: one for the kernel and one for all user processes.,One for each active user process.,One per CPU core to minimize contention.,"Three: one for kernel, one for user, and one for shared memory.",B,"The text states, ""Two hash tables: one for kernel, one for all user processes."""
"In Oracle SPARC Solaris, what information does each hash-table entry typically represent for virtual memory mapping?",A single virtual page number mapped to a single physical page frame.,A linked list of all virtual pages that hash to that entry.,"A contiguous area of mapped virtual memory, including a base address and a span (number of pages represented).",A pointer to an entry in an inverted page table.,Only the permissions and dirty bit for a specific page.,C,"The text explains, ""Each hash-table entry: contiguous area of mapped virtual memory (more efficient than per-page entry). Entry has base address and span (number of pages represented)."""
What is the primary function of the TLB (Translation Lookaside Buffer) in the SPARC Solaris virtual memory system?,To store the complete page table in main memory.,To hold Translation Table Entries (TTEs) for fast hardware lookups.,To manage physical memory allocation and deallocation.,To handle page faults by initiating disk I/O.,To provide a software-managed cache for process IDs.,B,"The text states, ""TLB (Translation Lookaside Buffer): holds translation table entries (TTEs) for fast hardware lookups."""
What is the Translation Storage Buffer (TSB) in the SPARC Solaris system?,The primary disk storage area for virtual memory pages.,A hardware component responsible for hashing virtual addresses.,A cache of Translation Table Entries (TTEs) that includes an entry per recently accessed page.,A software routine that manages the page fault handling process.,The physical memory region where the kernel's hash table resides.,C,"The text defines it as a ""Cache of TTEs: translation storage buffer (TSB). TSB includes entry per recently accessed page."""
What specifically describes a 'TLB walk' in the context of virtual memory management?,The process of flushing all entries from the TLB.,The steps involved in traversing page-table structures to locate a needed translation and copying the result into the TLB.,A hardware error that occurs when the TLB cannot find a translation.,A software routine that preloads the TLB with frequently accessed translations.,The movement of a page from physical memory to disk when memory is low.,B,"The glossary defines ""TLB walk"" as ""Steps involved in traversing page-table structures to locate a needed translation and copying the result into the TLB."" The virtual address reference process also outlines this step."
Under what specific condition does the kernel get interrupted during the virtual address reference process in Oracle SPARC Solaris?,When the hardware successfully finds a translation in the TLB.,When a match is found in the Translation Storage Buffer (TSB).,When neither the Translation Lookaside Buffer (TLB) nor the Translation Storage Buffer (TSB) contains the required translation.,When the Memory Management Unit (MMU) successfully completes address translation.,When data is finally retrieved from the main memory location.,C,"The virtual address reference process outlines: ""1. Hardware searches TLB for translation. 2. None found: hardware walks through in-memory TSB... 4. No match in TSB: kernel interrupted to search hash table."""
The term 'sparse' in memory management refers to:,A memory region that is densely packed with frequently accessed data.,"A page table with noncontiguous, scattered entries; an address space with many holes.",A type of physical memory characterized by very fast access times.,A condition where a system has an abundance of available free physical memory.,A process that is designed to use a minimal amount of memory resources.,B,"The glossary defines 'sparse' as ""In memory management, describes a page table with noncontiguous, scattered entries; an address space with many holes."""
