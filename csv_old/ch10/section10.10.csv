Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
How does the Linux operating system manage virtual memory?,By allocating fixed-size partitions to processes.,Through a segmentation-only approach.,Using demand paging.,With a pure swapping mechanism.,Primarily via static memory allocation.,C,The text states that 'Linux manages virtual memory using demand paging.'
From which source does Linux allocate pages for virtual memory management?,A dedicated swap partition only.,A dynamically growing heap segment.,A list of free frames.,Pre-allocated contiguous memory blocks.,The user-space memory pool directly.,C,Linux 'Allocates pages from a list of free frames.'
What kind of global page-replacement policy does Linux implement?,"First-In, First-Out (FIFO) with a global scope.",Optimal Page Replacement Algorithm.,Least Recently Used (LRU) with exact tracking.,A global LRU-approximation clock algorithm (second-chance).,Most Frequently Used (MFU) across all processes.,D,Linux uses a 'Global page-replacement policy: similar to LRU-approximation clock algorithm (second-chance).'
Which two page lists does the Linux kernel maintain for virtual memory management?,kernel_list and user_list,read_list and write_list,active_list and inactive_list,cache_list and buffer_list,primary_list and secondary_list,C,Linux 'Maintains two page lists: active_list and inactive_list.'
"In Linux, what kind of pages are considered to be in use and are held in the `active_list`?",Pages that are currently being written to secondary storage.,Pages that have not been referenced recently and are candidates for reclamation.,Pages considered in use.,Pages that store kernel internal data structures only.,Pages reserved for future allocations.,C,The `active_list` holds 'pages considered in use.'
What is the primary purpose of the `inactive_list` in Linux's virtual memory management?,To store pages that are part of the kernel's critical working set.,To hold pages that are not recently referenced and are eligible for reclamation.,To buffer pages before they are moved to the `active_list`.,To maintain a history of all page faults.,To temporarily store pages that have been swapped out.,B,"The `inactive_list` contains 'pages not recently referenced, eligible for reclamation.'"
What is the function of the 'accessed' bit for a page in Linux's virtual memory management?,It indicates if the page has been modified since it was last written to disk.,It controls read/write permissions for the page.,It is set when the page is referenced.,It marks the page as exclusively for kernel use.,It signifies that the page is currently being swapped out.,C,Each page has an 'accessed' bit (set when referenced).
"When a page is first allocated in Linux, what happens to its `accessed` bit and its placement in the page lists?","The `accessed` bit is cleared, and it's added to the front of the `inactive_list`.","The `accessed` bit is set, and it's added to the rear of the `active_list`.","The `accessed` bit is set, and it's added to the front of the `active_list`.","The `accessed` bit is cleared, and it's added to the rear of the `inactive_list`.","The `accessed` bit remains unchanged, and it's placed in a separate allocation queue.",B,"When 'Page first allocated: accessed bit set, added to rear of active_list.'"
"If a page that is already in the `active_list` in Linux is referenced again, what is the effect on that page?","Its `accessed` bit is cleared, and it moves to the front of the list.",It immediately migrates to the `inactive_list`.,"Its `accessed` bit is set, and it moves to the rear of the list.","Its `accessed` bit is set, but its position in the list remains unchanged.",It triggers a page-out operation.,C,"If a 'Page in active_list referenced: accessed bit set, moves to rear of list.'"
What periodic action does Linux perform on the `accessed` bits of pages located in the `active_list`?,They are inverted.,They are reset.,They are copied to a separate log.,They are randomly toggled.,They are permanently locked.,B,Periodically: 'accessed bits for pages in active_list reset.'
"What happens to the least recently used page, which is at the front of the `active_list`, in Linux's memory management?",It is immediately swapped out to disk.,It is promoted to a higher priority queue.,It remains in the `active_list` indefinitely.,It may migrate to the rear of the `inactive_list`.,Its `accessed` bit is automatically set to 1.,D,"The 'Least recently used page: at front of active_list, may migrate to rear of inactive_list.'"
"In Linux, if a page that is currently in the `inactive_list` is referenced, where does it move?",It is immediately reclaimed to the free list.,It moves to the front of the `inactive_list`.,It moves back to the rear of the `active_list`.,It becomes part of a kernel-reserved memory area.,It remains in the `inactive_list` but its `accessed` bit is set.,C,If a 'Page in inactive_list referenced: moves back to rear of active_list.'
When does Linux move pages from the front of the `active_list` to the `inactive_list` to make them eligible for reclamation?,When the `inactive_list` grows larger than the `active_list`.,"Periodically, regardless of list sizes.",When the `active_list` grows larger than the `inactive_list`.,When total free memory reaches a critical high threshold.,Only when a process explicitly requests memory freeing.,C,When the 'active_list grows larger than inactive_list: pages from front of active_list move to inactive_list (eligible for reclamation).'
What is the name of the page-out daemon process in the Linux kernel?,pagedaemon,memmgrd,kswapd,vmmgr,activepaged,C,The Linux kernel has a 'page-out daemon process kswapd.'
What action does the Linux `kswapd` process take if the amount of free memory falls below a certain threshold?,It signals all active processes to release memory.,It immediately swaps out the largest idle process.,It scans the `inactive_list` and reclaims pages for the free list.,It increases the size of the `active_list`.,It requests more physical memory from hardware.,C,"If free memory falls below threshold: 'kswapd scans inactive_list, reclaims pages for free list.'"
Which system architectures and bit systems does Windows 10 support according to the text?,Only 64-bit Intel systems.,"32-bit and 64-bit systems, including Intel and ARM.","Mainly ARM, with limited Intel support.",Only 32-bit systems for legacy applications.,Only specialized server architectures.,B,"Windows 10 'supports 32- and 64-bit systems (Intel, ARM).'"
What are the default virtual address space and physical memory limits for 32-bit systems running Windows?,"1 GB virtual address space, 2 GB physical memory.","2 GB virtual address space (extendable to 3 GB), 4 GB physical memory.","4 GB virtual address space, 8 GB physical memory.","128-TB virtual address space, 24 TB physical memory.","Unlimited virtual address space, 4 GB physical memory.",B,"32-bit systems have 'default 2 GB virtual address space (extendable to 3 GB), 4 GB physical memory.'"
"What are the typical virtual address space and physical memory limits for 64-bit systems running Windows, according to the text?","4 GB virtual address space, 16 GB physical memory.","2 GB virtual address space, 4 GB physical memory.","128-TB virtual address space, up to 24 TB physical memory (Windows Server up to 128 TB).","1 TB virtual address space, 64 GB physical memory.","Unlimited virtual address space, 128 TB physical memory.",C,"64-bit systems have '128-TB virtual address space, up to 24 TB physical memory (Windows Server up to 128 TB).'"
Which of the following memory management features are implemented by Windows?,Fixed partitioning and segmentation without demand paging.,Pure swapping and contiguous allocation.,"Shared libraries, demand paging, copy-on-write, paging, memory compression.",Pre-paging and static allocation only.,Only demand paging and shared libraries.,C,"Windows 'Implements: shared libraries, demand paging, copy-on-write, paging, memory compression.'"
How does Windows implement demand paging in its virtual memory system?,Through a strict FIFO algorithm.,Using a technique called 'prefetching'.,With 'clustering'.,By employing an optimal page replacement strategy.,Via direct memory access (DMA) only.,C,Windows' 'Virtual memory: demand paging with clustering.'
What is the definition of 'clustering' in the context of Windows' virtual memory management?,Grouping similar processes together for efficient scheduling.,Bringing in multiple instances of the same shared library page.,Handling page faults by bringing in the faulting page plus several immediately preceding/following pages.,Consolidating fragmented free memory spaces.,Allowing processes to share physical memory frames without logical contiguity.,C,Clustering is defined as handling 'page faults by bringing in faulting page + several immediately preceding/following pages.'
"When a page fault occurs for a data page in Windows, how many pages are brought into memory due to clustering?",1 page (the faulting page only).,2 pages (the faulting page + one more).,3 pages (faulting + one before + one after).,5 pages (faulting + two before + two after).,"7 pages, regardless of page type.",C,For a 'Data page: 3 pages (faulting + one before + one after).'
"For page faults other than data pages, how many pages does Windows typically bring into memory using clustering?",1 page.,3 pages.,5 pages.,7 pages.,The number varies randomly.,D,For 'Other page faults: 7 pages.'
What is identified as a key component of memory management in Windows?,Strict static partitioning.,Direct hardware register manipulation.,Working-set management.,Exclusive use of segmentation.,Pre-allocation of all required memory.,C,A 'Key component: working-set management.'
"When a process is created in Windows, what are the default `working-set minimum` and `working-set maximum` values assigned?","Minimum 10 pages, Maximum 100 pages.","Minimum 25 pages, Maximum 250 pages.","Minimum 50 pages, Maximum 345 pages.","Minimum 100 pages, Maximum 500 pages.",No default values; they must be configured manually.,C,Process creation: 'assigned working-set minimum (50 pages) and working-set maximum (345 pages).'
"In Windows, what does the term 'working-set minimum' signify?",The maximum number of pages a process is allowed to use.,The minimum number of pages guaranteed to a process in memory.,The total physical memory installed in the system.,The number of pages currently being swapped out for a process.,A threshold below which processes are terminated.,B,'Working-set minimum: minimum pages guaranteed in memory.'
What does the 'working-set maximum' represent in Windows memory management?,The minimum number of frames a process requires to run.,The total available virtual address space.,The maximum number of pages allowed if sufficient memory.,The number of pages a process is currently using.,A fixed limit that cannot be exceeded under any circumstances.,C,'Working-set maximum: maximum pages allowed if sufficient memory.'
What is a characteristic of 'hard working-set limits' in Windows?,They always override all other memory management policies.,"If configured, the working-set minimum and maximum values may be ignored.",They automatically expand a process's working set.,They only apply to kernel processes.,They guarantee a process will never exceed its maximum.,B,"'Hard working-set limits: if configured, values may be ignored.'"
Can a process in Windows grow its memory usage beyond its `working-set maximum`?,"No, this limit is absolute.",Only if explicitly approved by a system administrator.,"Yes, if sufficient memory is available.",Only for critical system processes.,Only if a 'hard working-set limit' is set.,C,A 'Process can grow beyond maximum if memory available.'
Under what circumstances can memory allocated to a process in Windows shrink below its `working-set minimum`?,Never; the minimum is a strict guarantee.,Only if the process voluntarily releases memory.,During times of high memory demand.,When the process is idle for an extended period.,If the system crashes unexpectedly.,C,Memory allocated to a process 'can shrink below minimum during high demand.'
What page replacement algorithm and policies does Windows utilize?,FIFO with only a global policy.,Optimal with only a local policy.,LRU-approximation clock algorithm (second-chance) with local and global policies.,Most Recently Used (MRU) with both local and global policies.,Random page replacement without specific policies.,C,Page replacement: 'LRU-approximation clock algorithm (second-chance) with local and global policies.'
What does the Windows Virtual Memory Manager maintain to facilitate page allocation?,"A single, fixed-size buffer for all processes.",A detailed log of all page accesses.,A free page frames list with a threshold.,Separate free lists for each process.,A table of pre-assigned physical addresses.,C,The 'Virtual memory manager: maintains free page frames list with threshold.'
"If a process in Windows incurs a page fault while its working set is below its `working-set maximum`, what action is taken?",The process is immediately swapped out.,A page is allocated from the free list.,It triggers an automatic working-set trimming.,The system pauses until more memory becomes available.,A page is forcefully removed from another process.,B,If a 'Page fault for process below working-set maximum: allocates page from free list.'
"When a process in Windows incurs a page fault while already at its `working-set maximum`, but sufficient free memory is available, what happens?","The page fault is denied, and the process stalls.","A free page is allocated, allowing the process to grow beyond its maximum.",The process's `working-set maximum` is automatically increased.,The system immediately triggers global page replacement.,The faulting page is fetched from secondary storage without affecting working set.,B,"If 'Process at working-set maximum, page fault, sufficient memory: allocated free page (grows beyond maximum).'"
"If there is insufficient free memory in Windows and a page fault occurs, which policy is applied to choose a page for replacement from the faulting process's working set?",A global FIFO policy.,A local LRU policy.,A random page selection policy.,A system-wide least frequently used policy.,No page replacement occurs until more memory is freed manually.,B,If there's 'Insufficient free memory: kernel selects page from process's working set for replacement (local LRU policy).'
What global replacement tactic is activated in Windows when free memory falls below a certain threshold?,Manual memory defragmentation.,Automatic working-set trimming.,Demand paging acceleration.,Page prefetching enhancement.,Process prioritization boost.,B,If 'Free memory falls below threshold: global replacement tactic automatic working-set trimming.'
What is the primary objective of 'automatic working-set trimming' in Windows?,To increase the `working-set maximum` for all processes.,To evaluate pages allocated to processes and reclaim memory.,To reorder pages within a process's working set for faster access.,To prevent any process from ever exceeding its `working-set minimum`.,To log all memory access patterns for debugging.,B,'Automatic working-set trimming: evaluates pages allocated to processes.'
"How does 'automatic working-set trimming' typically reclaim pages in Windows, and which processes are targeted first?","It removes pages from active processes until free memory is sufficient, targeting smaller processes first.",It randomly removes pages from all processes until the memory threshold is met.,"It removes pages from processes with more than their `working-set minimum` until sufficient memory or the process reaches its minimum, prioritizing larger, idle processes.",It only trims pages from processes that have exceeded their `working-set maximum`.,It only reclaims kernel-allocated pages.,C,"If process has more pages than working-set minimum: 'removes pages until sufficient memory or process reaches minimum. Larger, idle processes targeted before smaller, active processes.'"
How long does 'automatic working-set trimming' continue in Windows?,It stops immediately once any page is reclaimed.,"It continues until sufficient free memory is achieved, even if processes shrink below their `working-set minimum`.",It runs only once per hour to minimize overhead.,It continues until all processes reach their `working-set maximum`.,It stops as soon as a single process reaches its `working-set minimum`.,B,"Trimming 'continues until sufficient free memory, even if below working-set minimum.'"
On which types of processes does Windows perform memory trimming?,Only user-mode processes.,Only system processes.,Only processes with `hard working-set limits` configured.,Both user-mode and system processes.,Only processes that are currently inactive.,D,Windows performs trimming on 'user-mode and system processes.'
"When a thread incurs a page fault in Solaris, how does the kernel initially assign a page?",It allocates a page from the thread's private memory pool.,It requests the page directly from the disk controller.,It assigns a page from the free list.,It triggers a process swap immediately.,It attempts to re-use a recently freed page from another process.,C,When a 'Thread incurs page fault: kernel assigns page from free list.'
What is an imperative goal for the Solaris kernel regarding memory management?,To keep all physical memory completely full.,To keep sufficient free memory.,To prioritize disk I/O over memory availability.,To minimize the use of virtual memory.,To ensure every process has its maximum working set at all times.,B,It is 'Imperative: kernel keeps sufficient free memory.'
"In Solaris, what is the `lotsfree` parameter used for, and what is its typical value?","It defines the maximum number of free pages allowed, typically 1/2 physical memory.","It is the threshold to begin paging, typically 1/64 of physical memory.",It represents the total amount of available swap space.,It dictates the minimum number of pages a process can hold.,It controls the rate at which pages are swapped out to disk.,B,'lotsfree parameter: threshold to begin paging (typically 1/64 physical memory).'
How often does the Solaris kernel check the amount of free memory against the `lotsfree` parameter?,Once per second.,Four times per second.,Every minute.,Only when a page fault occurs.,"Continuously, without a specific interval.",B,The 'Kernel checks free memory vs. lotsfree four times per second.'
When does the `pageout` process typically start in Solaris?,When a new process is created.,If the number of free pages falls below the `lotsfree` threshold.,During system startup.,When CPU utilization drops below a certain level.,Only on explicit user request.,B,If 'free pages < lotsfree: pageout process starts.'
"Which algorithm is the Solaris `pageout` process similar to, and what distinct mechanism does it employ?","FIFO, using a single pointer.","LRU, using a linked list.","Second-chance algorithm, using two hands.","Optimal, using predictive analysis.","Random, using a hash table.",C,"The 'Pageout process: similar to second-chance algorithm, uses two hands.'"
What is the specific action performed by the 'front hand' in Solaris's `pageout` process?,It examines reference bits and appends pages to the free list if needed.,It scans all pages and sets their reference bit to 0.,It writes modified pages to secondary storage.,It reclaims pages from the free list for active processes.,It calculates the average `scanrate`.,B,"The 'Front hand: scans all pages, sets reference bit to 0.'"
What is the role of the 'back hand' in Solaris's `pageout` process?,It initializes all page reference bits to 1.,It exclusively handles the writing of clean pages to disk.,It scans all pages and resets their reference bit to 0.,"It examines the reference bit; if still 0, it appends the page to the free list, writing to secondary storage if modified.",It determines the `scanrate` based on system load.,D,"The 'Back hand: examines reference bit; if still 0, appends page to free list, writes to secondary storage if modified.'"
How does Solaris manage 'minor page faults'?,It always swaps out the entire process.,"It treats them the same as major page faults, requiring disk I/O.",A process reclaims a page from the free list if it was accessed before being reassigned.,It reloads the entire program into memory.,"It ignores them, expecting the application to handle them.",C,Solaris 'manages minor page faults: process reclaims page from free list if accessed before reassigned.'
What parameter does the Solaris `pageout` algorithm use to control the rate at which pages are scanned?,freethreshold,scanspeed,scanrate,pagerate,sweepfrequency,C,The 'Pageout algorithm: uses parameters to control scanrate (pages per second).'
What is the typical range for the `scanrate` in Solaris's pageout algorithm?,From 1 page/sec to 100 pages/sec.,From `slowscan` to `fastscan`.,"A fixed value, determined at boot time.",From 0 pages/sec to system maximum RAM size.,It is dynamically calculated and has no fixed range.,B,The 'scanrate ranges from slowscan to fastscan.'
"At what rate does Solaris begin scanning pages when free memory falls below `lotsfree`, and what is its default value?","At `fastscan`, with a default of 8,192 pages/sec.","At `slowscan`, with a default of 10 pages/sec.","At `slowscan`, with a default of 100 pages/sec.","At a dynamic rate, starting from 0 pages/sec.",It starts scanning immediately at maximum speed.,C,When 'Free memory falls below lotsfree: scanning at slowscan (default 100 pages/sec).'
What is the maximum value for `fastscan` in Solaris's pageout process?,100 pages/sec.,1024 pages/sec.,4096 pages/sec.,8192 pages/sec.,Limited only by physical memory size.,D,"Progresses to 'fastscan (total physical pages/2, max 8,192 pages/sec).'"
What system parameter determines the distance between the 'front hand' and 'back hand' in Solaris's pageout process?,scanrate,handspread,page_distance,twin_offset,proximity_param,B,The 'Distance between hands: determined by handspread system parameter.'
What factors determine the time between a page's reference bit being cleared by the front hand and checked by the back hand in Solaris's pageout process?,The current CPU utilization only.,The amount of free memory and the system clock.,The `scanrate` and the `handspread` system parameter.,The number of active processes and their priority.,The total physical memory and swap space.,C,The 'Time between clearing and checking bit: depends on scanrate and handspread.'
"If free memory in Solaris falls below the `desfree` threshold, how often does the `pageout` process run?",Once per second.,Four times per second.,10 times per second.,100 times per second.,Continuously without a fixed interval.,D,If free memory falls below desfree (desired free memory): 'pageout runs 100 times per second.'
What is the primary goal of the Solaris kernel in relation to the `desfree` parameter?,To ensure `desfree` memory is always consumed by active processes.,To keep at least `desfree` memory available.,To use `desfree` as a trigger for process termination.,To increase `desfree` during periods of high memory demand.,To ignore `desfree` if other parameters are met.,B,The 'Goal: keep at least desfree memory available.'
"Under what condition will the Solaris kernel swap processes to free all their pages, and what kind of processes does it look for?","If `minfree` is exceeded for 10 seconds, targeting critical system processes.","If unable to maintain `desfree` for a 30-second average, looking for idle processes.","If `lotsfree` is never reached, targeting active processes.","Only when the system explicitly runs out of physical memory, targeting random processes.","When a user requests a full system reset, targeting all processes.",B,If 'unable to maintain desfree for 30-second average: kernel swaps processes (freeing all pages). Kernel looks for idle processes.'
When is the `pageout` process called for every new page request in Solaris?,If the `scanrate` is at its maximum.,If the system is unable to maintain `minfree`.,Only during system boot.,If `desfree` is consistently maintained.,When a process attempts to grow beyond its allocated swap space.,B,If system unable to maintain `minfree`: 'pageout process called for every new page request.'
"Which type of pages does the Solaris page-scanning algorithm intentionally skip, even if they would otherwise be eligible for reclamation?",Temporary file pages.,User data pages.,Shared library pages.,Kernel stack pages.,Recently written pages.,C,The 'Page-scanning algorithm skips shared library pages (even if eligible).'
How does Solaris distinguish between different types of pages for memory management purposes?,"It only treats all pages equally, regardless of their origin.",It categorizes pages based on their age in memory.,It distinguishes between pages for processes and regular data files.,It differentiates between read-only and writeable pages only.,It uses distinct lists for kernel pages and user pages exclusively.,C,Solaris 'Distinguishes between pages for processes and regular data files.'
"What term describes Solaris's approach of prioritizing the selection of victim frames based on criteria, such as avoiding shared library pages?",Selective paging,Adaptive paging,Priority paging,Intelligent paging,Exclusive paging,C,This approach is 'Known as priority paging.'
What is the definition of 'clustering' in memory management?,A method to group CPU cores for parallel processing.,Paging in a group of contiguous pages when a single page is requested via a page fault.,The process of reorganizing fragmented disk space.,Creating multiple virtual machines on a single physical server.,Combining small memory blocks into larger ones.,B,Clustering is defined as 'Paging in a group of contiguous pages when a single page is requested via a page fault.'
"In Windows, what does the term 'working-set minimum' define?",The maximum number of frames a process is allowed to use.,The total amount of available physical memory.,The minimum number of frames guaranteed to a process in Windows.,The recommended starting size for a process's memory.,The number of frames a process uses when it's idle.,C,Working-set minimum is defined as 'Minimum number of frames guaranteed to a process in Windows.'
What does the term 'working-set maximum' mean in Windows memory management?,The minimum number of frames guaranteed to a process.,The maximum amount of virtual address space a process can access.,The maximum number of frames allowed to a process in Windows.,The number of frames a process is currently using.,A fixed memory allocation that cannot be changed.,C,Working-set maximum is defined as 'Maximum number of frames allowed to a process in Windows.'
What does a 'hard working-set limit' represent in Windows?,The minimum amount of physical memory a process must use.,The total available physical memory in the system.,A suggestion for memory usage that can be exceeded.,The maximum amount of physical memory a process is allowed to use in Windows.,The total amount of virtual memory available to all processes.,D,Hard working-set limit is defined as 'Maximum amount of physical memory a process is allowed to use in Windows.'
What is 'automatic working-set trimming' in Windows?,Increasing working-set frames for processes during high demand.,A mechanism to prioritize I/O operations for active processes.,Decreasing working-set frames for processes if minimum free memory threshold is reached.,A process of defragmenting memory automatically.,Automatically adjusting the swap file size based on system needs.,C,"Automatic working-set trimming is defined as 'In Windows, decreasing working-set frames for processes if minimum free memory threshold is reached.'"
What is 'priority paging'?,A system where all pages are treated equally for replacement.,A technique to randomly select victim frames for replacement.,"Prioritizing selection of victim frames based on criteria, e.g., avoiding shared library pages.",A method to pre-load pages into memory before they are needed.,Assigning higher priority to processes with smaller working sets.,C,"Priority paging is defined as 'Prioritizing selection of victim frames based on criteria, e.g., avoiding shared library pages.'"
