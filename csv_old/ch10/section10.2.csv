Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is the primary characteristic of 'demand paging' as an alternative to loading an entire program into physical memory?,It preloads all program pages into physical memory before execution begins.,It loads pages into memory only when they are accessed or 'demanded' during execution.,"It stores the entire program exclusively in secondary storage, eliminating the need for physical memory.","It loads only the kernel's pages into physical memory, leaving user programs in swap space.",It continuously swaps all program pages between physical memory and cache memory.,B,"Demand paging is defined as loading pages into memory only when they are 'demanded' or accessed during execution, leading to more efficient memory use."
What common problem with traditional program loading does demand paging aim to solve?,The inability to execute programs larger than physical memory.,The high cost of CPU registers required for program execution.,The inefficiency of loading an entire program into memory when only parts may be immediately needed.,The difficulty in synchronizing multiple processes accessing the same memory region.,The lack of hardware support for memory address translation.,C,"The text states that the problem with loading an entire program is that 'May not need entire program initially (e.g., unselected options)', which demand paging addresses by loading pages only as needed."
"In a system utilizing demand paging, what happens to pages of a program that are never accessed during its execution?",They are loaded into physical memory at the start and then immediately swapped out.,They remain in secondary storage and are never loaded into physical memory.,They are marked as valid but are not available for use.,They are moved to a special cache for future use in subsequent executions.,They are discarded from secondary storage to free up space.,B,"A key characteristic of demand paging is that 'Unaccessed pages never loaded into physical memory', contributing to efficient memory use."
Which hardware support is essential for demand paging to distinguish between pages residing in physical memory and those in secondary storage?,A dedicated high-speed cache controller.,A specialized CPU register for virtual address translation.,A valid-invalid bit scheme within the page table.,Direct Memory Access (DMA) controllers for all I/O operations.,A network interface card for remote memory access.,C,The text explicitly states: 'Hardware support needed to distinguish: valid-invalid bit scheme.'
"In the context of demand paging's valid-invalid bit scheme, what does a 'valid bit' set in a page-table entry signify?",The page is legal but currently located in secondary storage.,The page is illegal and cannot be accessed by the process.,The page is legal and currently resides in physical memory.,The page has been modified since it was loaded into memory.,The page is protected from write access.,C,The text defines a 'Valid bit' as indicating that 'page legal and in memory'.
Under what condition would a page-table entry typically be marked with an 'invalid bit' in a demand paging system?,The page is actively being used by the CPU.,The page is part of the process's logical address space but is currently in secondary storage.,The page is designated as read-only.,The page is legal and currently in physical memory but awaiting a security scan.,The page is being transferred to a different process.,B,An 'Invalid bit' indicates that 'page not valid (not in logical address space) or valid but in secondary storage'.
What specific event occurs when a process attempts to access a page that is marked as invalid in its page table (assuming the access is for a valid part of its logical address space)?,A memory access violation leading to immediate process termination.,"A cache hit, retrieving the data from the CPU cache.","A 'page fault', triggering a specific handling procedure.",A successful read operation from physical memory.,"A segmentation fault, indicating an illegal memory address.",C,The text states: 'Access to invalid page -> page fault'.
What is the immediate consequence of a page fault occurring during program execution?,The process immediately suspends all operations until the page is loaded.,"A trap is generated, transferring control to the operating system.",The system automatically reboots to clear the memory error.,The CPU attempts to re-read the instruction multiple times.,All other processes are terminated to free up memory.,B,The text states: 'Page fault causes trap to OS'.
"According to the provided text, what is the very first step the operating system performs when it receives a trap due to a page fault?",It finds a free frame in physical memory to load the missing page.,It schedules an I/O operation to read the page from secondary storage.,It checks an internal table (like the process control block) to determine if the memory access was valid or truly invalid.,It restarts the instruction that caused the page fault.,It updates the page table entry to mark the page as valid.,C,The first step in the 'Page fault handling procedure' is 'Check internal table (process control block) for valid/invalid memory access'.
"During the page fault handling procedure, if the operating system determines that the memory access was genuinely invalid (i.e., not within the process's logical address space), what action does it take?",It attempts to load the page from a different secondary storage device.,It terminates the process that caused the invalid access.,"It allocates a new, larger free frame and retries the access.",It marks the page as 'dirty' and attempts to write it to swap space.,It requests user input on how to proceed.,B,"Step 2 of the page fault handling procedure states: 'If invalid, terminate process'."
What is the final action performed by the operating system after successfully handling a page fault and loading the required page into memory?,It broadcasts a notification to all other running processes.,It increments a counter for total page faults.,It deallocates the free frame used for the page.,"It restarts the interrupted instruction, allowing the process to continue as if no fault occurred.",It scans the entire page table for consistency errors.,D,The final step (6) is 'Restart interrupted instruction; process accesses page as if always in memory'.
Which of the following best describes 'pure demand paging'?,A system where the operating system preloads all executable code into memory at startup.,"A demand paging system where a process starts execution with no pages in memory, and page faults occur for every page needed.",A paging system that never uses secondary storage for any pages.,"A system designed exclusively for running small, self-contained programs.","A method where pages are loaded into memory based on a fixed schedule, not on demand.",B,The text defines 'Pure demand paging' as: 'start process with no pages in memory; fault for pages as needed'.
Why does the phenomenon of 'locality of reference' contribute to reasonable performance in demand paging systems?,It ensures that all program pages are always present in physical memory.,"It means processes tend to reference memory in clustered patterns, reducing the overall page-fault rate.","It allows the system to predict exactly which pages will be needed next, eliminating page faults.",It speeds up the process of transferring pages from secondary storage.,"It eliminates the need for a page table, simplifying memory management.",B,"The text states: 'Programs tend to have locality of reference -> reasonable demand paging performance.' The glossary further explains locality of reference as 'Tendency of processes to reference memory in patterns, not randomly,' which leads to fewer page faults over time."
What is the primary function of 'secondary memory' (also known as swap device or swap space) in the context of demand paging?,To act as a high-speed cache for frequently accessed data.,To store the operating system kernel and its modules permanently.,To hold pages that are part of a process's logical address space but are not currently resident in main memory.,To serve as the primary storage for all executing program instructions.,To manage the allocation of physical memory frames.,C,"The text specifies: 'Secondary memory: holds non-main-memory pages (swap device, swap space)'."
"What crucial capability must a system possess for demand paging to function correctly, particularly after a page fault?",The ability to discard all unsaved process data upon a page fault.,The ability to compress all memory contents to prevent page faults.,"The ability to restart any interrupted instruction from the exact point of interruption, with the required page now in memory.",The ability to run multiple copies of the same program simultaneously without interference.,The ability to disable virtual memory for critical operations.,C,"The text highlights this as a 'Crucial requirement: ability to restart any instruction after page fault. ...Restart process in exact same place/state, with desired page in memory'."
"What challenge do instructions that modify multiple memory locations (e.g., IBM System 360/370 MVC) pose for demand paging, and what is one described solution?",They can cause data corruption if a page fault occurs mid-instruction; a solution is to make all pages read-only.,They might partially modify data before a page fault occurs; one solution involves microcode accessing both ends of blocks before modification.,They are inherently incompatible with demand paging; the solution is to use simpler instruction sets.,They lead to an infinite loop if a page fault happens; the solution is to increase CPU clock speed.,They require all memory to be non-paged; the solution is to use direct physical addressing.,B,"The text discusses the 'Difficulty: instructions modifying multiple locations' and offers 'Solution 1: Microcode accesses both ends of blocks before modification; if fault, happens before modification'."
To what extent should the underlying paging mechanism be visible or exposed to the running processes?,"It should be fully visible, allowing processes to manage their own paging.","It should be partially visible, providing hints for performance optimization.",It should be completely transparent to the process.,It should only be visible to the process when a page fault occurs.,"It should be managed by a separate, user-level daemon.",C,The text explicitly states: 'Paging should be transparent to process'.
What is the primary role of the 'free-frame list' maintained by the operating system?,To track pages that are currently resident in secondary storage.,"To serve as a pool of available physical memory frames for page faults and segment expansion (e.g., stack/heap).",To store information about all active processes in the system.,To manage the allocation of virtual address space to processes.,To log all memory access attempts for debugging purposes.,B,The text describes: 'OS maintains free-frame list: pool of free frames for page faults. Free frames also allocated for stack/heap segment expansion'.
"What security-related practice, known as 'zero-fill-on-demand,' is commonly used by operating systems when allocating free frames?",Encrypting the contents of the memory frame before allocation.,"Writing zeros into a page before making it available to a process, to prevent information leakage.",Compressing the page content to reduce its memory footprint.,Storing only zero-initialized data on demand.,Deallocating memory frames immediately after they are used.,B,The text states: 'Most OS use zero-fill-on-demand: frames 'zeroed-out' before allocation (security)'.
"At system startup, what is the initial state of the 'free-frame list'?","It is empty, and frames are added only as they become available from terminated processes.","It contains a small, fixed number of frames reserved for the kernel.",All available physical memory is initially placed on the free-frame list.,It contains a copy of the entire swap space content.,It dynamically grows and shrinks based on immediate memory demands.,C,The text specifies: 'System startup: all available memory on free-frame list'.
How does demand paging significantly impact system performance?,It always drastically improves performance by keeping all necessary data in cache.,"It has negligible impact on performance, primarily affecting memory utilization.","It can significantly affect performance, requiring a very low page-fault rate to be efficient.",It slows down performance only if the system has an abundance of physical memory.,It only impacts performance during the initial loading phase of a program.,C,The text states: 'Demand paging significantly affects performance.' and 'Low page-fault rate crucial for demand-paging performance'.
"When calculating the 'effective access time' for demand-paged memory, which two primary factors are weighed?",The CPU's clock speed and the number of active processes.,The memory-access time (ma) and the page fault time.,The disk seek time and the data transfer rate.,The size of the page table and the number of valid bits.,The program's compile time and its total execution time.,B,"The formula for effective access time is given as: '$(1 - p) 	imes ma + p 	imes 	ext{page fault time}$', where $ma$ is memory-access time and 'page fault time' is the cost of handling a fault."
"Approximately how long does it take for a typical hard disk drive (HDD) to service a page-switch (read a page into memory), considering latency, seek time, and transfer time?",10 nanoseconds,200 nanoseconds,1 to 100 microseconds,8 milliseconds,3 seconds,D,"The text specifies: 'HDD page-switch time: ~8 milliseconds (3ms latency, 5ms seek, 0.05ms transfer)'."
What is the direct relationship between the 'effective access time' and the 'page-fault rate' in a demand paging system?,"They are inversely proportional; as one increases, the other decreases.",The effective access time is constant regardless of the page-fault rate.,The effective access time is directly proportional to the page-fault rate.,"They are unrelated, as performance depends solely on the CPU's processing power.",The effective access time is logarithmically related to the page-fault rate.,C,"The text states: 'Effective access time directly proportional to page-fault rate', which is evident from the formula showing $p$ as a multiplier for the large page fault time."
"Given a memory-access time of 200 ns and a page-fault service time of 8 ms, what must the page-fault rate (p) approximately be to limit the performance slowdown to less than 10% (i.e., effective access time < 220 ns)?","p < 1/1,000","p < 1/10,000","p < 1/399,990","p < 1/2,000,000",p < 1/200,C,"The text provides the calculation: 'To keep slowdown < 10% (e.g., 220 ns effective access time): ... p < 0.0000025 (fewer than 1 fault per 399,990 accesses)'."
"How does I/O from swap space generally compare in speed to I/O from the file system, and what is a primary reason for this difference?",Swap space I/O is slower due to more complex data structures.,"Swap space I/O is about the same speed as file system I/O, as they both use the same disk.",Swap space I/O is generally faster due to larger block transfers and avoiding file lookups.,File system I/O is always faster because it leverages file caching mechanisms.,The speeds are indistinguishable in modern operating systems.,C,"The text states: 'Swap space I/O generally faster than file system I/O (larger blocks, no file lookups)'."
Which strategy for swap space usage is commonly adopted by operating systems like Linux and Windows for general pages?,Copying the entire program file image to swap space at startup.,"Demand-paging directly from the file system initially, and writing pages to swap space only when they are replaced and modified.",Avoiding swap space entirely by keeping all pages in physical memory.,Loading all program pages into a compressed memory area instead of swap space.,Pre-fetching all anticipated pages into swap space before they are needed.,B,"The text specifies: 'Demand-page from file system initially, write pages to swap space when replaced (Linux, Windows)'."
"In Linux and BSD UNIX, how are binary executable pages typically handled when demand-paged, particularly regarding their backing store?",Their entire image is copied to swap space at program launch.,"They are demand-paged directly from the file system, which serves as their backing store because they are typically never modified.",They are always kept in physical memory and never swapped out.,"They use a dedicated, high-speed SSD separate from the main swap space.",Their pages are automatically compressed and stored in anonymous memory.,B,"The text states: 'Demand-page binary executables directly from file system; overwrite frames when replaced (never modified); file system acts as backing store (Linux, BSD UNIX)'."
"What is the primary backing store for 'anonymous memory' segments, such as the stack and heap, when they are paged out in a demand paging system?",The original executable file on the file system.,"A dedicated, read-only section of the file system.",The CPU's internal cache.,Swap space.,A temporary RAM disk.,D,"The text clearly states: 'Anonymous memory (stack, heap) still uses swap space'."
"How do mobile operating systems, such as iOS, typically handle memory paging and swapping?",They aggressively swap all memory types to persistent flash storage.,They rely heavily on compressed memory as their primary virtual memory mechanism.,They generally do not use swapping; they demand-page from the file system and reclaim read-only pages when memory is constrained.,They load entire applications into memory upon launch to avoid any paging.,"They utilize a large, dedicated swap partition on external SD cards.",C,"The text mentions: 'Mobile OS (e.g., iOS) typically no swapping: demand-page from file system, reclaim read-only pages if memory constrained'."
What is mentioned as an alternative to swapping that is sometimes employed in mobile systems to manage memory constraints?,Utilizing extremely large quantities of physical RAM to avoid paging altogether.,Completely disabling virtual memory features.,Implementing compressed memory.,Moving all application data to cloud storage.,Requiring all applications to be written in assembly language for maximum efficiency.,C,The text states: 'Compressed memory is an alternative to swapping in mobile systems'.
"According to the glossary, what is the definition of 'demand paging'?",The act of pre-loading an entire program into memory regardless of immediate need.,Bringing in pages from storage as needed rather than entirely at process load time.,A method of memory management that eliminates the need for secondary storage.,A technique for encrypting memory contents on demand.,The process of continually transferring all pages between CPU registers and cache.,B,Glossary definition: 'Bringing in pages from storage as needed rather than entirely at process load time'.
"Based on the glossary, what is a 'page fault'?",An error that occurs when physical memory runs out of space.,A successful retrieval of a page from the CPU cache.,A fault that occurs from referencing a page that is not currently resident in memory.,A software bug that corrupts the page table.,A security breach detected during memory access.,C,Glossary definition: 'Fault from reference to a non-memory-resident page'.
How does the glossary define 'pure demand paging'?,Demand paging where pages are brought into memory in large batches.,Demand paging where no page is brought into memory until it is referenced.,A paging system that only loads read-only pages on demand.,A system where all program pages are pre-loaded at process creation.,A method that avoids using page faults entirely by predicting memory needs.,B,Glossary definition: 'Demand paging where no page is brought into memory until referenced'.
What does the glossary describe as 'locality of reference'?,The random access patterns of memory by a process.,"The tendency of processes to reference memory in patterns, not randomly.",The physical location of data on a hard disk drive.,The process of referencing data directly from secondary storage.,The speed at which a process can access any memory location.,B,"Glossary definition: 'Tendency of processes to reference memory in patterns, not randomly'."
"According to the glossary, what is 'swap space'?",The dedicated area of the CPU for storing temporary data.,The primary physical memory (RAM) in a computer system.,Secondary storage backing-store space for paged-out memory.,A high-speed buffer for I/O operations.,An area of memory reserved for kernel-only processes.,C,Glossary definition: 'Secondary storage backing-store space for paged-out memory'.
What is the 'free-frame list' as defined in the glossary?,A list of all allocated physical memory frames.,A kernel-maintained list of available free physical memory frames.,A record of all pages currently in secondary storage.,A queue of processes waiting for memory allocation.,A cache of recently used frames.,B,Glossary definition: 'Kernel-maintained list of available free physical memory frames'.
What is the meaning of 'zero-fill-on-demand' according to the glossary?,Compressing a page's content if it contains mostly zeros.,Writing zeros into a page before making it available to a process for security reasons.,A technique to pre-fetch pages that are known to be all zeros.,Automatically clearing the contents of a page when it is deallocated.,A method to calculate the checksum of a page containing zeros.,B,Glossary definition: 'Writing zeros into a page before making it available to a process'.
"Based on the glossary, what is 'effective access time'?",The minimum time required to access a memory location.,The theoretical maximum speed of a memory device.,"The measured or calculated time to access something, such as memory.",The time it takes to transfer data from a hard disk to RAM.,The latency experienced by the CPU when executing an instruction.,C,"Glossary definition: 'Measured/calculated time to access something (e.g., memory)'."
What does the glossary define as the 'page-fault rate'?,The total number of page faults occurring over the system's uptime.,A measure of how often a page fault occurs per memory access attempt.,The speed at which pages are moved into and out of physical memory.,The percentage of physical memory occupied by currently active pages.,The maximum number of page faults a system can tolerate before crashing.,B,Glossary definition: 'Measure of how often a page fault occurs per memory access attempt'.
"According to the glossary, what is 'anonymous memory'?",Memory that is shared anonymously between different user accounts.,"Memory not associated with a file; typically used for stack and heap, and stored in swap space if dirty and paged out.",Read-only memory that contains system boot information.,Memory that has been encrypted and cannot be directly accessed.,Memory that is permanently resident in physical RAM and never swapped.,B,Glossary definition: 'Memory not associated with a file; stored in swap space if dirty and paged out'.
