Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What is a primary benefit of using copy-on-write with the `fork()` system call for process creation?,Allocating all pages immediately for both parent and child.,Maximizing memory usage by duplicating all data.,Minimizing new pages allocated to the child process.,Ensuring full parent-child memory isolation from the start.,Bypassing demand paging entirely for all operations.,C,Copy-on-write is designed to minimize the number of new pages allocated to the child process by allowing initial sharing.
"In a system employing the copy-on-write technique for process creation, what is the initial state of pages shared between parent and child processes?",Fully copied into the child's address space.,"Completely independent, with no shared memory.",Shared between both processes.,Write-protected for both processes.,Only parent pages are accessible to the child.,C,Copy-on-write explicitly states that parent and child processes initially share the same pages.
"Under the copy-on-write mechanism, when is a copy of a shared page created?",When the child process starts execution.,When the parent process resumes from suspension.,When either the parent or child process attempts to read the page.,When either the parent or child process attempts to write to the shared page.,Only when the child process exits.,D,The core principle of copy-on-write is that a copy is made only when a write operation is attempted on a shared page.
"When a child process modifies a page that was initially shared via copy-on-write, which statement is true about the modification?",The modification is directly visible to the parent process.,The parent's original page is also modified.,"A new copy of the page is created for the child, and the modification occurs on this copy.","The page is immediately discarded, and a new empty page is allocated.",The entire address space is re-copied for the child.,C,"Upon a write attempt, the OS creates a copy of the shared page for the modifying process (e.g., child), and the modification occurs on this new copy, leaving the original page untouched for the other process (parent)."
"What was a significant drawback of the traditional `fork()` behavior, especially when the child process immediately called `exec()`?",It led to excessive page sharing that caused data corruption.,It prevented the child from modifying its own pages.,It made process creation extremely slow due to unnecessary copying of the entire address space.,It suspended the parent process indefinitely.,It required manual page allocation for the child process.,C,"Traditionally, `fork()` copied the parent's address space, which was often unnecessary and inefficient if the child immediately called `exec()`, as the copied data would simply be discarded."
"In a copy-on-write system, which type of pages can remain shared between the parent and child processes even after the child starts executing?",Only stack pages.,Only data pages that are actively being modified.,All modified pages.,"Unmodified pages, such as executable code segments.",Only heap pages.,D,"Unmodified pages, like executable code, do not trigger a copy-on-write event and can therefore remain shared between the parent and child."
"When a process attempts to write to a page marked as copy-on-write, what is the operating system's typical sequence of actions?",It immediately terminates the process for attempting a write to a shared page.,It flags the page as read-only for all processes.,"It searches for a free memory frame, copies the page to that frame, and then maps the new copy to the process's address space for modification.",It forces the process to wait until the other sharing process modifies the page first.,"It discards the page and reloads it from disk, then allows the write.",C,"As described in the example, the OS handles a write fault on a copy-on-write page by allocating a new frame, copying the page content, and updating the process's page table to point to the new copy."
How does `fork()` process creation relate to demand paging initially?,It always requires all pages to be loaded via demand paging before execution.,It prevents any form of demand paging from being used.,It can bypass demand paging initially by sharing pages directly.,It is completely independent of demand paging concepts.,It only uses demand paging for stack pages.,C,"The text states that 'Process creation using `fork()` can bypass demand paging initially,' often by sharing pages via copy-on-write rather than loading them immediately."
Copy-on-write is a common technique implemented in which of the following operating systems?,MS-DOS and Windows 95 only.,"Linux, macOS, and Windows.",Unixware and Solaris (but not Linux or macOS).,Windows NT 3.51 only.,All embedded systems regardless of complexity.,B,"The text explicitly states that copy-on-write is a common technique in Windows, Linux, and macOS."
Which of the following statements accurately describes a key difference between `vfork()` and a `fork()` implementation utilizing copy-on-write?,`vfork()` always creates a full copy of the parent's address space immediately.,`vfork()` utilizes copy-on-write for enhanced efficiency.,`vfork()` does not employ the copy-on-write mechanism.,`vfork()` allows the parent to continue execution concurrently with the child.,`vfork()` is an exclusive system call for Windows operating systems.,C,The text explicitly states that '`vfork()` does not use copy-on-write.'
"When a child process is created using `vfork()`, what happens to the parent process?",It continues execution concurrently with the child.,It terminates immediately.,"It is suspended, and the child uses the parent's address space.",It shares its address space in a copy-on-write manner with the child.,"It allocates a completely new, empty address space for the child.",C,"The text specifies that with `vfork()`, 'Parent process suspended; child uses parent's address space.'"
"If a child process created with `vfork()` modifies a page in its address space before calling `exec()`, what is the implication for the parent process?",The changes are isolated to the child and not visible to the parent.,"A copy of the modified page is automatically created for the child, isolating the change.",The changes are discarded when the parent resumes.,The changes made by the child will be visible to the parent upon its resumption.,The parent process immediately terminates due to a memory conflict.,D,"The text states: 'Child process changes to parent's address space are visible to parent upon resumption' when `vfork()` is used, highlighting the caution required."
For what specific scenario is `vfork()` primarily intended to be used?,When a child process needs to share data extensively and continuously with its parent.,When a child process needs a completely isolated and independent address space from the parent.,When the child process is expected to call `exec()` immediately after creation.,When the parent process needs to modify the child's address space directly.,When maximum memory safety and protection between parent and child is required.,C,The text clearly states that `vfork()` is 'Intended for use when child calls `exec()` immediately after creation.'
What makes `vfork()` an extremely efficient method for process creation?,It performs extensive page copying from parent to child.,It uses a sophisticated demand paging mechanism for all pages.,"It does not involve any page copying, as the child directly uses the parent's address space.",It uses a different CPU scheduling algorithm specifically for child processes.,"It runs only on single-core processors, simplifying synchronization.",C,`vfork()` is efficient because there is 'no page copying' as the child directly uses the parent's address space.
What critical caution must be observed when using `vfork()`?,The parent process must not be suspended.,The child process must not call `exec()` at all.,"The child process must not modify the parent's address space, as these changes will be reflected in the parent.",The parent must always share its heap with the child after resumption.,"`vfork()` should only be used in Windows environments, not UNIX-like systems.",C,"The text explicitly warns: 'Use with caution: child must not modify parent's address space,' because such changes are visible to the parent."
In which operating system families is `vfork()` a variation of `fork()` commonly found?,Microsoft Windows only.,"macOS, Linux, and BSD UNIX.",IBM z/OS.,Google Fuchsia.,VxWorks and other real-time operating systems exclusively.,B,"`vfork()` is described as a 'Variation of `fork()` in UNIX (Linux, macOS, BSD UNIX).'"
Which statement best defines the 'copy-on-write' mechanism as described in the glossary?,"Data is always copied before any modification, regardless of sharing.",Data is copied only when a read operation occurs on shared data.,"A copy of data is made only when a write operation is attempted on shared data, with the write occurring on the copy.",Data is copied on system boot-up to ensure rapid access.,Data is never copied; only pointers are shared indefinitely.,C,"The glossary defines copy-on-write as: 'Write causes data to be copied then modified; on shared page write, page copied, write to copy.'"
What accurately describes the 'virtual memory fork' (`vfork()`) system call according to the glossary?,It creates an entirely new and independent address space for the child process.,It uses copy-on-write for efficient page sharing between parent and child.,It allows the child to share the parent's address space for read/write operations while the parent is suspended.,It creates a child process that cannot interact with the parent's memory in any way.,It is a deprecated system call no longer in use in modern operating systems.,C,"The glossary defines `virtual memory fork` as: '`vfork()` system call; child shares parent's address space for read/write, parent suspended.'"
The copy-on-write technique for rapid process creation is described as being similar to what other memory management technique?,Memory swapping.,Demand paging.,Page sharing.,Memory compression.,Thrashing.,C,The text states that copy-on-write is a 'Technique similar to page sharing for rapid process creation.'
How are pages initially shared between parent and child processes typically marked in a copy-on-write system?,As read-only to prevent any modification.,"As executable, but not writable.","As demand-paged, meaning they are loaded only when accessed.","As copy-on-write, indicating their special handling on write access.","As fully copied, despite being shared.",D,The text states: 'Shared pages marked as copy-on-write.'
"In a copy-on-write implementation, if a child process modifies a page that was initially shared, what is the impact on the parent's original page?",The parent's page is also modified concurrently.,The parent's page becomes read-only and cannot be modified further.,"The parent's page remains unchanged, as the child's modification occurs on a newly created copy.",The parent's page is deleted from memory.,The parent's page is swapped out to disk immediately.,C,"The text clarifies that when a child modifies a copy-on-write page, 'Child modifies its copied page, not parent's,' meaning the parent's original remains untouched."
