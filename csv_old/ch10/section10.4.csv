Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following is a primary benefit of demand paging?,It pre-loads all pages into memory at process start.,It saves I/O by loading only used pages.,It eliminates the need for swap space.,It guarantees zero page faults during execution.,It simplifies hardware memory management unit (MMU) design.,B,Demand paging is designed to save I/O and memory by only loading pages into physical memory when they are actually needed (demanded).
How does 'over-allocating' memory primarily impact the degree of multiprogramming in a system?,It decreases the degree of multiprogramming by limiting available frames.,It has no direct impact on the degree of multiprogramming.,It increases the degree of multiprogramming by allowing more processes to share memory.,It requires less CPU utilization due to reduced context switching.,It completely eliminates the need for virtual memory.,C,"Over-allocating memory means allocating more virtual memory than physically available, which allows more processes to be resident in memory, thereby increasing the degree of multiprogramming."
What is a potential problem that can arise from over-allocating memory?,Increased CPU idle time.,Processes consistently using only a small fraction of their allocated pages.,System memory becoming exclusively used for I/O buffers.,Processes suddenly needing more pages than the total available physical frames.,Reduced overall system throughput.,D,"The problem with over-allocation is when processes, which were initially using only a small portion of their virtual memory, suddenly need all their pages, exceeding the total physical frames available."
"Besides process pages, what other component utilizes system memory, potentially increasing strain on memory-placement?",Secondary storage devices.,Network interface cards.,I/O buffers.,CPU registers.,The system clock.,C,"The text states that 'System memory also used for I/O buffers, increasing strain on memory-placement.'"
How does memory over-allocation typically manifest itself in a running system?,As a system crash with a memory access violation.,As a page fault when there are no free frames available.,As consistently low CPU utilization.,As unusually fast process execution times.,As an immediate system reboot.,B,The text explicitly states: 'Over-allocation manifests as page fault with no free frames.'
What does 'over-allocating' mean in the context of memory management?,Providing dedicated physical memory to each process.,"Providing access to more resources than physically available, such as allocating more virtual memory than physical memory.",Assigning more CPU cores than physically present in the system.,"Reserving all swap space for a single, critical application.",Loading all possible pages of a process into memory at startup.,B,"According to the glossary, 'over-allocating' means 'Providing access to more resources than physically available; allocating more virtual memory than physical memory.'"
"In basic page replacement, what is the initial action if a page fault occurs and no free frame is available?",Immediately terminate the process causing the fault.,Suspend all processes until more physical memory is installed.,Find a frame that is not currently in use and free its contents.,Ignore the page fault and continue execution.,Increase the size of the swap space dynamically.,C,"The procedure is: 'If no free frame, find one not in use and free it.'"
"When a frame is freed during page replacement, what happens to its contents if they were modified?",They are permanently deleted to save space.,They are written to secondary storage (swap space).,They are immediately transferred to another free frame.,"They are ignored, as the new page will overwrite them.",They are encrypted for security before deletion.,B,"Freeing a frame involves: 'write contents to swap space, change page table (page no longer in memory).'"
What is the primary role of a 'page-replacement algorithm' in the page-fault service routine?,To locate the desired page on secondary storage.,To update the CPU's general-purpose registers.,To select a 'victim frame' for replacement when no free frames are available.,To determine the optimal size of the page table.,To increase the degree of multiprogramming.,C,"If no free frame is found, the page-replacement algorithm is used to 'select victim frame'."
What is a 'victim frame' in the context of page replacement?,The frame that caused the page fault.,A frame that has been marked as corrupted by the hardware.,The frame selected by the page-replacement algorithm to be replaced.,A frame containing critical operating system code.,Any frame that is currently empty.,C,The glossary defines 'victim frame' as 'Frame selected by page-replacement algorithm to be replaced.'
How many page transfers typically occur during a page-fault service routine if there are no free frames available?,One (page-in only).,Two (page-out and page-in).,"Three (page-out, page-in, and page-validation).","Zero, as the fault implies no transfer is possible.",It varies depending on the specific page-replacement algorithm.,B,"The text states: 'No free frames → two page transfers (page-out, page-in) → doubles page-fault service time.'"
What is the primary function of the 'modify bit' (or 'dirty bit') in page replacement?,To indicate if a page is currently in use by the CPU.,To track the age of a page for FIFO replacement.,To determine if a page's contents need to be written back to secondary storage before replacement.,To signal a hardware error in the memory management unit.,To mark a page as read-only and prevent modifications.,C,"The modify bit is set by hardware if a page is written to, and if set, the page must be written to storage before replacement. If not set, no write is needed."
Who is responsible for setting the 'modify bit' for a page?,The operating system software.,The user application program.,The hardware (MMU).,The compiler during code generation.,The system administrator manually.,C,The text specifies: 'Hardware sets modify bit if page written to.'
"In page replacement, when is it NOT necessary to write the contents of a victim frame back to secondary storage?",When the victim frame is a system-critical page.,When the desired page is already in the CPU cache.,When the modify bit for that frame is not set.,When the system has abundant free frames.,When the page-replacement algorithm is FIFO.,C,"If the modify bit is not set, it means the page has not been changed since it was read into memory, so 'no need to write to storage (page unchanged).'"
What fundamental aspect of memory management does page replacement enable?,Strict separation of CPU and GPU memory.,Complete elimination of disk I/O.,Separation of logical and physical memory.,Exclusive use of solid-state drives for swap space.,Direct access to raw disk partitions for all applications.,C,The text explicitly states: 'Page replacement separates logical and physical memory.'
What are the two major problems that demand paging mechanisms must address?,CPU scheduling and process synchronization.,File system caching and network protocols.,Frame-allocation algorithm and Page-replacement algorithm.,Interrupt handling and device driver management.,User authentication and system security.,C,The text lists 'Frame-allocation algorithm' and 'Page-replacement algorithm' as the 'Two major problems for demand paging'.
What is the primary goal when designing or selecting a page-replacement algorithm?,To maximize CPU utilization.,To minimize disk space usage.,To achieve the lowest page-fault rate.,To simplify the operating system kernel.,To maximize the number of processes in memory.,C,The goal is clearly stated as 'Goal: lowest page-fault rate.'
How are page-replacement algorithms typically evaluated?,By running them on real-world systems under heavy load.,By simulating their behavior using a 'reference string'.,By measuring their execution time on a benchmark suite.,By analyzing their theoretical computational complexity.,By counting the number of context switches they cause.,B,Algorithms are evaluated 'using reference string (trace of memory accesses).'
What simplification is typically made when generating a 'reference string' for evaluating page replacement algorithms?,"Only the page number is considered, and immediate repeated references are ignored.","Only read accesses are recorded, write accesses are ignored.","All memory accesses are recorded, including instruction fetches.",The time of access is recorded in milliseconds.,"Only unique page numbers are kept, regardless of access order.",A,"The text states: 'Reference string simplification: only page number, ignore immediate repeated references.'"
"Generally, what is the relationship between the number of frames allocated to a process and its page-fault rate?",More frames generally lead to a higher page-fault rate.,More frames generally lead to a lower page-fault rate.,The number of frames has no impact on the page-fault rate.,"The relationship is inverse for most algorithms, except FIFO.","Only the type of page-replacement algorithm affects the rate, not the number of frames.",B,The text confirms: 'More frames → fewer page faults (generally).'
What is a 'frame-allocation algorithm'?,An algorithm that determines the optimal size of a page.,An OS algorithm for allocating physical memory frames among all demanding processes.,A hardware component that manages the page table.,An algorithm used to decide when to swap processes out to disk.,A method to compress data within memory frames.,B,"According to the glossary, it's an 'OS algorithm for allocating frames among all demands.'"
"Which page does the First-In, First-Out (FIFO) page replacement algorithm choose to replace?",The page that has been used most recently.,The page that has been in memory for the longest time.,The page that is predicted to be used furthest in the future.,The page with the fewest references since it was loaded.,A randomly selected page.,B,FIFO 'Replaces the oldest page (first one brought into memory).'
What is a major advantage of the FIFO page replacement algorithm?,It always provides the lowest page-fault rate.,It is easy to understand and program.,It never replaces actively used pages.,It is immune to Belady's anomaly.,It requires minimal hardware support.,B,The text states: 'Easy to understand and program.'
What is 'Belady's anomaly'?,A situation where a page-replacement algorithm always chooses the optimal page.,A condition where increasing the number of allocated frames causes the page-fault rate to decrease.,A phenomenon where the page-fault rate may increase as the number of allocated frames increases.,A hardware fault that causes pages to be written incorrectly to swap space.,The inability of an operating system to manage more than one process simultaneously.,C,The glossary defines Belady's anomaly as 'Page-fault rate may increase as allocated frames increase for some algorithms.'
Which specific page replacement algorithm is known to suffer from Belady's anomaly?,Least Recently Used (LRU).,Optimal (OPT).,"First-In, First-Out (FIFO).",Least Frequently Used (LFU).,Second-Chance.,C,The text explicitly states FIFO 'Suffers from Belady's anomaly: page-fault rate may increase as allocated frames increase.'
What is the primary rule for the 'Optimal (OPT or MIN) page-replacement algorithm'?,Replace the page that was brought into memory first.,Replace the page that has not been used for the longest period of time.,Replace the page that will not be used for the longest period of time.,Replace the page with the lowest number of past references.,Replace a randomly chosen page.,C,Its rule is: 'Replace the page that will not be used for the longest period of time.'
Which characteristic best describes the Optimal page-replacement algorithm?,It is the easiest to implement in practice.,It guarantees the lowest possible page-fault rate.,It frequently suffers from Belady's anomaly.,It relies heavily on hardware counters for implementation.,It is only suitable for small memory systems.,B,The text states it 'Guarantees lowest possible page-fault rate.'
Why is the Optimal (OPT) page-replacement algorithm difficult to implement in real operating systems?,It requires excessively large page tables.,It needs to predict future memory accesses (future knowledge of reference string).,It causes too many context switches.,"It results in high CPU utilization, slowing down other processes.",It is a proprietary algorithm and cannot be used freely.,B,It is 'Difficult to implement: requires future knowledge of reference string.'
For what primary purpose is the Optimal page-replacement algorithm used?,As the default algorithm in modern operating systems.,To minimize the physical memory footprint of applications.,Mainly for comparison studies to evaluate other algorithms.,To prevent unauthorized memory access.,To reduce the latency of disk I/O operations.,C,The text indicates it's 'Used mainly for comparison studies.'
Which page does the Least Recently Used (LRU) algorithm choose to replace?,The page that was loaded first into memory.,The page that has been used most frequently.,The page that has not been used for the longest period of time.,The page that is predicted to be used last in the future.,A page that has been modified most recently.,C,LRU 'Replaces the page that has not been used for the longest period of time.'
How does the LRU algorithm relate to the Optimal page replacement algorithm?,"LRU is identical to Optimal, just a different name.",LRU is a direct implementation of Optimal in hardware.,"LRU is an approximation of Optimal, looking backward in time.",LRU is a more complex version of FIFO.,"LRU suffers from Belady's anomaly, unlike Optimal.",C,LRU is described as an 'approximation of optimal' and 'Optimal algorithm looking backward in time.'
Does the Least Recently Used (LRU) algorithm suffer from Belady's anomaly?,"Yes, always.","No, it is a stack algorithm.",Only if the number of frames is very small.,Only if it is implemented using hardware counters.,It depends on the specific workload.,B,The text explicitly states: 'Does not suffer from Belady's anomaly (is a stack algorithm).'
Which of the following describes a method for implementing LRU using 'counters'?,Keeping a stack of page numbers and moving the referenced page to the top.,"Associating a time-of-use field with each page-table entry, updated by a CPU logical clock.",Shifting a reference bit into an 8-bit byte at timer interrupts.,Maintaining a circular queue and clearing reference bits.,Periodically resetting all page-table entries to zero.,B,Under 'Counters': 'associate time-of-use field with page-table entry; CPU logical clock increments; copy clock to field on reference. Replace page with smallest time value.'
What is the primary reason why true LRU implementation is considered expensive?,It requires large amounts of disk swap space.,It needs significant per-memory-reference updates.,It consumes excessive CPU cycles for initial setup.,It leads to frequent system crashes.,It is highly susceptible to thrashing.,B,The text states: 'True LRU implementation is expensive due to per-memory-reference updates.'
What is a 'stack algorithm' in the context of page replacement?,An algorithm that replaces pages based on their position in a LIFO stack.,A class of page-replacement algorithms that do not suffer from Belady's anomaly.,An algorithm that uses a physical stack data structure for page frames.,An algorithm that prioritizes pages allocated from the process stack.,An algorithm that always selects the most recently used page.,B,The glossary defines 'stack algorithm' as 'Class of page-replacement algorithms that do not suffer from Belady's anomaly.'
Why are LRU-approximation algorithms frequently used in systems?,They always outperform true LRU.,They are simpler to implement than FIFO.,Many systems lack the substantial hardware assistance for true LRU.,They eliminate the need for a memory management unit.,They are specifically designed for embedded systems.,C,The text states: 'Many systems lack hardware for true LRU.'
"In LRU-approximation, what is the purpose of the 'reference bit'?",It tracks the number of times a page has been accessed.,Hardware sets this bit when a page is referenced (accessed).,It indicates if a page is currently in the CPU cache.,It identifies pages that are write-protected.,It determines the priority of a page for replacement.,B,The text explains: 'hardware sets bit when page referenced.'
How does the 'Additional-reference-bits algorithm' track page usage history?,By maintaining a simple counter that increments on each access.,"By storing an 8-bit byte for each page, where a timer interrupt shifts the reference bit into the high-order bit.",By using a doubly linked list to order pages by last access time.,By associating a timestamp with each page and comparing them.,By randomly selecting pages and checking their modification status.,B,"It keeps an '8-bit byte for each page' and at 'Timer interrupt... OS shifts reference bit into high-order bit of byte, shifts others right.'"
The 'Second-chance page-replacement algorithm' is based on which other algorithm?,Optimal (OPT).,Least Recently Used (LRU).,"First-In, First-Out (FIFO).",Least Frequently Used (LFU).,Most Frequently Used (MFU).,C,It is described as 'Basic FIFO.'
"In the Second-chance algorithm, what action is taken if a selected page's reference bit is 1?",The page is immediately replaced.,The page is written to secondary storage and then replaced.,The page is given a 'second chance' by clearing its reference bit and resetting its arrival time.,The process owning the page is terminated.,The system enters a low-power state.,C,"If the reference bit is 1, it's given 'second chance: clear bit, reset arrival time to current time.'"
Under what condition does the Second-chance page-replacement algorithm degenerate to behaving like FIFO?,If the system runs out of swap space.,If all reference bits are consistently set to 1.,If the modify bit is always 0.,If it is implemented with a stack instead of a circular queue.,If there are very few page faults.,B,The text states: 'Degenerates to FIFO if all bits set.'
The 'Enhanced second-chance algorithm' considers which two bits as an ordered pair for page classification?,Present bit and Valid bit.,Read bit and Write bit.,Reference bit and Modify bit.,Accessed bit and Executable bit.,Cacheable bit and Pinning bit.,C,"It 'Considers (reference bit, modify bit) as ordered pair.'"
"In the Enhanced second-chance algorithm, which class of pages is considered the 'best to replace'?","(1, 1) - recently used and modified.","(1, 0) - recently used but clean.","(0, 1) - not recently used but modified.","(0, 0) - neither recently used nor modified.",Any page that is currently not in use.,D,"Class (0, 0) is described as 'neither recently used nor modified (best to replace).'"
Why does the Enhanced second-chance algorithm prefer to replace 'clean' pages (modify bit 0) over 'dirty' pages (modify bit 1)?,Clean pages are always smaller in size.,Replacing clean pages reduces the number of I/O operations.,Dirty pages are more likely to be used again soon.,It simplifies the hardware implementation.,Clean pages cause fewer page faults.,B,It 'Prefers clean pages to reduce I/Os' because dirty pages require a write-out to disk.
What is a 'reference bit'?,A bit in the page table that indicates if a page is valid.,An MMU bit indicating a page has been accessed.,A bit used to count the number of references to a page.,A bit that determines if a page can be modified.,A bit in the process control block indicating a process is ready.,B,The glossary defines 'reference bit' as 'MMU bit indicating a page has been referenced.'
Which page does the Least Frequently Used (LFU) algorithm replace?,The page that was loaded earliest.,The page with the highest reference count.,The page that has not been used for the longest time.,The page with the smallest (lowest) reference count.,A randomly selected page.,D,LFU replaces 'page with smallest count.'
What is a known problem with the basic Least Frequently Used (LFU) algorithm?,It suffers from Belady's anomaly.,It always requires significant hardware support.,A page heavily used initially may retain a high count even if unused later.,It needs future knowledge of memory accesses.,It causes excessive swapping in and out of pages.,C,"The text notes the problem: 'heavily used page initially, then unused, keeps high count.'"
Which page replacement algorithm assumes that the page with the smallest count was just brought in and should be replaced?,Least Recently Used (LRU).,"First-In, First-Out (FIFO).",Most Frequently Used (MFU).,Optimal (OPT).,Second-Chance.,C,MFU is described as replacing 'page with smallest count (assumes just brought in).'
Why are Least Frequently Used (LFU) and Most Frequently Used (MFU) algorithms generally not common in practice?,They suffer from excessive Belady's anomaly.,They are simple to implement but yield poor performance.,They are expensive to maintain and do not approximate Optimal well.,They require specialized hardware found only in supercomputers.,They increase the CPU's power consumption significantly.,C,"The text states: 'Neither LFU nor MFU common: expensive, don't approximate OPT well.'"
What is the primary benefit of maintaining a 'pool of free frames' in page-buffering algorithms?,It allows the operating system to pre-fetch pages before they are needed.,"It enables the desired page to be read into a free frame immediately, speeding up process restart.",It reduces the total amount of physical memory required by the system.,"It ensures that all frames are always occupied, preventing memory fragmentation.",It serves as a backup for corrupted page table entries.,B,"The text states: 'On page fault, desired page read into free frame from pool before victim written out. Process restarts faster.'"
"In page-buffering, what is the advantage of keeping a 'list of modified pages'?",It ensures that only clean pages are ever replaced.,"It allows modified pages to be written to secondary storage when the paging device is idle, increasing clean page probability.",It helps the OS prioritize which processes get more memory.,It is used to identify pages that have never been modified.,It prevents any page from being written out to swap space.,B,It 'Increases probability of clean page for replacement (no write-out needed)' because modified pages are written out during idle times.
How does a 'pool of free frames remembering old pages' benefit page-buffering?,It serves as a cache for frequently accessed kernel data.,It allows the OS to immediately free up frames when a process terminates.,It enables a needed old page to be reused directly from the pool without I/O if needed again before reuse.,It stores copies of all pages that have been written to secondary storage.,It helps in detecting memory leaks in applications.,C,"The text describes it: 'If old page needed before frame reused, can be reused directly from pool (no I/O).'"
Which page replacement algorithm is specifically mentioned as being used by UNIX in conjunction with page-buffering techniques?,Optimal.,LFU.,FIFO.,Second-chance.,LRU.,D,The text states: 'UNIX uses this with second-chance algorithm.'
"Why might some applications, like databases, perform worse with general-purpose OS virtual memory buffering?",They require more CPU cycles than the OS can provide.,They need to bypass the OS for direct hardware access.,Applications often have a better understanding of their specific memory and storage use patterns.,They are designed to operate exclusively on solid-state drives.,They are incompatible with demand paging.,C,The text explains: 'Applications understand their memory/storage use better than general-purpose OS algorithms.'
What is 'double buffering' in the context of OS and application I/O?,A technique to store data in two separate physical memory locations for redundancy.,"When both the operating system and the application perform I/O buffering, potentially causing inefficiency.",A method to read data from disk twice to ensure data integrity.,A process of copying data between kernel and user space memory buffers.,An error state where memory pages are duplicated unnecessarily.,B,Double buffering occurs 'if OS and application both buffer I/O.'
"For data warehouses that perform sequential reads followed by computations/writes, which page replacement algorithm might be more efficient than LRU and why?","FIFO, because it's simpler to implement.","Optimal, because it knows future accesses.","MFU, because older pages might be read again, and MFU replaces pages with low frequency (assuming they were just brought in).","Second-chance, due to its circular queue mechanism.","LFU, because it keeps frequently used pages in memory.",C,"The text suggests: 'LRU removes old pages, but older pages might be read again. MFU could be more efficient.' MFU replaces pages with smallest count, assuming they were just brought in and haven't accumulated references, which might suit the 'older pages read again' scenario better than LRU which removes pages based on recency."
What is 'raw disk' access?,Accessing secondary storage through standard file system calls only.,"Direct access to secondary storage as a large sequential array of logical blocks, bypassing file-system services.",Using a RAM disk for very fast temporary storage.,Accessing a network-attached storage device.,A method for encrypting data on disk for security.,B,"The glossary defines 'raw disk' as 'Direct access to secondary storage as array of blocks, no file system.'"
Which of the following file-system services are typically bypassed when using 'raw I/O'?,Only file naming and directory structures.,Only data encryption and decryption services.,"Demand paging, locking, prefetching, allocation, names, and directories.",Only network protocols and remote access.,Only kernel scheduling and interrupt handling.,C,"Raw I/O 'bypasses file-system services (demand paging, locking, prefetching, allocation, names, directories).'"
For which type of applications are 'raw partitions' considered most efficient?,General-purpose word processors.,Standard web browsers.,Specific applications that can manage their own storage needs directly.,"Small, embedded systems with limited memory.",Applications requiring maximum security and data integrity.,C,"The text indicates: 'Raw partitions efficient for specific apps, but most apps better with regular file-system services.'"
