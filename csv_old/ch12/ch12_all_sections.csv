Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What are identified as the computer's two main jobs?,Memory management and CPU scheduling,I/O and computing,Networking and data storage,User interface and application execution,Security and system diagnostics,B,The text states: 'Computer's main jobs: I/O and computing.'
"In common computer tasks such as browsing or editing, which activity is often considered primary?",CPU-intensive computations,Operating system maintenance,I/O operations,Network security protocols,Hardware diagnostics,C,"The text mentions: 'Often, I/O is primary, computing incidental (e.g., browsing, editing).'"
What is the primary role of the Operating System (OS) concerning I/O?,To accelerate data processing speeds,To manage and control I/O operations and devices,To design new I/O hardware,To provide power to I/O devices,To perform I/O error correction only,B,The text states: 'OS role in I/O: manage and control I/O operations and devices.'
What do I/O hardware basics primarily constrain within the operating system?,Application user interfaces,Networking capabilities,OS internal facilities,External peripheral design,Database management systems,C,The text lists 'I/O hardware basics: constraints on OS internal facilities' as a covered topic.
A key topic covered in OS I/O is bridging the gap between which two elements?,User experience and developer tools,Hardware and application interfaces,Local storage and cloud storage,Wired and wireless connections,System boot and shutdown processes,B,The text mentions 'Bridging gap between hardware and application interfaces' as a covered topic.
The UNIX System V STREAMS mechanism is highlighted for its role in enabling what?,Static memory allocation schemes,Hardware-level debugging,Dynamic driver code pipelines,Pre-compiled application binaries,Remote desktop access,C,The text specifies: 'UNIX System V STREAMS mechanism: dynamic driver code pipelines.'
What is identified as a major concern in Operating System (OS) design?,CPU clock speed optimization,Device control,Graphic rendering algorithms,Networking cable management,Power supply unit efficiency,B,The text states: 'Device control is major OS design concern.'
"The wide variation in I/O device function and speed (e.g., mouse, hard disk) necessitates what for device management?",Uniform hardware specifications,Simplified installation procedures,Varied control methods,Exclusive manufacturer partnerships,Standardized power consumption,C,"The text indicates: 'Wide variation in I/O device function/speed (mouse, hard disk, flash drive, tape robot) requires varied control methods.'"
What does the kernel's I/O subsystem comprise?,User-level applications for I/O,The specific methods used for controlling diverse I/O devices,External I/O cables and connectors,Dedicated I/O processors,Network communication protocols,B,The text states: 'These methods [varied control methods for I/O devices] form kernel's I/O subsystem...'
What is the primary benefit of the kernel's I/O subsystem regarding device management?,It speeds up application loading times.,It separates the kernel from device management complexities.,It provides direct access to hardware for user applications.,It standardizes I/O device manufacturing.,It automates hardware repairs.,B,The text notes the I/O subsystem's role in 'separating kernel from device management complexities.'
Which trend in I/O device technology aids in incorporating new device generations more easily?,Decreasing overall device cost,Increasing specialization of device functions,Increasing standardization of software/hardware interfaces,Decreasing power requirements of devices,Increasing reliance on proprietary protocols,C,The text states: 'Increasing standardization of software/hardware interfaces: helps incorporate new device generations.'
"What I/O device technology trend poses a challenge for incorporating new, unlike devices?",Decreasing physical size of devices,Increasingly broad variety of I/O devices,Rising cost of device manufacturing,Stagnation in data transfer speeds,Reduced availability of raw materials,B,"The text identifies: 'Increasingly broad variety of I/O devices: challenge to incorporate new, unlike devices.'"
Which set of basic I/O hardware elements is mentioned as being able to accommodate diverse devices?,"CPUs, RAM, and GPUs","Monitors, keyboards, and mice","Ports, buses, and device controllers","Power supplies, cooling fans, and chassis","Printers, scanners, and projectors",C,"The text lists: 'Basic I/O hardware elements (ports, buses, device controllers) accommodate diverse devices.'"
How is the kernel structured to encapsulate device details and manage I/O complexities?,Through a single monolithic block of code,By relying solely on external hardware components,With device-driver modules,By offloading all I/O to application software,Through direct user-level programming,C,The text explains: 'Kernel structured with device-driver modules to encapsulate device details.'
What type of interface do device drivers provide to the I/O subsystem?,"A proprietary, device-specific interface",A uniform device-access interface,A network-only communication interface,A graphical user interface (GUI),A power management interface,B,The text states: 'Device drivers provide uniform device-access interface to I/O subsystem...'
Device drivers provide an interface to the I/O subsystem that is described as similar to what for applications?,File system structures,Memory addresses,System calls,Network packets,Processor registers,C,"The text clarifies: 'Device drivers provide uniform device-access interface to I/O subsystem, similar to system calls for applications.'"
"Based on the provided glossary, which of the following accurately defines a 'device driver'?",A hardware component that connects I/O devices to the motherboard.,An application program used to configure I/O settings.,An OS component providing uniform access and managing I/O to various devices.,A set of protocols for network communication between devices.,A diagnostic tool for identifying I/O hardware failures.,C,The glossary defines 'device driver' as 'OS component providing uniform access and managing I/O to various devices.'
An OS component responsible for providing uniform access and managing I/O to various devices is known as a(n):,I/O port,Bus controller,Device manager,System call,Device driver,E,The glossary defines 'device driver' as 'OS component providing uniform access and managing I/O to various devices.'
Which of the following is NOT listed as a common type of device that computers operate?,Storage devices,Transmission devices,Human-interface devices,Computational devices,Specialized devices like jet steering,D,"The text lists storage (disks, tapes), transmission (network, Bluetooth), human-interface (screen, keyboard, mouse, audio), and specialized devices (e.g., jet steering). Computational devices are not listed as a device type operated by computers in this context."
What is the term for a connection point where devices attach to computers?,Bus,Controller,Port,Daisy chain,PHY,C,The text defines a 'port' as 'Connection point for devices to attach to computers'.
"A set of wires with a rigidly defined protocol for messages (electrical voltages, timings) that allows devices to share wires is called a(n):",Port,Controller,Daisy chain,Bus,HBA,D,"The text defines a 'bus' as a 'set of wires, rigidly defined protocol for messages (electrical voltages, timings)' where 'Devices sharing wires' connect."
"Which of the following describes devices connected in a string, where device A connects to B, and B connects to C, usually operating as a bus?",Serial connection,Parallel connection,Daisy chain,Star topology,Ring network,C,"The text defines a 'daisy chain' as 'devices connected in string (A to B, B to C), usually operates as a bus'."
Which type of bus in a typical PC structure connects the processor-memory subsystem to fast devices?,Expansion bus,Serial-attached SCSI (SAS) bus,PCIe bus,USB bus,Fibre Channel (FC) bus,C,The text states that the 'PCIe bus' connects the processor-memory subsystem to fast devices.
"According to the text, what is the primary function of an 'expansion bus' in a typical PC bus structure?",Connecting the processor to memory,Connecting fast I/O devices,Connecting disks to an SAS controller,Connecting slow devices like keyboards and serial ports,Providing power to peripheral devices,D,"The text states that the 'Expansion bus' connects slow devices (keyboard, serial, USB ports)."
How does PCIe (PCI Express) typically transmit data?,Via a single shared copper wire for all data,Through analog signals over a single channel,"Over multiple 'lanes', each acting as a full-duplex byte stream",By modulating data onto radio frequencies,Using programmed I/O instructions exclusively,C,"The text describes PCIe as a flexible bus that sends 'data over ""lanes""', with each 'Lane: two signaling pairs (receive/transmit), full-duplex byte stream'."
"What is the smallest number of physical links (lanes) a PCIe connection can have, as listed in the text?",1,2,4,8,12,A,"The text lists PCIe physical links as '1, 2, 4, 8, 12, 16, or 32 lanes'."
"Which component is described as the electronics operating a port, bus, or device?",CPU,Memory,Controller,PHY,Operating System,C,"The text defines a 'Controller' as 'electronics operating a port, bus, or device'."
A Fibre Channel (FC) bus controller is often implemented as a separate circuit board known as a(n):,Integrated graphics unit,Network Interface Card (NIC),Host Bus Adapter (HBA),Solid State Drive (SSD),Power Supply Unit (PSU),C,The text states that a 'Fibre channel (FC) bus controller' is 'often separate circuit board (host bus adapter (HBA))'.
"Which of the following is a task commonly performed by a disk controller, as mentioned in the text?",Executing user application code,Managing network traffic routing,"Performing bad-sector mapping, prefetching, buffering, and caching",Rendering 3D graphics,Controlling CPU clock speed,C,"The text states: 'Disk controller: implements disk-side protocol (SAS, SATA), microcode, processor for tasks (bad-sector mapping, prefetching, buffering, caching)'."
What is 'memory-mapped I/O'?,A method where the CPU uses special I/O instructions to transfer data to/from devices.,A technique where device-control registers are mapped into the processor's address space.,A process of transferring data directly between a device and main memory without CPU intervention.,A system where all I/O operations are handled exclusively by the operating system kernel.,A method of storing device drivers in specific memory regions.,B,The text defines 'memory-mapped I/O' as 'device-control registers mapped into processor address space'.
Why has the trend in computer systems shifted towards using memory-mapped I/O for device communication?,It simplifies hardware design by removing the need for controllers.,It allows the CPU to execute more specialized I/O instructions.,"It is generally more efficient, especially for large transfers like graphics memory updates.",It completely eliminates the need for software interrupts.,It reduces the total number of registers required for device control.,C,The text states: 'Writing millions of bytes to graphics memory faster than millions of I/O instructions. Trend: systems moved to memory-mapped I/O for efficiency.'
Which I/O device control register is read by the host to receive input from a device?,Status register,Control register,Data-out register,Data-in register,Command register,D,The 'data-in register' is specifically described as 'read by host for input'.
A host writes to which I/O device control register to send output data to a device?,Status register,Control register,Data-out register,Data-in register,Command-ready register,C,The 'data-out register' is specifically described as 'written by host to send output'.
"Which I/O device control register contains bits that indicate states such as 'command complete', 'byte available', or 'error'?",Data-in register,Data-out register,Control register,Status register,Address register,D,"The 'status register' is described as having 'bits read by host, indicate states (command complete, byte available, error)'."
"When a host wants to start a command or change a device's mode (e.g., full/half-duplex, parity, word length, speed), it writes to which I/O device control register?",Data-in register,Data-out register,Control register,Status register,Configuration register,C,The 'control register' is defined as being 'written by host to start command or change device mode'.
"What is the term for a thread or process that continuously uses CPU cycles by repeatedly reading a status register, waiting for I/O completion?",Interrupt handling,Direct Memory Access (DMA),Busy-waiting or Polling,Double buffering,Cycle stealing,C,The text explicitly defines 'busy-waiting' or 'polling' as the host repeatedly reading the status register in an I/O loop.
Under what condition is polling an efficient method for host-controller interaction?,When the wait time for the device is very long.,When there are many other CPU tasks pending.,When the controller/device is very fast and rarely needs waiting.,When it leads to frequent buffer overflows.,When used for large data transfers only.,C,The text states: 'Polling efficient if controller/device fast.' and 'Polling efficient for basic operation (3 CPU cycles).'
Which of the following is a significant drawback of using polling for I/O if the wait is long and other CPU tasks are pending?,It increases the complexity of device drivers.,It causes frequent system crashes.,"It is inefficient, wasting CPU cycles on waiting.",It can only be used for output operations.,It requires specialized I/O instructions not available on most CPUs.,C,The text states: 'Inefficient if wait is long and other CPU tasks pending.'
"What is the alternative to polling, where a hardware controller notifies the CPU when it is ready for attention?",Direct Memory Access (DMA),Programmed I/O (PIO),Memory-mapped I/O,Interrupt,Context switching,D,The text states: 'Alternative: hardware controller notifies CPU when ready via interrupt.'
What action does the CPU take immediately after sensing an interrupt-request line asserted by a controller?,It continues executing the current instruction.,It saves its current state and jumps to an interrupt-handler routine.,It immediately restarts the entire system.,It polls all connected devices to identify the source.,It copies data directly to main memory.,B,"The text describes the basic mechanism: 'Controller asserts signal: CPU saves state, jumps to interrupt-handler routine at fixed address'."
Which hardware component assists the CPU in managing and dispatching interrupts efficiently?,The main memory (RAM),The graphics processing unit (GPU),Interrupt-controller hardware,The hard disk drive (HDD),The network interface card (NIC),C,The text states that sophisticated interrupt handling features are 'provided by CPU and interrupt-controller hardware'.
What is a 'nonmaskable interrupt' typically used for?,Routine device I/O completion signals.,System calls from user programs.,Unrecoverable errors such as memory parity errors.,Signals that can be temporarily ignored by the CPU.,"Debugging purposes, allowing the CPU to halt execution.",C,"The text defines 'nonmaskable interrupt' as 'for unrecoverable errors (e.g., memory errors)' and states it 'cannot be delayed or blocked'."
"An interrupt that can be turned off by the CPU for critical sequences, commonly used by device controllers, is known as a:",Nonmaskable interrupt,Software interrupt,Maskable interrupt,Trap,Exception,C,The text defines 'maskable' as an 'interrupt that can be delayed or blocked' and states it is 'used by device controllers'.
What is the purpose of an 'interrupt vector'?,To store the interrupt request line signals from all devices.,To provide a table of memory addresses of specialized interrupt handlers.,To manage the priority levels of various interrupts.,To queue incoming interrupt requests before processing.,To determine if an interrupt is maskable or nonmaskable.,B,The text states: 'Interrupt vector: table of memory addresses of specialized handlers' and its purpose is to 'reduce need for single handler to search all sources'.
"When there are more devices than available interrupt vector elements, what mechanism is used to allow multiple handlers to be associated with a single vector entry?",Interrupt pooling,Direct Memory Access (DMA),Interrupt chaining,Software interrupts,Polling,C,The text explains: 'More devices than vector elements: interrupt chaining. Interrupt chaining: each vector element points to head of handler list; handlers called until one services request.'
"Which range of interrupt vector elements in the Intel Pentium event-vector table is designated for maskable, device-generated interrupts?",0-7,0-31,32-63,32-255,256 and above,D,The text specifies: 'Intel Pentium event-vector table: ... 32-255 (maskable): device-generated interrupts.'
"An event like 'division by zero', 'protected memory access', or 'privileged instruction from user mode' that triggers a software-generated interrupt is known as a(n):",Device interrupt,Polling event,Exception,DMA transfer,Hardware fault,C,"The text states: 'Handles exceptions: division by zero, protected memory access, privileged instruction from user mode.' and the glossary defines 'exception' as 'Software-generated interrupt by error or user program request for OS service'."
"Interrupt handling is often split into two levels. Which level is responsible for context switching, state storage, and queuing of interrupts?",Second-level interrupt handler (SLIH),Trap handler,First-level interrupt handler (FLIH),Device driver,Kernel scheduler,C,"The text describes 'First-level interrupt handler (FLIH)' as handling 'context switch, state storage, queuing'."
Which part of the split interrupt handling mechanism performs the actual processing of the interrupt?,The interrupt-controller hardware,The CPU's interrupt-request line,The First-level interrupt handler (FLIH),The Second-level interrupt handler (SLIH),The main operating system scheduler,D,The text describes 'Second-level interrupt handler (SLIH)' as performing 'actual handling'.
What is another common term for a 'software interrupt'?,Hardware interrupt,Nonmaskable interrupt,Trap,Polling loop,DMA request,C,"The text explicitly states: 'System calls: library routines build data structure, execute software interrupt or trap.' and the glossary confirms 'software interrupt' is 'also called a trap'."
How does the priority of a trap (software interrupt) typically compare to that of device interrupts?,Traps always have higher priority than device interrupts.,Traps typically have lower priority than device interrupts.,Traps and device interrupts always have the same priority.,"Traps only occur during system boot, so priority is irrelevant.","Priority depends solely on the CPU architecture, not the type of interrupt.",B,The text states: 'Trap priority: low compared to device interrupts (less urgent).'
What is 'programmed I/O (PIO)'?,A method where the CPU continuously polls status registers for I/O completion.,A data transfer method where the CPU transfers data one byte at a time.,A technique using virtual addresses for direct memory access.,An I/O operation managed entirely by a dedicated controller without CPU involvement.,A system where all I/O is handled through memory-mapped registers.,B,The text defines 'programmed I/O (PIO)' as a 'Data transfer method where CPU transfers data one byte at a time'.
"Why is Programmed I/O (PIO) considered wasteful for large data transfers (e.g., from a disk)?",It requires complex interrupt handlers.,It results in high power consumption.,The CPU has to constantly watch status bits and feed data byte-by-byte.,It can only transfer data in one direction.,It causes frequent system deadlocks.,C,"The text states: 'For large transfers (e.g., disk), programmed I/O (PIO) (CPU watching status bits, feeding data byte-by-byte) is wasteful'."
"Which component is responsible for offloading large data transfers directly between devices and main memory, without involving the main CPU in byte-by-byte transfer?",I/O port,Control register,Direct-memory-access (DMA) controller,Interrupt controller,Graphics controller,C,The text states: 'Offload work to direct-memory-access (DMA) controller.' and describes it as performing 'transfers without main CPU'.
What is 'scatter-gather' in the context of DMA operations?,A method for collecting small data packets into a single large buffer.,A command block that specifies a list of non-contiguous sources or destinations for data transfer.,A technique for distributing CPU tasks across multiple cores during I/O.,A process of transferring data between two memory-mapped devices.,A type of bus structure for connecting many dispersed devices.,B,The text defines 'scatter-gather' as a 'command block can be complex: list of non-contiguous sources/destinations'.
"When data is transferred to user space using DMA, what is the 'double buffering' issue that can make it inefficient?",The need for two separate DMA controllers.,The requirement to use two different types of memory (volatile and non-volatile).,A second copy operation from kernel memory to user memory.,The use of both physical and virtual addresses simultaneously.,The device having to write data twice to ensure integrity.,C,"The text states: 'Data to user space: second copy operation (double buffering) from kernel to user memory, inefficient'."
What is the term for the temporary prevention of the CPU from accessing main memory because a device like a DMA controller is seizing the bus?,Deadlock,Starvation,Cycle stealing,Context switching,Bus arbitration,C,The text defines 'cycle stealing' as 'DMA controller seizing bus: CPU momentarily prevented from main memory access'.
Which type of DMA uses virtual addresses as transfer sources/destinations and translates them to physical addresses?,Programmed DMA,Physical DMA,Direct Virtual Memory Access (DVMA),Indirect DMA,Buffered DMA,C,"The text states: 'Some architectures use physical addresses for DMA, others direct virtual memory access (DVMA). DVMA: uses virtual addresses, translates to physical.'"
"According to the summary, which of the following is NOT listed as a key concept of I/O hardware?",Bus,Controller,I/O port and its registers,CPU instruction set architecture,Handshaking (host and device controller),D,"The summary lists Bus, Controller, I/O port and its registers, Handshaking, Handshaking execution (polling/interrupts), and Offloading large transfers to DMA controller as key concepts. CPU instruction set architecture is not listed as a key concept of I/O hardware itself."
"What is the primary function of a 'PHY' component, according to the glossary?",To manage system memory.,To connect to a network at the physical layer (OSI layer 1).,To handle CPU scheduling.,To perform disk I/O operations.,To control a graphics display.,B,The glossary defines 'PHY' as 'Physical hardware component connecting to a network (OSI layer 1).'
Which I/O bus type is commonly used in data centers to connect computers to storage arrays?,PCIe bus,Expansion bus,Serial-attached SCSI (SAS),Fibre Channel (FC),USB,D,The glossary defines 'fibre channel (FC)' as 'Storage I/O bus used in data centers to connect computers to storage arrays'.
What is the primary goal of structuring techniques and interfaces in the application I/O interface?,To maximize the speed of I/O operations for all devices.,To ensure that all I/O devices use the same hardware protocols.,"To treat I/O devices uniformly, regardless of their specific type.",To allow applications to directly control device hardware.,To reduce the number of physical I/O devices connected to the system.,C,The text states the goal is to 'treat I/O devices uniformly'.
Which of the following is an example illustrating the uniform treatment of I/O devices?,An application directly accessing a disk's raw sectors without OS intervention.,Opening a file on a disk without needing to know the specific disk type.,A network card communicating directly with another network card.,Configuring a printer to use a specific manufacturer's driver.,Synchronizing system clocks across multiple network machines.,B,The text provides 'open file on disk without knowing disk type' as an example of uniform treatment.
What is a benefit of the I/O structuring approach related to new hardware?,It eliminates the need for any device drivers for new hardware.,It allows new devices to be added without disrupting the operating system.,It automatically converts older devices to be compatible with new standards.,It ensures that all new devices operate at the highest possible speed.,It limits the types of devices that can be connected to the system.,B,One of the stated benefits is the ability to 'Add new devices without OS disruption'.
Which set of techniques is primarily used in the approach to achieve uniform I/O device treatment?,"Polling, busy waiting, and direct memory access.","Interrupt handling, context switching, and caching.","Abstraction, encapsulation, and software layering.","Network protocols, socket programming, and data compression.","Multithreading, process synchronization, and virtual memory.",C,"The text explicitly lists 'abstraction, encapsulation, software layering' as the approach."
How do device drivers contribute to the uniform treatment of I/O devices?,They completely replace the need for kernel I/O subsystems.,They are custom-tailored to specific devices but export standard interfaces.,They are generic and can control any device without customization.,They directly manage application-level I/O requests.,They eliminate the need for any form of software layering.,B,"The text states 'Device drivers: custom-tailored to specific devices, export standard interfaces'."
What is the primary purpose of the device-driver layer in an operating system?,To provide a direct interface for applications to interact with hardware.,To manage network communication protocols.,To hide differences among device controllers from the kernel I/O subsystem.,To perform data compression and encryption for I/O operations.,To schedule processes for I/O operations based on priority.,C,The purpose of the device-driver layer is 'to hide differences among device controllers from kernel I/O subsystem'.
How do I/O system calls hide hardware differences from applications?,By allowing applications to bypass the OS and directly control hardware registers.,By encapsulating device behavior in generic classes.,By converting all device outputs into a character-stream format.,By requiring applications to specify the exact hardware model for each I/O request.,"By using a single, universal driver for all possible hardware devices.",B,"The text mentions 'I/O system calls encapsulate device behavior in generic classes, hiding hardware differences from applications'."
Which of the following is a benefit of the standardized I/O interface approach?,It mandates that all hardware manufacturers use the same chipsets.,It forces OS developers to write device-specific code for every new device.,It simplifies OS development and allows hardware manufacturers to design compatible devices.,It removes the need for any form of software drivers.,It prioritizes speed over compatibility for all I/O operations.,C,"Benefits include 'simplifies OS development, allows hardware manufacturers to design compatible devices or write drivers for popular OS'."
A device that transfers a block of bytes as a single unit is categorized as what type of device?,Character-stream device,Sequential device,Block device,Synchronous device,Dedicated device,C,The text defines 'Block' devices as those that transfer 'a block of bytes as a unit'.
What is a characteristic of a 'sequential access' device?,It allows the user to seek to any storage location directly.,It transfers data in a fixed order determined by the device.,It can be used concurrently by multiple processes.,It guarantees predictable response times.,It transfers bytes one by one.,B,A 'Sequential' device is characterized by 'fixed order determined by device'.
Which characteristic describes I/O operations with 'predictable response times' and 'coordinated' behavior?,Asynchronous,Nonblocking,Synchronous,Sharable,Vectored,C,"The text defines 'Synchronous' as having 'predictable response times, coordinated'."
A device that 'cannot be used concurrently' by multiple processes or threads is classified as what type?,Sharable,Asynchronous,Character-stream,Dedicated,Random-access,D,The text defines 'Dedicated' devices as those that 'cannot be used concurrently'.
Which type of device is capable of both input and output data transfers?,Read only,Write once,Read-write,Character-stream,Sequential,C,'Read-write' devices are defined as handling 'both input/output'.
Operating systems group devices into conventional types and hide many differences. Which of the following is NOT listed as a major application access convention?,Block I/O,Character-stream I/O,Memory-mapped file access,Direct hardware register access,Network sockets,D,"The major access conventions listed are Block I/O, Character-stream I/O, Memory-mapped file access, and Network sockets. Direct hardware register access is not listed as a conventional type."
What mechanism do most operating systems provide to transparently pass arbitrary commands to a device driver when the standard interface lacks a specific method?,A system call specifically for network communication.,A dedicated hardware interrupt line.,An 'escape' or 'back door' mechanism.,A global shared memory region.,A standardized logging interface.,C,The text mentions 'Most OS have an escape or back door: transparently passes arbitrary commands to device driver'.
"In UNIX, which system call enables an application to access any driver functionality without requiring a new system call?",`read()`,`write()`,`select()`,`ioctl()`,`gettimeofday()`,D,The text explicitly states 'UNIX: `ioctl()` system call' for this purpose.
"When using the `ioctl()` system call in UNIX, what does the 'major number' of the device identifier represent?",The specific instance of the device.,The current speed of the device.,"The type of the device, used to route I/O requests to the correct driver.",The number of bytes transferred in the current operation.,The priority level of the I/O request.,C,"The major number is described as representing the 'device type, routes I/O requests to driver'."
Which of the following commands is typically associated with a block-device interface for random-access capabilities?,`get()`,`put()`,`seek()`,`connect()`,`listen()`,C,"The text lists 'read(), write(), seek() (for random-access)' as commands for block-device interfaces."
What is 'raw I/O' primarily used by operating systems or special applications like DBMS?,Accessing network sockets directly without protocol stacks.,"Directly accessing secondary storage as a linear array of blocks, bypassing the file system.",Performing character-by-character input from keyboards.,Mapping entire files into main memory for faster access.,Executing arbitrary commands on a device driver.,B,"Raw I/O is defined as 'direct access as linear array of blocks, no file system'."
What is a key advantage of using 'raw I/O'?,It simplifies file system management for developers.,It provides a more secure way to access data.,It avoids extra buffering and redundant locking.,It guarantees data consistency across all applications.,It enables higher-level abstractions for device interaction.,C,The text states 'Raw I/O avoids extra buffering and redundant locking'.
"In UNIX, what is the term for a mode on a file that disables OS block features like buffering and locking, acting as a compromise for raw I/O?",Sequential I/O,Memory-mapped I/O,Direct I/O,Network I/O,Character I/O,C,"UNIX uses 'direct I/O' as a mode on files to disable buffering/locking, a compromise for raw I/O."
Memory-mapped file access is described as being 'layered on' what type of drivers?,Character-stream drivers,Network socket drivers,Printer drivers,Block-device drivers,Audio drivers,D,The text states 'Memory-mapped file access: layered on block-device drivers'.
What is a primary convenience for programmers when using memory-mapped file access?,It requires complex system calls for every data access.,It simplifies data access to simple read/write operations to memory.,It necessitates explicit management of disk sectors.,It forces data to be loaded entirely into memory at once.,It bypasses the operating system entirely for file operations.,B,It's convenient for programmers due to 'simple read/write to memory'.
Which of the following devices typically utilizes a character-stream interface?,Hard disk drive,Solid-state drive,CD-ROM drive,Keyboard,USB flash drive,D,"The text lists 'keyboards, mice, modems, printers, audio boards' as examples for character-stream interface."
The basic system calls for a character-stream interface are primarily for transferring what unit of data?,Blocks of data,Entire files,Packets,One character at a time,Memory pages,D,"Basic system calls are 'get(), put() one character'."
What is the common interface for network I/O in systems like UNIX and Windows?,Block-device interface,Character-stream interface,Network socket,Memory-mapped file access,Direct I/O,C,The text identifies 'network socket' as the 'common interface' for network I/O.
"Which system call is specifically designed to manage a set of sockets and return information on which ones are ready for I/O (e.g., packet waiting, room to send)?",`read()`,`write()`,`connect()`,`select()`,`listen()`,D,"`select()` is described as managing 'set of sockets, returns info on ready sockets'."
What is a key benefit of using the `select()` system call for network I/O?,It encrypts all network traffic automatically.,It eliminates polling and busy waiting for network I/O.,It guarantees delivery of all packets regardless of network conditions.,It provides direct hardware access to the network interface card.,It standardizes network protocols globally.,B,`select()` 'eliminates polling/busy waiting for network I/O'.
Which of the following is NOT listed as a capability provided by hardware clocks and timers?,Providing the current time.,Measuring elapsed time.,Setting a timer for a future operation.,Directly controlling process execution order.,Triggering operations based on time intervals.,D,"Clocks/timers provide current time, elapsed time, and set timers, but do not directly control process execution order; rather, they enable the OS scheduler to do so."
What is the primary function of a 'programmable interval timer'?,To measure the CPU temperature.,To synchronize data across multiple disks.,To measure elapsed time and trigger operations.,To manage network packet routing.,To control graphical display resolution.,C,"A programmable interval timer is 'hardware to measure elapsed time, trigger operations'."
How does an OS typically support more timer requests than available hardware channels?,By ignoring less critical timer requests.,By dedicating a separate CPU core to each timer request.,By simulating virtual clocks and maintaining a sorted list of wanted interrupts.,By offloading all timer management to external hardware.,By requiring applications to manage their own timers.,C,The text explains the OS 'Supports more timer requests than hardware channels by simulating virtual clocks' and the 'Kernel maintains sorted list of wanted interrupts'.
What is the 'High-performance event timer (HPET)' commonly used in modern PCs characterized by?,It's a software-only timer that relies on CPU cycles.,It's a low-frequency counter providing millisecond precision.,It's a hardware timer often operating in the 10-megahertz range with comparators triggering interrupts.,It's primarily used for network time synchronization.,It completely replaces the need for programmable interval timers.,C,HPET is described as a 'hardware timer provided by some CPUs' in the '10-megahertz range' with 'Comparators trigger interrupts when value matches HPET'.
Which protocol is specifically mentioned for correcting system clock drift?,Transmission Control Protocol (TCP),Hypertext Transfer Protocol (HTTP),Network Time Protocol (NTP),Internet Protocol (IP),Secure Shell Protocol (SSH),C,"System clock drift is 'corrected by protocols (e.g., network time protocol (NTP))'."
What happens to the calling thread when a 'blocking' system call is made?,"It immediately returns, indicating the I/O operation will complete later.",It is suspended and moved to a wait queue until the I/O completes.,"It continues execution, and I/O completion is communicated via a signal.",It polls the device repeatedly until data is available.,It transfers all available bytes and then immediately terminates.,B,"A 'Blocking' system call is one where the 'calling thread suspended, moved to wait queue. Resumes after completion'."
"Why do operating systems typically provide blocking I/O calls for the application interface, even though physical I/O actions are often asynchronous?",To force applications to handle complex interrupt routines.,Because blocking calls are easier for programmers to write.,To prevent multiple applications from accessing the same device.,To ensure absolute real-time performance for all I/O.,To minimize the use of system resources.,B,OS provides blocking calls 'for application interface (easier to write)'.
Which type of I/O system call returns quickly and indicates bytes transferred but does NOT halt the thread?,Blocking I/O,Asynchronous I/O,Nonblocking I/O,Synchronous I/O,Vectored I/O,C,"Nonblocking I/O system calls 'return quickly, indicate bytes transferred, don't halt thread'."
What is a characteristic of an 'asynchronous system call' for I/O?,It suspends the calling thread until the I/O operation is fully complete.,It always returns an error if data is not immediately available.,It returns immediately and does not wait for I/O; the thread continues execution.,It requires the application to continuously poll the device for completion.,"It only works for character-stream devices, not block devices.",C,"An 'Asynchronous system call: returns immediately, doesn't wait for I/O. Thread continues'."
What is the key difference between a nonblocking `read()` and an asynchronous `read()`?,"Nonblocking `read()` always reads the full requested amount, while asynchronous `read()` reads partially.","Nonblocking `read()` returns available data immediately (full, fewer, or none); asynchronous `read()` requests the full transfer to complete later.","Nonblocking `read()` requires a callback, while asynchronous `read()` uses a signal.","Nonblocking `read()` is only for network I/O, while asynchronous `read()` is for disk I/O.","Nonblocking `read()` waits indefinitely, while asynchronous `read()` has a timeout.",B,"The text clarifies: 'Difference: nonblocking `read()` returns available data immediately (full, fewer, none); asynchronous `read()` requests full transfer to complete later'."
How does OS buffering primarily optimize I/O performance?,By eliminating the need for any system calls.,By directly writing data to disk without involving the CPU.,By returning to the application quickly and completing the request later.,By requiring applications to manage their own data consistency.,By ensuring all I/O operations are strictly synchronous.,C,"OS buffers I/O, returns to application, completes request later (optimizes performance)."
What is the purpose of 'Vectored I/O'?,To perform I/O operations on devices that only support vector graphics.,To allow a single system call to perform multiple I/O operations involving multiple locations.,To create a virtual I/O device for testing purposes.,To ensure that all I/O requests are handled synchronously.,To convert serial data streams into parallel streams.,B,Vectored I/O is defined as 'one system call performs multiple I/O operations involving multiple locations'.
"Which UNIX system call is an example of Vectored I/O, accepting a vector of multiple buffers?",`read()`,`write()`,`readv()`,`ioctl()`,`select()`,C,"UNIX `readv` is given as an example of Vectored I/O: 'accepts vector of multiple buffers, reads to/writes from vector'."
What is another common name for 'Vectored I/O'?,Pipelined I/O,Buffered I/O,Scatter-gather,Atomic I/O,Direct Memory Access (DMA),C,The text states 'Also called scatter-gather'.
One of the benefits of Vectored I/O (scatter-gather) is that it avoids which of the following?,The need for device drivers.,The use of hardware interrupts.,Context-switching and system-call overhead.,Any form of data buffering.,The creation of virtual memory addresses.,C,Benefits include 'Avoids context-switching and system-call overhead'.
What does the term 'escape' or 'back door' refer to in the context of I/O interfaces?,A security vulnerability that allows unauthorized access to devices.,A method of passing arbitrary commands to a device driver when the standard interface is insufficient.,A debugging port used during hardware development.,A fallback mechanism for network communication during failures.,A way to restore device settings to factory defaults.,B,From the glossary: 'Method of passing arbitrary commands when interface lacks standard method'.
Which definition correctly describes 'raw I/O'?,Access to a device through a standardized file system interface.,"Direct access to secondary storage as a linear array of blocks, bypassing the file system.",Character-by-character input/output operations.,Input/output operations managed exclusively by the CPU.,Network communication without using sockets.,B,"From the glossary: 'Direct access to secondary storage as array of blocks, no file system'."
What is the primary characteristic of 'direct I/O'?,It ensures that all I/O is routed through the main CPU cache.,It is a block I/O method that bypasses OS block features like buffering and locking.,It allows direct memory access without involving the kernel.,It is an interface specifically for network devices.,It refers to I/O operations that are always synchronous.,B,"From the glossary: 'Block I/O bypassing OS block features (buffering, locking)'."
What is a 'socket' in the context of network I/O?,A physical connector for network cables.,A software library for encrypting network data.,An endpoint for communication and an interface for network I/O.,A type of network protocol used for file sharing.,A hardware device that manages network addresses.,C,From the glossary: 'Endpoint for communication; interface for network I/O'.
What is a 'programmable interval timer'?,A software application for scheduling tasks.,A hardware timer provided by many CPUs for measuring elapsed time and triggering operations.,A network device used for time synchronization.,A component that controls the speed of data transfer.,A type of memory used to store timing information.,B,From the glossary: 'Hardware timer provided by many CPUs'.
How is 'blocking' I/O defined?,An I/O request that completes instantly without any delay.,An I/O request that allows the calling thread to continue executing immediately.,An I/O request that suspends the calling thread until the I/O operation completes.,An I/O request that processes multiple data locations in one call.,An I/O request that only reads data and does not write.,C,From the glossary: 'I/O request that suspends calling thread until I/O completes'.
What is the definition of 'nonblocking' I/O?,An I/O request that waits for a specified timeout period before returning.,An I/O request that is only used for network communications.,"An I/O request that returns immediately with available data, allowing the thread to continue.",An I/O request that guarantees the full amount of data will be transferred later.,An I/O request that requires explicit polling by the application.,C,"From the glossary: 'I/O request that returns immediately with available data, allowing thread to continue'."
What is the purpose of 'Network Time Protocol (NTP)'?,To provide high-speed data transfer over networks.,To securely encrypt network communications.,To synchronize system clocks across a network.,To manage network device drivers.,To allocate network addresses to devices.,C,From the glossary: 'Network protocol for synchronizing system clocks'.
Which of the following best describes the 'character-stream interface'?,An interface for block-oriented devices like hard drives.,"An interface for I/O to devices that transfer bytes one by one, such as keyboards or modems.",An interface that manages network packets.,An interface that maps files directly into memory.,"An interface used for high-speed, random-access data transfers.",B,"From the glossary: 'Interface for I/O to character devices (e.g., keyboards)' combined with the characteristic 'transfers bytes one by one'."
Which of the following is a primary role of the kernel's I/O subsystem?,Managing user application logic,Providing I/O-related services such as scheduling and buffering,Direct hardware instruction execution by user processes,Bypassing device drivers for efficiency,Handling graphical user interface rendering,B,"The kernel's I/O subsystem primarily provides various I/O-related services to applications and the system, including scheduling, buffering, caching, spooling, device reservation, and error handling."
"All of the following are services commonly provided by the kernel's I/O subsystem, EXCEPT:",Buffering,Spooling,Process scheduling (for CPU time),Error handling,Device reservation,C,"Process scheduling for the CPU is a broader operating system service, distinct from the I/O-specific services listed for the kernel's I/O subsystem."
What critical responsibility does the I/O subsystem hold regarding system integrity?,Managing CPU core allocation,Protecting itself from errant processes and malicious users,Ensuring network connectivity for all applications,Designing new hardware interfaces,Compiling user applications,B,The I/O subsystem is responsible for protecting itself from errant processes and malicious users to maintain system stability and security.
The kernel's I/O subsystem builds upon which underlying components?,User-level application libraries,Web browsers and network protocols,Hardware and device-driver infrastructure,Cloud-based virtual machines,Relational databases,C,The text states that the I/O subsystem 'Builds on hardware and device-driver infrastructure'.
What is the primary purpose of I/O scheduling in an operating system?,To allow applications to directly control device hardware,To determine a good execution order for I/O requests,To minimize the number of I/O requests,To guarantee immediate execution of all I/O system calls,To prevent any form of I/O buffering,B,"I/O scheduling determines an efficient execution order for I/O requests, which is often different from the application's system call order."
Which of the following is NOT a benefit of I/O scheduling?,Improved overall system performance,Reduced average waiting time,Fair device access,Guaranteed sequential execution of application I/O calls,Increased computer efficiency,D,"I/O scheduling often reorders requests for efficiency, meaning the sequential order of application I/O calls is rarely maintained if it's not optimal."
How does the operating system typically implement I/O scheduling for a device?,By giving direct control of the device to the requesting application,By immediately executing every I/O system call in the order it arrives,By maintaining a wait queue for each device and rearranging requests,By relying solely on hardware to order requests,By converting all I/O requests into network packets,C,I/O schedulers maintain a wait queue for each device and rearrange the requests within that queue for efficiency.
"In I/O scheduling, which type of request might an OS prioritize over a standard application request?",Low-priority batch job requests,Delay-sensitive requests from the virtual memory subsystem,Requests from legacy applications,Requests that are already buffered,Requests that are part of a spooling operation,B,"Operating systems may prioritize delay-sensitive requests, such as those from the virtual memory subsystem, over less time-critical application requests."
What is the purpose of the `device-status table` used by the kernel in asynchronous I/O?,To store historical error logs for all devices,To list all installed device drivers,To track the status and queues of operations for each I/O device,To provide a mapping of logical addresses to physical memory,To manage network firewall rules,C,"The device-status table is a kernel data structure with an entry for each I/O device, tracking its type, address, state (idle, busy, not functioning), and parameters for current or pending requests."
Which of the following pieces of information is typically found in a `device-status table` entry for an I/O device?,The manufacturer's contact information,The device's current temperature,"The device type, address, and state (e.g., busy, idle)",The estimated remaining lifespan of the device,The full source code of the device driver,C,"A device-status table entry typically includes the device type, its address, and its current state (e.g., not functioning, idle, busy)."
"Beyond scheduling I/O operations, how else does the kernel I/O subsystem improve computer efficiency, especially concerning storage space?",By directly writing all data to permanent storage without temporary copies,By eliminating the need for main memory,"By using storage space in main memory/storage hierarchy via buffering, caching, and spooling",By compressing all data transfers on the fly without dedicated buffers,By restricting the number of concurrent I/O requests,C,"The text states that the I/O subsystem 'Also uses storage space in main memory/storage hierarchy via buffering, caching, spooling' to improve efficiency."
What is a `buffer` in the context of I/O?,A region of fast memory holding copies of data for performance improvement,A memory area specifically for CPU instruction caching,A memory area storing data being transferred between devices or between a device and an application,A file on secondary storage used for temporary output,A process control block,C,A buffer is defined as a memory area storing data transferred between devices or between a device and an application.
One primary reason for using buffering in the kernel's I/O subsystem is to:,Increase the CPU's clock speed,Cope with speed mismatches between producer and consumer devices,Reduce the total amount of data transferred,Directly execute privileged I/O instructions from user space,Eliminate the need for device drivers,B,"Buffering helps to manage differences in data transfer rates between a producer (e.g., slow network) and a consumer (e.g., fast SSD), allowing data to accumulate before being written in larger chunks."
What is the main advantage of `double buffering`?,It reduces the total memory required for I/O operations,It eliminates the need for any data copying,It allows producers and consumers to be decoupled and relax their timing constraints,It ensures data is always written to disk immediately,It prevents all types of I/O errors,C,"Double buffering uses two buffers, allowing one to be filled by the producer while the other is being emptied by the consumer, thereby decoupling their timing and improving efficiency."
"Besides coping with speed mismatches, what other reason is cited for using buffering?",To encrypt all data transfers,To enforce strict real-time deadlines,To provide adaptations for different data-transfer sizes,To perform file system defragmentation,To allow direct memory access for user applications,C,"Buffering also helps adapt to different data-transfer sizes, such as managing network fragmentation and reassembly."
"In the context of I/O, what does `copy semantics` guarantee?","That data is written to disk exactly as it appears in the application's buffer at the moment the system call is made, independent of subsequent changes",That all data is automatically compressed before writing,That the operating system retains a permanent copy of all data written,"That an application can modify its buffer immediately after a write call, and the changes will affect the disk write",That data is transferred directly from application memory to device without any intermediate copies,A,"Copy semantics ensure that the data written to disk is the version that existed at the time of the system call, independent of any subsequent changes the application might make to its original buffer."
How does the OS typically guarantee `copy semantics` for an application's `write()` system call?,By preventing the application from modifying its buffer until the disk write is complete,By writing data directly from the application's buffer to the disk hardware,"By copying application data to a kernel buffer before returning to the application, then writing from the kernel buffer",By using a direct memory access (DMA) controller without involving the CPU,By encrypting the data before it leaves the application buffer,C,"To guarantee copy semantics, the OS typically copies the application's data to a kernel buffer (e.g., a buffer cache) before the `write()` system call returns, and then the disk write occurs from this kernel buffer."
"Despite the overhead, why is copying data between kernel and application space common for I/O operations?",It is the only way to perform I/O,It guarantees maximum speed,"Due to clean semantics (e.g., copy semantics)",It is a legacy practice that cannot be changed,It prevents the kernel from accessing user data,C,"The text mentions that copying data between kernel/application space is common 'despite overhead, due to clean semantics' like copy semantics."
What more efficient alternative to direct data copying is mentioned for handling `copy semantics`?,Direct memory access (DMA) without CPU involvement,Virtual memory mapping and copy-on-write page protection,Eliminating the need for a kernel buffer,Writing data directly to the disk from the application buffer,Using a specialized hardware accelerator for data transfer,B,The text states 'More efficient: virtual memory mapping and copy-on-write page protection' as an alternative for copy semantics.
What is a `cache` in the context of computer systems?,"A dedicated region of slow, persistent storage for long-term data archiving",A region of fast memory holding temporary copies of data that exist elsewhere,A permanent record of all system events,A software component responsible for translating network protocols,A mechanism for preventing I/O operations from occurring,B,"A cache is a region of fast memory designed to hold temporary copies of data that originates from a slower, original location, thereby improving access efficiency."
What is the fundamental difference between a `buffer` and a `cache` as described in the text?,Buffers are always larger than caches,"Caches are used for write operations only, while buffers are for reads","A buffer may hold the only copy of data during transfer, whereas a cache holds a copy of an item residing elsewhere","Buffers are hardware components, while caches are software components","Caches are volatile memory, and buffers are non-volatile",C,"The text states that a buffer may hold the only copy of data during transfer, while a cache holds a copy of an item that primarily resides elsewhere (the original data)."
How can OS main memory buffers also act as a cache for disk data?,They periodically delete data that has been written to disk,They improve I/O efficiency for shared files or rapid write/reread by storing copies,They directly replace physical disk storage,They are used exclusively for network communication,They convert data formats for different applications,B,"OS main memory buffers, while serving for copy semantics and scheduling, can also act as a cache by storing copies of data that can be quickly accessed for shared files or repeated read/write operations, thus avoiding physical disk I/O."
"When a kernel receives a file I/O request, how does it use the buffer cache to improve efficiency?","It immediately writes the data to the disk, bypassing the cache","It checks the buffer cache first; if the data is available, it avoids or defers physical disk I/O",It copies the data from the disk directly to the application,It discards the request if the data is already in the cache,It requests the user to manually clear the cache,B,"The kernel checks the buffer cache for a file I/O request. If the requested data is already in the cache, it can satisfy the request from memory, avoiding or deferring slower physical disk I/O."
How does the buffer cache facilitate efficient write schedules for disk writes?,By immediately writing every byte to disk as it arrives,By accumulating disk writes in the buffer cache for seconds before writing them physically,By delegating all write operations to the application,"By only caching read operations, not writes",By preventing any writes from occurring until the system is shut down,B,The text mentions that 'Disk writes accumulated in buffer cache for seconds: allows efficient write schedules.' This describes a write-back caching strategy.
What is a `spool`?,A special type of high-speed network interface,A buffer holding output for a device that cannot accept interleaved data streams,A dedicated memory region for storing kernel code,A mechanism for direct memory access (DMA) in user applications,A file system journaling mechanism,B,A spool is defined as a buffer holding output for a device (like a printer) that cannot accept interleaved data streams from multiple sources concurrently.
Why is spooling necessary for devices like printers?,To allow multiple applications to print concurrently even though the printer serves only one job at a time,To permanently store print jobs in case of system failure,To encrypt print data before it reaches the printer,To accelerate the physical printing process,To bypass the operating system's I/O subsystem,A,"Spooling allows multiple applications to seem to print concurrently by intercepting their output and storing it in separate files, which are then queued and sent to the printer one at a time."
Which statement accurately describes how spooling handles concurrent output requests for a device like a printer?,The OS forces applications to wait for the printer to become idle before generating output,"The OS intercepts each application's output, spools it to a separate secondary storage file, and queues it for the printer",The OS sends parts of each application's output to the printer in an interleaved fashion,The OS copies all application output directly to the printer's internal memory,"Applications communicate directly with the printer, bypassing the OS",B,"The OS intercepts output from concurrent applications, spools (stores) it to separate files on secondary storage, and then the spooling system copies these queued files to the printer one at a time."
How is a spooling system typically managed in an operating system?,Exclusively by user applications,Manually by the system administrator for each print job,By a system daemon process or an in-kernel thread,By a dedicated hardware chip,By the network router,C,The text states spooling is 'Managed by system daemon process or in-kernel thread'.
"For devices that cannot multiplex I/O requests (e.g., tape drives), what mechanism does the OS provide besides spooling to coordinate access?",Automatic device sharing among all applications,Explicit coordination facilities for exclusive device access,Conversion of I/O requests into parallel streams,Mandatory buffering for all requests,Disabling the device when multiple requests are pending,B,"For devices that cannot multiplex I/O, the OS provides explicit coordination facilities, such as exclusive device access, to ensure only one process uses the device at a time."
"When an OS provides functions for processes to coordinate exclusive device access, what responsibility falls upon the applications using these functions?",To directly configure device hardware,To implement their own device drivers,To avoid deadlock,To bypass OS protection mechanisms,To manage the global device-status table,C,"Even with OS-provided functions for exclusive access, applications are responsible for coordinating their use of devices to avoid deadlocks."
"In I/O error handling, what is the distinction between a transient failure and a permanent failure?","Transient failures occur in hardware, permanent failures in software","Transient failures are often recoverable (e.g., network overloaded), while permanent failures are typically unrecoverable (e.g., defective controller)","Transient failures happen during reads, permanent failures during writes","Transient failures affect only one application, permanent failures affect the whole system","Transient failures require a reboot, permanent failures do not",B,"Transient failures (like a network overload) can often be compensated for by the OS (e.g., retries), whereas permanent failures (like a defective controller) are typically unrecoverable."
How does an OS typically compensate for `transient` I/O failures?,By immediately shutting down the system,"By attempting retries (e.g., disk read retry, network send resend)",By permanently disabling the device,By notifying the user to replace the hardware,By converting the I/O operation into a different type,B,"The OS compensates for transient failures by retrying the operation, such as reattempting a disk read or resending a network packet."
"In UNIX-like operating systems, what is the common mechanism for an I/O system call to return an error code to the application?",A graphical pop-up error message,Writing an error message directly to the console,Setting an integer variable named `errno` to a specific value,Sending an email to the system administrator,Initiating a system reboot,C,UNIX systems use an integer variable `errno` to communicate error codes (like 'argument out of range' or 'file not open') back to the application from an I/O system call.
"Regarding detailed hardware error information, what is a common issue with many operating systems?",They always convey all detailed information to the application,They often don't convey the detailed hardware error information to the application,They only provide detailed error information for network devices,"They store all detailed error information in a public, accessible file",They require hardware manufacturers to implement their own error reporting,B,"The text notes: 'Some hardware provides detailed error info, but many OS don't convey to application.'"
"According to the SCSI protocol error reporting, what does the `sense key` convey?",Detailed information about the exact byte that failed,"The general nature of the failure (e.g., hardware error, illegal request)",The time and date of the error,The firmware version of the device,The serial number of the failing component,B,"The SCSI sense key indicates the general nature of a failure, such as a hardware error or an illegal request."
What is the primary method used by operating systems to prevent user processes from disrupting the system with illegal I/O instructions?,By allowing users direct access to all I/O instructions but monitoring their usage,"By making all I/O instructions privileged, meaning users must use the OS for I/O",By requiring all I/O requests to be signed digitally,By implementing a firewall directly on the device hardware,By eliminating all I/O instructions from the processor's instruction set,B,"All I/O instructions are privileged, meaning user processes cannot execute them directly and must instead make system calls to the OS to perform I/O."
"When a user program executes a system call for I/O, what is the role of the OS?",To allow the user program to directly access hardware registers,To immediately deny the request for security reasons,"To check the request validity, perform the I/O in monitor mode, and return to the user",To convert the I/O request into a network packet for remote execution,To log the request and forward it to another user process,C,"The OS (running in monitor mode) checks the validity of the I/O request, performs the operation, and then returns control to the user process."
How are memory-mapped I/O port locations protected from user access?,"They are not protected, allowing direct user access",Through the memory-protection system,By encrypting all data stored at these locations,By requiring a special password for each access,By physically disconnecting them from the CPU,B,Memory-mapped and I/O port memory locations are protected from unauthorized user access by the system's memory-protection mechanism.
Why might the kernel NOT deny all user access to memory-mapped I/O?,Because users need direct access for basic text processing,"Because some applications, like graphics games, require direct access to memory-mapped graphics memory for performance",Because it simplifies kernel development,Because memory-mapped I/O is inherently safe,Because all I/O must pass through the network interface,B,"The text mentions that 'Kernel cannot deny all user access (e.g., graphics games need direct access to memory-mapped graphics memory).'"
What is the primary purpose of in-kernel data structures in the I/O subsystem?,To store user application data,To manage the CPU's internal caches,To keep state information on I/O components and activities,To provide a graphical interface for I/O debugging,To define new programming languages,C,"The kernel maintains various in-kernel data structures to track state information for I/O components, network connections, device communications, and other I/O activities."
"How does UNIX encapsulate the differing `read()` semantics for various entities (user files, raw devices, process address spaces)?",By requiring each application to implement its own `read()` function for each entity type,By using a global `read()` function that takes entity type as a parameter,By using an object-oriented technique with dispatch tables in open-file records,By limiting `read()` operations to only one entity type,By converting all `read()` operations into `write()` operations,C,"UNIX uses an object-oriented technique where an open-file record contains a dispatch table with pointers to appropriate routines (like `read()`) based on the specific file type, encapsulating these differences."
"Which operating system model uses `message-passing` for I/O requests, converting requests into messages sent through the kernel?",UNIX-like systems,Embedded real-time operating systems,Windows (as an example given in text),Mainframe batch processing systems,Directly programmed microcontrollers,C,"The text mentions Windows as an example of an OS that uses message-passing for I/O, where requests are converted to messages and sent through the kernel."
What are the stated benefits of using message-passing for I/O compared to procedural techniques with shared data structures?,Higher performance due to less overhead,Simplifies I/O system structure/design and adds flexibility,Reduces memory footprint,Eliminates the need for device drivers,Guarantees real-time performance,B,"Despite potential overhead, message-passing for I/O simplifies system structure and design, and adds flexibility."
"Why is power management a significant concern for data centers, according to the text?",To ensure data integrity during power outages,"Due to high power costs, greenhouse gas emissions, and significant heat generation requiring costly cooling",To facilitate faster data transfer speeds,To prevent unauthorized access to server racks,To increase the overall processing power of the servers,B,"Data centers face significant challenges from high power costs, greenhouse gas emissions, and the substantial heat generated, which requires cooling that consumes twice as much electricity as powering the equipment."
"In cloud computing environments, what is a key role of the OS related to power management?",To continuously run all components at full power,To solely focus on maximizing individual CPU performance,"To adjust processing loads, evacuate user processes, and idle/power off systems",To manually switch power supplies,To ignore power consumption as it's handled by the cloud provider,C,"In cloud computing, the OS plays a role in power management by adjusting processing loads, evacuating user processes from systems, and idling or powering off systems when not needed."
What is the highest priority for power management in mobile computing?,Maximizing raw processing speed,Ensuring continuous network connectivity,Maximizing battery life,Reducing manufacturing costs,Supporting legacy applications,C,"For mobile computing, power management is a high priority to maximize battery life."
"Describe Android's ""power collapse"" feature.",A state where the phone is completely off and requires a manual restart,"A deep sleep state consuming marginally more power than off, responding to external stimuli, and allowing quick wake-up",A mode that triples the CPU clock speed for maximum performance,A diagnostic mode for detecting hardware failures,A feature that automatically uploads all user data to the cloud,B,"Power collapse is a deep sleep state in Android that uses marginally more power than being completely off, but allows the device to quickly wake up in response to external stimuli."
How does Android achieve its component-level power management?,By always keeping all components powered on to ensure readiness,By relying solely on external power sources,"By understanding component relationships (via a device tree) and tracking usage, turning off unused components",By requiring applications to explicitly power down hardware,By disabling all wireless communication when idle,C,"Android builds a device tree to understand component relationships and uses device drivers to track component usage. If a component is unused, it's turned off, and this propagates up the hierarchy to allow for deeper sleep states."
What is the purpose of `wakelocks` in Android power management?,To force the system into an immediate power collapse state,To allow applications to temporarily prevent the system from entering power collapse,To securely lock the device screen,To monitor battery temperature,To automatically turn off unused applications,B,"Wakelocks are a mechanism by which applications can temporarily prevent the kernel from allowing the system to enter a deep power collapse state, ensuring critical operations can complete."
"When is the device tree, representing physical-device topology, typically created in an Android system?",When an application requests it,At boot time by the firmware,Continuously updated by user input,Only when a new device is hot-plugged,It is hardcoded into the kernel,B,"The text states, 'Boot time: firmware analyzes hardware, creates device tree in RAM.'"
What is `ACPI` (Advanced Configuration and Power Interface)?,An application programming interface for graphics rendering,A network protocol for device discovery,An industry standard firmware that manages hardware aspects like power and device information,A database for storing user preferences,A software tool for virus detection,C,"ACPI is an industry standard firmware providing callable routines to the kernel for device state discovery, management, error handling, and power management."
How does the kernel interact with hardware components for power management using ACPI?,The kernel bypasses ACPI and directly controls hardware registers,"The kernel calls ACPI routines directly, which then interact with the device","The kernel calls device drivers, which in turn call ACPI routines to talk to the device",ACPI calls the kernel for power management decisions,Hardware components directly call ACPI routines without OS involvement,C,"The typical interaction flow is that the kernel calls device drivers, which then call ACPI routines, and these routines communicate with the actual device hardware."
Which of the following is NOT listed as a supervisory responsibility of the kernel I/O subsystem?,Management of name space for files/devices,Device-driver configuration and initialization,User interface design and visual rendering,Power management of I/O devices,Access control to files/devices,C,"User interface design and visual rendering are typically higher-level responsibilities of the operating system or desktop environment, not specifically the kernel I/O subsystem. All other options are explicitly listed."
How do upper levels of the I/O subsystem typically access devices?,By directly manipulating hardware registers,Via a uniform interface provided by device drivers,By sending messages directly over the network,By relying on user applications to manage device access,"Through a separate, dedicated processor",B,"The upper levels of the I/O subsystem access devices through a uniform interface provided by device drivers, abstracting away hardware specificities."
"Which example illustrates the ""Operation control"" responsibility of the I/O subsystem?",Allocating disk space for a new file,Granting a process exclusive access to a printer,Preventing a `seek()` operation on a modem,Buffering network data for a slow SSD,Handling a transient network error by retrying,C,"The text explicitly lists 'Operation control (e.g., modem cannot `seek()`)' as a responsibility."
What is the definition of a `device-status table`?,A table listing all network protocols,A kernel data structure tracking status and queues of operations for devices,A table detailing CPU performance metrics,A user-modifiable configuration file for I/O devices,A log of all user activities on the system,B,"As per the glossary, a device-status table is a 'Kernel data structure tracking status and queues of operations for devices.'"
"According to the glossary, what is a `buffer`?",A region of fast memory holding copies of data,A memory area storing data being transferred,A temporary file for spooling printer output,A software component that manages CPU scheduling,A hardware component that encrypts data,B,The glossary defines a buffer as a 'Memory area storing data being transferred.'
The glossary defines `double buffering` as:,Using two separate hard drives for data redundancy,Copying data twice or using two buffers to decouple producers/consumers,A technique to speed up single-threaded I/O,A method to compress data before transfer,Storing the same data in two different cache levels,B,The glossary defines double buffering as 'Copying data twice or using two buffers to decouple producers/consumers.'
"What does `copy semantics` refer to, based on the glossary?",The process of copying files between different file systems,"The meaning assigned to data copying (e.g., if data can be modified after write request)",The syntax rules for copying data using command-line tools,The act of backing up data to an external drive,A method to create duplicate processes,B,"The glossary defines copy semantics as the 'Meaning assigned to data copying (e.g., if data can be modified after write request).'"
What is the definition of a `cache` according to the provided text?,A buffer that holds exclusive data for a single process,A permanent storage device for critical system files,A temporary copy of data in fast memory to improve performance,A network component used for routing data,A mechanism for translating virtual addresses,C,The glossary defines a cache as a 'Temporary copy of data in fast memory to improve performance.'
How is a `spool` defined in the glossary?,A temporary network connection,A queue of processes waiting for CPU time,A buffer holding output for a device that cannot accept interleaved data streams,A hardware device for data encryption,A system call for memory allocation,C,The glossary defines a spool as a 'Buffer holding output for device that cannot accept interleaved data streams.'
"In the SCSI protocol, what is a `sense key`?",A cryptographic key for secure communication,Information in a status register indicating the general nature of an error,A unique identifier for a SCSI device,A command used to reformat a disk,A parameter for configuring SCSI bus speed,B,The glossary defines a sense key as 'SCSI protocol info in status register indicating error.'
What is the primary function of `ACPI` according to the glossary?,To manage network packet transmission,To control graphical display settings,Firmware managing hardware aspects such as power and device information,A file system for removable media,A debugger for device drivers,C,"The glossary defines ACPI as 'Firmware managing hardware aspects (power, device info).'"
"In the context of transforming I/O requests to hardware operations, how does an application primarily refer to data?",By a unique hardware address.,By a process ID.,By a file name.,By a memory-mapped register.,By a device driver's internal ID.,C,"Applications typically refer to data using logical file names, which are then translated by the operating system."
What is the primary role of the file system in connecting application requests to hardware for disk operations?,To directly send commands to the disk controller.,To manage network protocols for data transfer.,To map a file name through directories to space allocation on the disk.,To handle interrupt requests from hardware devices.,To perform kernel recompilation for new devices.,C,The file system is responsible for translating the logical file name into physical disk locations (space allocation).
"How does MS-DOS, particularly for FAT file systems, map a file name to disk blocks?",The file name directly indicates the sector address.,"The file name is mapped to an inode number, which contains allocation info.","The first part of the file name identifies the hardware device, then a table indicates blocks.","The name maps to a number, which indicates an entry in a file-access table, telling which disk blocks are allocated.",It uses a mount table to associate the name with a device.,D,"In MS-DOS with FAT, the file name maps to a numerical entry in a file-access table, which then points to the allocated disk blocks."
"In UNIX-like systems, what is the primary mechanism by which a file name is mapped to space allocation information?",The file name is directly translated into a physical disk address.,"It maps to a device number, which then leads to a port address.","The file name maps to an inode number, and the inode contains space-allocation information.",A global directory table directly lists disk block addresses for each file.,It uses a colon separator in the file name to identify the device and then the blocks.,C,"UNIX systems map file names to inode numbers, and the inode itself stores the space allocation details for the file."
What is the ultimate goal of the complex translation process from an application's file name request?,To recompile the kernel for specific hardware.,To associate extra functionality like spooling.,To connect the file name to the disk controller via a hardware port address or memory-mapped registers.,To place the process onto a wait queue.,To identify the correct device driver based on a major device number.,C,All the mapping and lookup stages aim to translate the logical file name into the physical addresses that the hardware controller understands to perform I/O.
"How does MS-DOS identify the hardware device within a file name for I/O requests, such as 'C:drive'?",By the entire file name as a unique device identifier.,Through an inode number associated with the device.,"The first part of the file name, before the colon, identifies the hardware device.",It uses a mount table to look up the device name.,The device is identified by its major and minor device numbers embedded in the file name.,C,"In MS-DOS, the part of the file name before the colon (e.g., 'C:') is used to identify the hardware device."
"In MS-DOS, what is 'C:' typically mapped to for I/O operations?",A unique inode number.,A specific process ID.,A network path.,A specific port address via a device table.,The root directory of the file system.,D,MS-DOS maps device identifiers like 'C:' to a specific port address using a device table.
"Which operating system typically maintains a separate name space for hardware devices from its regular file-system name space, often indicated by a colon separator?",UNIX,Linux,macOS,Windows NT,MS-DOS,E,"MS-DOS uses a colon separator (e.g., 'C:') to clearly separate the device name space from the file-system name space."
What advantage is cited for MS-DOS's approach of having a separate device name space?,It allows for faster file access.,It simplifies kernel recompilation.,It makes it easy to associate extra functionality like spooling for printer files.,It enables dynamic loading of device drivers.,It inherently supports multiple stages of lookup tables.,C,"The text states that MS-DOS's separate device name space makes it easy to associate extra functionality, such as spooling for printer files."
How does UNIX integrate device names into its file system structure?,It uses a dedicated partition for all device files.,Device names are incorporated into the regular file-system name space.,Each device has a unique network address.,Devices are identified by their hardware interrupt lines.,Device names are managed by a separate hardware abstraction layer outside the file system.,B,"UNIX incorporates device names directly into its regular file-system name space, often as special files in directories like /dev."
What data structure does UNIX use to associate path name prefixes with specific device names for I/O resolution?,An inode table.,A file-access table.,A device-control register.,A mount table.,An interrupt-vector table.,D,"UNIX uses a mount table to associate path name prefixes with specific device names, which are also part of the file-system name space."
"When resolving a path name in UNIX to find a device, what is the lookup process in the mount table?",It directly searches for the exact device name.,It looks up the shortest matching prefix.,It looks up the longest matching prefix.,It searches for an inode number first.,It queries the network for available devices.,C,UNIX resolves path names by looking up the longest matching prefix in the mount table.
What information does a mount table entry typically provide in UNIX when resolving a device name?,The physical disk block addresses.,The inode number of the device.,The device name (also in file-system name space).,The memory address of the I/O buffer cache.,The CPU core assigned to the device.,C,"A mount table entry provides the device name, which is itself integrated into the file-system name space."
"When a device name is looked up in UNIX, what is typically found instead of an inode number?",A process ID.,A major and minor device number.,A port address.,A memory-mapped register address.,A network interface card (NIC) MAC address.,B,"Lookup of a device name in UNIX results in finding a <major, minor> device number pair, not an inode."
What is the primary purpose of the 'major device number' in UNIX?,To index into the device table for port addresses.,To identify the specific instance of a device.,To identify the device driver responsible for handling I/O.,To specify the size of the kernel buffer.,To indicate whether a device supports DMA.,C,The major device number is used to identify which device driver is responsible for managing I/O operations for that type of device.
What is the function of the 'minor device number' in UNIX?,"It identifies the type of device (e.g., disk, printer).",It is passed to the device driver to index into a device table for specific device instances.,It indicates the priority of I/O requests.,It determines the interrupt line for the device.,"It specifies the file system type (e.g., ext4, XFS).",B,"The minor device number is passed to the device driver, allowing it to differentiate between multiple instances of the same type of device by indexing into a device-specific table."
What information is provided by a device-table entry when performing I/O?,The file's creation date.,The CPU utilization of the device.,The port address or memory-mapped address of the device controller.,The current I/O queue length.,The type of file system used on the device.,C,The device-table entry ultimately provides the physical address (port or memory-mapped) used to communicate directly with the device controller.
Which characteristic applies to modern operating systems in terms of how they handle device naming and lookup?,They primarily rely on direct hardware addressing.,"They use a single, flat lookup table for all devices.",They feature multiple stages of lookup tables for flexibility.,They require kernel recompilation for every new device.,They hardcode device drivers into the kernel at compile time.,C,"Modern operating systems are designed with flexibility, often employing multiple stages of lookup tables to manage devices."
A key advantage of the general mechanisms for passing requests between applications and drivers in modern OS is:,Reduced memory footprint for drivers.,Elimination of the need for device controllers.,The ability to introduce new devices and drivers without kernel recompilation.,Simplification of the boot process.,Direct access to hardware from user space applications.,C,The general nature of these mechanisms means that new devices and their drivers can be integrated into the system without requiring the kernel to be recompiled.
How do some operating systems manage the loading of device drivers to enhance flexibility?,They require all drivers to be statically linked into the kernel at compile time.,They load device drivers only during the initial system installation.,They load device drivers on demand.,They store drivers exclusively in ROM.,They always require manual intervention to load drivers.,C,"To improve flexibility and resource utilization, some operating systems load device drivers only when they are needed (on demand)."
What happens regarding device drivers during system boot time in some operating systems?,All possible device drivers are loaded regardless of connected hardware.,"The system probes buses and loads necessary drivers, either immediately or on first request.",Drivers are only loaded after a user logs in.,The boot loader loads drivers directly from the network.,"Only essential CPU drivers are loaded, peripheral drivers are never loaded at boot.",B,"At boot time, the system typically probes the buses to detect connected hardware and loads the corresponding drivers, either immediately or when the device is first accessed."
"How does the kernel typically handle the loading of drivers for devices added to the system after boot time (e.g., hot-plugged devices)?",It ignores them until the next system reboot.,It requires manual loading by a system administrator.,"The device is detected by an error, then the kernel inspects and loads the driver dynamically.",It always requires kernel recompilation.,It sends a network request to download the driver.,C,"For devices added after boot, the system often detects them (sometimes initially by an error event), and the kernel then inspects the device and dynamically loads the appropriate driver."
What is a consequence of dynamic loading and unloading of device drivers?,It simplifies kernel algorithms.,It eliminates the need for interrupt handling.,"It introduces more complex kernel algorithms, device-structure locking, and error handling.",It makes the system less stable.,It removes the need for hardware-specific registers.,C,"While offering flexibility, dynamic loading and unloading of drivers add significant complexity to the kernel, requiring sophisticated algorithms for resource management, locking, and robust error handling."
What is the very first step a process takes when initiating a blocking read request for an opened file?,Allocating kernel buffer space.,Checking the buffer cache for data.,Issuing a `read()` system call to a file descriptor.,Being removed from the run queue.,Sending commands to the device controller.,C,The life cycle begins with the application process issuing a `read()` system call to request data from an opened file.
"During a blocking read request, what happens immediately if the requested data is found in the buffer cache?",The process is placed on a wait queue.,Physical I/O is performed.,"The data is returned to the process, and the I/O operation is completed without further steps.",The device driver is signaled.,An interrupt is generated by the DMA controller.,C,"If data is found in the buffer cache, it's a cache hit, and the data is immediately returned, completing the I/O without needing physical device access."
"If physical I/O is required for a blocking read request, what happens to the requesting process in the operating system?",It continues to execute on the run queue.,It is immediately terminated.,It is moved from the run queue and placed on a wait queue for the device.,It signals the device driver directly.,It allocates additional memory for the request.,C,"When physical I/O is necessary, the process cannot continue until the I/O is complete, so it is removed from the run queue and placed on a wait queue associated with the device."
How does the I/O subsystem send an I/O request to the device driver?,By directly writing to the device's hardware registers.,Through a network socket connection.,As a subroutine call or an in-kernel message.,By generating a hardware interrupt.,By modifying the process's page table entries.,C,The I/O subsystem typically communicates with the device driver using either a direct subroutine call within the kernel or by sending an in-kernel message.
What is a primary action taken by the device driver after receiving an I/O request from the kernel I/O subsystem?,It immediately unblocks the requesting process.,It allocates kernel buffer space and schedules the I/O.,It sends the data directly to the application's address space.,It waits for an interrupt before any further action.,It recompiles the kernel for the specific device.,B,"Upon receiving the request, the device driver's first tasks include allocating buffer space in the kernel and scheduling the actual I/O operation."
How does the device driver communicate commands to the device controller?,By sending messages over a network.,By shouting commands through the speaker.,By writing directly to device-control registers.,By issuing another system call.,By sending a signal to the kernel I/O subsystem.,C,Device drivers interact with hardware controllers by writing specific values to their memory-mapped or port-mapped control registers.
"After initiating a data transfer with the device controller, what are two common methods a device driver might employ to determine status or obtain data?",Sending data to the buffer cache or terminating the process.,Polling for status or setting up a DMA transfer.,Signaling the kernel I/O subsystem or modifying the file system.,Moving the process to the ready queue or the wait queue.,Checking inode numbers or accessing mount tables.,B,"Device drivers either continuously poll the device for status updates or configure a DMA transfer, which then generates an interrupt upon completion."
What component is responsible for generating an interrupt upon the completion of a DMA transfer?,The CPU.,The device driver.,The DMA controller.,The kernel I/O subsystem.,The application process.,C,"The Direct Memory Access (DMA) controller, once configured, handles the data transfer independently and signals its completion by generating an interrupt."
How does the operating system locate the correct interrupt handler after an interrupt is generated by a device?,By querying the device driver directly.,Through a binary search of all available handlers.,Via the interrupt-vector table.,By guessing based on the interrupt frequency.,The device sends the handler's address along with the interrupt.,C,The interrupt-vector table is a data structure that maps interrupt numbers to the addresses of their corresponding interrupt service routines (handlers).
"After the interrupt handler receives an interrupt and stores the data, what is its next action related to the I/O request life cycle?",It immediately transfers data to the process's address space.,It signals the device driver.,It moves the process from the wait queue to the ready queue.,It issues a new read system call.,It unblocks the process directly.,B,"Once the interrupt handler has dealt with the immediate hardware interaction (like storing data), it signals the device driver that the I/O completion event has occurred."
"Once the device driver determines the I/O request is completed and its status, whom does it signal?",The application process directly.,The CPU scheduler.,The kernel I/O subsystem.,Another device controller.,The boot loader.,C,The device driver reports the completion and status of the I/O operation back to the kernel I/O subsystem for further processing.
What two key actions does the kernel perform after receiving the I/O completion signal from the device driver?,It terminates the process and reboots the system.,It allocates more kernel buffer space and sends commands to the controller.,It transfers data/return codes to the requesting process's address space and moves the process from the wait queue to the ready queue.,It signals the interrupt handler and sets up DMA.,It issues a new system call and probes buses.,C,"Upon I/O completion notification, the kernel transfers the results to the application's memory and unblocks the process by moving it from the wait queue to the ready queue."
What is the immediate effect of moving a process from the wait queue to the ready queue following I/O completion?,The process immediately starts executing.,The process is terminated.,"It unblocks the process, making it eligible for CPU assignment by the scheduler.",It triggers another I/O request.,It deletes the associated file descriptor.,C,"Moving the process to the ready queue signifies that it is no longer waiting for I/O and can now compete for CPU time, effectively unblocking it."
"According to the glossary, what is a 'mount table'?",A physical table in the CPU for memory management.,"An in-memory data structure with information about each mounted volume, tracking file systems and access.",A database on disk storing all file names and their corresponding block addresses.,A hardware component that translates logical addresses to physical addresses.,A list of all device drivers loaded at boot time.,B,"The glossary defines a mount table as an 'In-memory data structure with info about each mounted volume, tracks file systems and access.'"
Which operating system release introduced the STREAMS mechanism?,Linux Kernel 2.0,macOS X,UNIX System V,Windows NT 3.1,BSD 4.4,C,"The text explicitly states that ""UNIX System V (and subsequent releases) has STREAMS mechanism."""
What is the primary function enabled by the STREAMS mechanism in UNIX systems?,Centralized memory management,Dynamic assembly of driver code pipelines,Real-time process scheduling,High-performance graphics rendering,Distributed file system management,B,"The STREAMS mechanism ""Enables dynamic assembly of driver code pipelines."""
"In the context of the STREAMS mechanism, what best describes a 'Stream'?",A one-way data channel for inter-process communication,A shared memory segment for device configuration,A full-duplex connection between a device driver and a user-level process,A network protocol for remote device access,A file descriptor for direct hardware manipulation,C,"A Stream is defined as a ""full-duplex connection between device driver and user-level process."""
Which of the following are the primary components that make up a STREAMS connection?,"Kernel threads, user processes, and shared memory","Stream head, driver end, and zero or more stream modules","Input buffers, output buffers, and a control unit","Network interface card, CPU, and RAM","File system, device manager, and scheduler",B,"The components of a Stream are listed as ""Stream head"", ""Driver end"", and ""Zero or more stream modules."""
What is the role of the 'stream head' component in a STREAMS connection?,It controls the physical device hardware,It buffers data for network transmission,It provides the interface with the user process,It manages inter-module communication,It performs error checking on data streams,C,"The ""Stream head"" is described as the component that ""interfaces with user process."""
What is the primary responsibility of the 'driver end' component in a STREAMS connection?,To manage user process privileges,To provide flow control for all modules,To control the device,To translate data formats for applications,To dynamically load and unload modules,C,"The ""Driver end"" is the component that ""controls the device."""
"What common structural element do the stream head, driver end, and stream modules each possess?",A dedicated CPU core,A single global buffer,"A pair of queues (read queue, write queue)",A direct memory access (DMA) controller,A cryptographic encryption unit,C,"The text states: ""Each component: pair of queues (read queue, write queue)."""
How is data primarily transferred between components within a STREAMS connection?,Direct memory access (DMA),Shared memory segments,Message passing between queues,Remote procedure calls (RPC),File system operations,C,"Data transfer within STREAMS occurs through ""message passing between queues."""
What is the primary purpose of 'stream modules' in the STREAMS architecture?,To define the communication protocol for user processes,To provide STREAMS processing functionality,To serve as the physical interface to hardware devices,To manage kernel-level security policies,To allocate memory for all stream operations,B,"The text indicates that ""Modules provide STREAMS processing functionality."""
Which system call is used to add or 'push' modules onto a stream?,`fork()`,`exec()`,`ioctl()`,`open()`,`pipe()`,C,"Modules are ""pushed onto a stream using `ioctl()` system call."""
"Within a stream, where does message exchange primarily occur between modules?",Directly between the stream head and the driver end,Via a centralized kernel buffer,Between queues in adjacent modules,Through a shared memory region accessible by all modules,Only at the user process level,C,"Message exchange happens ""between queues in adjacent modules."""
What is the main objective of 'flow control' in the context of STREAMS?,To prioritize critical messages,To prevent queue overflow,To ensure data encryption,To dynamically adjust network bandwidth,To compress data before transmission,B,"Flow control is supported ""To prevent queue overflow."""
How does a queue behave if it does *not* support flow control?,It buffers messages indefinitely,It drops all incoming messages,It accepts all messages and immediately sends them to the adjacent queue without buffering,It signals the sender to slow down,It encrypts messages before passing them on,C,"The text states: ""Without flow control: queue accepts all messages, immediately sends to adjacent queue without buffering."""
"When a queue *does* support flow control, how does it manage incoming messages?",It rejects all messages regardless of buffer space,It buffers messages and does not accept new messages without sufficient buffer space,It forwards messages without any buffering,It immediately discards messages if the next queue is busy,It resends messages multiple times until accepted,B,"The text explains: ""With flow control: buffers messages, does not accept messages without sufficient buffer space."""
Which system call allows a user process to write *raw data* to a stream?,`getmsg()`,`read()`,`connect()`,`write()`,`sendto()`,D,"The text indicates that ""`write()`: writes raw data to stream."""
Which system call enables a user process to specify and send a *message* to a stream?,`read()`,`poll()`,`putmsg()`,`open()`,`recvfrom()`,C,"The text states that ""`putmsg()`: allows user to specify a message."""
"When a user process writes data to a device via STREAMS, what is the first action taken by the stream head?",It immediately sends the data to the driver end,It copies the data into a message and delivers it to the next module's queue,It blocks the user process until the device is ready,It requests a checksum verification from the user process,It allocates new memory pages for the entire stream,B,"The ""Stream head copies data into message, delivers to next module's queue."""
"When a user process uses the `read()` system call to retrieve data from a stream head, how is the data typically returned?",As a structured message with control information,As an array of network packets,As ordinary data (unstructured byte stream),As a compressed archive,As an encrypted blob,C,"The text specifies that ""`read()`: stream head gets message, returns ordinary data (unstructured byte stream)."""
Which system call allows a user process to receive a *message* (with potential message boundaries and control info) directly from a stream?,`read()`,`select()`,`getmsg()`,`recv()`,`splice()`,C,"The text notes that with ""`getmsg()`: message returned to process."""
What is the general nature of STREAMS I/O operations concerning blocking behavior?,Always synchronous,Always blocking,Asynchronous (or nonblocking) except when communicating with the stream head,Fully asynchronous with no blocking,Dependent on kernel scheduling algorithms,C,"The text states: ""STREAMS I/O is asynchronous (or nonblocking) except when communicating with stream head."""
Under what specific condition will a user process block when attempting to write data to a stream?,If the device is powered off,If the next queue in the stream uses flow control and has no room to copy the message,If the user process does not have root privileges,If there are no modules pushed onto the stream,If the stream head is currently reading data,B,"The text mentions: ""Writing to stream: user process blocks (if next queue uses flow control) until room to copy message."""
When does a user process block while trying to read data from a stream?,If the stream head is busy writing data,If the device is in an error state,Until data is available from the stream head,If too many modules are present in the stream,If the process has exceeded its I/O quota,C,"The text specifies: ""Reading from stream: user process blocks until data available."""
"Unlike the stream head, what is a key requirement for the driver end regarding incoming data?",It may block if its queue is full,It must always handle all incoming data,It must prioritize data from system processes,It can discard data without notification,It must reformat all data into unstructured byte streams,B,"The text highlights: ""Unlike stream head (may block), driver end must handle all incoming data."""
Is it mandatory for drivers implementing the STREAMS mechanism to support flow control?,"No, it's optional and rarely implemented","Yes, drivers must support flow control",Only for network drivers,Only if the device explicitly requests it,It depends on the operating system version,B,"The text explicitly states: ""Drivers must support flow control."""
What typically happens if a device's buffer becomes full when receiving data via a STREAMS connection?,The device halts all operations,The device requests the user process to pause,The device typically drops incoming messages,The device spills data over to main memory,The device automatically expands its buffer size,C,"The text provides an example: ""If device buffer full: device typically drops incoming messages (e.g., network card)."""
What is a significant benefit provided by the STREAMS architecture?,It simplifies the development of graphical user interfaces,"It offers a framework for modular, incremental device drivers and network protocols",It provides direct access to kernel memory,It reduces the need for system calls,It enables cross-platform application compatibility,B,"A key ""Benefit of STREAMS: framework for modular, incremental device drivers and network protocols."""
What characteristic of STREAMS modules enhances their reusability?,They are compiled with device-specific hardware addresses,They can only be used with a single type of device,They are reusable by different streams/devices,They require recompilation for each new stream,They are tightly coupled to the stream head,C,"The text states: ""Modules reusable by different streams/devices (e.g., networking module for Ethernet and 802.11 wireless)."""
"What type of data representation does STREAMS support between modules, beyond just an unstructured byte stream?",Only raw binary data,Message boundaries and control information,Encrypted packets exclusively,SQL query results,Image and video frames,B,"STREAMS ""Supports message boundaries and control info between modules (not just unstructured byte stream)."""
How widely adopted is the STREAMS mechanism across UNIX variants?,It is deprecated and rarely used,Only in legacy systems like System V,Most UNIX variants support STREAMS,It is exclusive to embedded systems,It is only found in academic research kernels,C,"The text confirms: ""Most UNIX variants support STREAMS."""
For what kind of system components is STREAMS typically preferred in UNIX variants?,File system journaling,Memory management units,Protocols and device drivers,Process scheduling algorithms,User interface rendering,C,"STREAMS is ""preferred for protocols/device drivers."""
Which operating systems are specifically mentioned as implementing their socket mechanism using STREAMS?,Windows and Linux,FreeBSD and OpenBSD,System V UNIX and Solaris,macOS and iOS,Android and ChromeOS,C,"The text gives the example: ""System V UNIX and Solaris implement socket mechanism using STREAMS."""
"According to the provided glossary, what is the definition of 'STREAMS'?",A method to pause a sender of I/O,A UNIX I/O feature allowing dynamic assembly of driver code pipelines,The interface between STREAMS and user processes,Modules of functionality loadable into a STREAM,The interface between STREAMS and the controlled device,B,"The glossary defines STREAMS as ""UNIX I/O feature allowing dynamic assembly of driver code pipelines."""
"In the glossary, how is 'stream head' defined?",A method to limit data flow rate,Modules of functionality loadable into a STREAM,Interface between STREAMS and user processes,Interface between STREAMS and the controlled device,A full-duplex connection component,C,"The glossary defines stream head as ""Interface between STREAMS and user processes."""
"Based on the glossary, what is the definition of 'driver end'?",A UNIX I/O feature for dynamic pipelines,Modules providing STREAMS processing functionality,Interface between STREAMS and user processes,Interface between STREAMS and the controlled device,A component that buffers messages,D,"The glossary defines driver end as ""Interface between STREAMS and the controlled device."""
How are 'stream modules' defined in the provided glossary?,A method to pause an I/O sender,The component that manages device interrupts,Modules of functionality loadable into a STREAM,The primary interface to user applications,The mechanism for asynchronous I/O,C,"The glossary defines stream modules as ""Modules of functionality loadable into a STREAM."""
"According to the glossary, what is 'flow control'?",A method to pause a sender of I/O; limits data flow rate,The process of copying data into messages,The exchange of control messages between kernel and user space,The ability to dynamically load device drivers,The process of routing messages through a stream,A,"The glossary defines flow control as ""Method to pause a sender of I/O; limits data flow rate."""
"According to the text, what is identified as a major factor in overall system performance?",CPU clock speed,Memory bandwidth,I/O operations,Network latency,Disk storage capacity,C,The text explicitly states: 'I/O: major factor in system performance.'
Which of the following activities places heavy demands on the CPU during I/O operations?,Optimizing compiler output,Executing device-driver code and scheduling processes,Performing speculative execution,Managing virtual memory paging,Running anti-virus scans,B,"The text states that heavy demands are placed on the CPU to 'execute device-driver code, schedule processes (block/unblock).'"
"What specifically do context switches stress, according to the provided text?",Network adapters and routers,Hard disk drive platters,CPU and hardware caches,Memory RAM modules,Power supply units,C,The text indicates that 'Context switches: stress CPU and hardware caches.'
Heavy demands on I/O can expose inefficiencies in which specific kernel mechanism?,Memory management unit,File system journaling,Process scheduling algorithms,Kernel's interrupt-handling mechanisms,Network protocol stack,D,The text states that heavy I/O demands 'Exposes inefficiencies in kernel's interrupt-handling mechanisms.'
What causes the memory bus to be heavily loaded during I/O operations?,Excessive CPU clock cycles,Data copies between controllers/physical memory and kernel buffers/application space,Concurrent execution of multiple threads,Graphical rendering operations,Virtual memory swap file usage,B,"The text explains that I/O 'Loads memory bus: data copies between controllers/physical memory, and kernel buffers/application space.'"
What is identified as a major concern for computer architects regarding system performance?,Minimizing power consumption in idle states,Maximizing single-core processor speed,Graceful coping with I/O demands,Designing ergonomic computer cases,Developing new programming languages,C,The text states: 'Graceful coping with demands: major concern for computer architects.'
Why is interrupt handling considered relatively expensive?,It requires specialized hardware co-processors.,"It involves state change, execution of a handler, and state restoration.",It consumes large amounts of disk space.,"It typically runs in user space, increasing overhead.",It necessitates frequent reboots of the system.,B,"The text explains interrupt handling is expensive due to 'state change, execute handler, restore state.'"
Under what specific condition can Programmed I/O (PIO) be more efficient than interrupt-driven I/O?,When direct memory access (DMA) is fully utilized,If busy waiting is minimized,Only in real-time operating systems,When the CPU is entirely idle,If all I/O devices support asynchronous operations,B,The text states: 'Programmed I/O (PIO) can be more efficient than interrupt-driven I/O if busy waiting minimized.'
What overhead does the completion of an I/O operation lead to when it unblocks a process?,Increased memory paging,Disk defragmentation,Full context switch overhead,Network bandwidth saturation,CPU cache flushing,C,The text mentions: 'I/O completion unblocks process: leads to full context switch overhead.'
Which type of system activity is specifically noted for causing a high context-switch rate?,Running CPU-bound mathematical computations,Executing large file copies locally,Network traffic,Compiling source code,Decompressing archives,C,The text states: 'Network traffic: high context-switch rate.'
"In the remote login example, what is the very first event that occurs on the local machine when a character is typed?",A network I/O system call is issued.,The character is sent to the network device driver.,A keyboard interrupt is generated.,The user process directly receives the character.,The network layers begin packet construction.,C,The sequence described starts with: 'character typed → keyboard interrupt'.
"Following a keyboard interrupt on the local machine during a remote login, what is the correct sequence of components the character passes through before reaching the user process?",Device driver → Interrupt handler → Kernel,Interrupt handler → Device driver → Kernel,Kernel → Interrupt handler → Device driver,Device driver → Kernel → Interrupt handler,Interrupt handler → Kernel → Device driver,B,The text describes the path as: 'keyboard interrupt → interrupt handler → device driver → kernel → user process'.
"After the character reaches the user process on the local machine in a remote login, what is the next step initiated by the user process for network communication?",It directly transfers the character to the network controller.,It waits for an interrupt from the remote system.,It issues a network I/O system call.,It unpacks the character from network protocols.,It generates a keyboard interrupt.,C,The text states: 'User process issues network I/O system call'.
"In the remote login process, which component is responsible for packet construction after a network I/O system call is issued by the user process?",The local kernel,The network device driver,The network layers,The remote system's network hardware,The keyboard interrupt handler,C,The text outlines the path: 'local kernel → network layers (packet construction)'.
"After the network device driver transfers the packet to the controller in the remote login process, what subsequent actions occur?",The system call immediately completes.,The character is unpacked from protocols.,"The packet is sent, and an interrupt is generated.",The network daemon identifies the session.,The remote system echoes the character.,C,"The text specifies: 'Network device driver transfers packet to controller → sends character, generates interrupt.'"
What event signals the completion of the network I/O system call in the remote login process on the local machine?,The user process terminating.,An interrupt coming back up through the kernel.,The character being echoed by the remote system.,The local machine's network hardware receiving an acknowledgment.,The network device driver restarting.,B,The text states: 'Interrupt back up through kernel → network I/O system call completes.'
What is the initial event that occurs on the remote system upon receiving a packet in the remote login example?,The character is immediately unpacked.,An interrupt is generated.,The network daemon identifies the session.,The packet is passed to a subdaemon.,The character is echoed back to the sender.,B,The text states: 'Remote system: network hardware receives packet → interrupt generated.'
"On the remote system, after the character is unpacked from protocols, to which component is it passed?",The kernel's interrupt handler,The appropriate network daemon,The user process,The device driver,The memory bus,B,The text indicates: 'Character unpacked from protocols → appropriate network daemon.'
"After receiving the unpacked character, what is the primary action of the network daemon on the remote system in the remote login process?",It directly sends the character back to the local machine.,It constructs a new network packet.,It identifies the session and passes the packet to a subdaemon.,It generates another interrupt.,It stores the character in a temporary buffer.,C,The text describes: 'Network daemon identifies session → passes packet to subdaemon.'
What types of system overheads are frequently observed throughout the entire remote login process described?,Disk thrashing and page faults,CPU starvation and memory leaks,Context switches and state switches,Network latency and bandwidth contention,Power spikes and thermal throttling,C,The text explicitly states: 'Throughout: context switches and state switches.'
What action in the remote login process is specifically mentioned as doubling the work?,Packet retransmission due to errors,The initial keyboard interrupt generation,The receiver echoing the character,The local kernel processing the system call,The network device driver transferring the packet,C,The text notes: 'Receiver echoes character: doubles work.'
Some systems use separate 'front-end processors' for terminal I/O. What is their primary purpose in this context?,To accelerate graphical rendering,To reduce the main CPU's interrupt burden,To manage complex database queries,To perform cryptographic calculations,To act as a backup power supply,B,The text states: 'Some systems use separate front-end processors for terminal I/O to reduce main CPU interrupt burden.'
What is the function of a 'terminal concentrator'?,It converts analog signals to digital ones.,It encrypts data transmissions for security.,It multiplexes traffic from hundreds of remote terminals into one port.,It provides power over Ethernet to connected devices.,It isolates network segments for improved privacy.,C,The glossary defines 'terminal concentrator' as a device that 'multiplexes traffic from hundreds of remote terminals into one port.'
What is an 'I/O channel' in the context of mainframes and high-end systems?,A physical data cable connecting two systems.,"A dedicated, special-purpose CPU for I/O or offloading the main CPU.",A software interface for network communication.,A component responsible for managing printer queues.,A shared memory region for inter-process communication.,B,"The glossary defines 'I/O channel' as a 'dedicated, special-purpose CPU in large systems for I/O or offloading main CPU.'"
What are the primary jobs of an I/O channel in a computing system?,To perform CPU-intensive computations and run user applications.,To manage system security and user authentication.,To offload I/O work from the main CPU and keep data flowing smoothly.,To monitor network traffic and detect intrusions.,To execute operating system kernel functions exclusively.,C,"The text specifies the 'Channel job: offload I/O work from main CPU, keep data flowing smoothly.'"
How do I/O channels differ from simpler I/O mechanisms in terms of program processing capability?,"They can only process simple, pre-defined commands.",They are limited to handling only keyboard and mouse inputs.,"They process more general/sophisticated programs, tuned for workloads.",They require direct intervention from the main CPU for every instruction.,They are designed to handle only network protocols.,C,"The text states: 'Channels process more general/sophisticated programs, tuned for workloads.'"
Which of the following is listed as a principle to improve I/O efficiency?,Increase the number of context switches.,Increase data copies in memory.,Reduce interrupt frequency.,Decrease concurrency.,Keep processing primitives in software.,C,One of the principles to improve I/O efficiency listed is 'Reduce interrupt frequency'.
"To improve I/O efficiency, what type of data movement in memory should be reduced?",Data copies between the device and application.,Data transfers within the CPU registers.,Data written to the CPU's L1 cache.,Data sent to the display adapter.,Data moved to the swap file.,A,One principle for I/O efficiency is to 'Reduce data copies in memory (between device/application).'
How can interrupt frequency be reduced to improve I/O efficiency?,By increasing the frequency of small data transfers.,"By utilizing simple, unintelligent controllers.",By always using interrupt-driven I/O exclusively.,"By using large transfers, smart controllers, or polling (if busy waiting minimal).",By offloading all I/O processing to the main CPU.,D,"The text suggests to 'Reduce interrupt frequency: use large transfers, smart controllers, polling (if busy waiting minimal).'"
"For improved I/O efficiency, under what specific condition can polling be an effective method to reduce interrupt frequency?",When the CPU is heavily loaded.,If busy waiting is minimized.,Only when direct memory access is disabled.,When network traffic is extremely high.,If the system uses a single-core processor.,B,The text mentions polling as a way to reduce interrupt frequency 'if busy waiting minimal'.
"How can concurrency be increased for I/O efficiency, according to the text?",By dedicating the main CPU solely to data copying.,By using DMA-knowledgeable controllers/channels to offload data copying from CPU.,By forcing all I/O operations to be synchronous.,By reducing the number of available I/O devices.,By disabling interrupt coalescing.,B,To 'Increase concurrency' one should 'use DMA-knowledgeable controllers/channels to offload data copying from CPU.'
"To achieve concurrent operation with the CPU and bus, what processing primitives should be moved into hardware?",Operating system schedulers,Application-level error handling routines,I/O processing primitives,User interface rendering logic,Network routing tables,C,The text suggests to 'Move processing primitives into hardware: concurrent operation with CPU/bus.'
"What is crucial for overall system performance regarding CPU, memory subsystem, bus, and I/O performance?",Maximizing the performance of only the fastest component.,"Balancing their performance, as overload in one area causes idleness in others.",Minimizing the usage of all components to save power.,Configuring them to operate entirely independently.,Prioritizing CPU performance above all else.,B,"The text emphasizes: 'Balance CPU, memory subsystem, bus, I/O performance: overload in one area causes idleness in others.'"
Which of the following pairs correctly exemplifies the varying complexity of I/O devices as mentioned in the text?,Printer (simple) vs. Mouse (complex),Keyboard (complex) vs. USB drive (simple),Mouse (simple) vs. Windows disk driver (complex),Scanner (complex) vs. Webcam (simple),Speaker (simple) vs. Microphone (complex),C,"The text explicitly uses 'mouse simple, Windows disk driver complex' as examples."
"Which of these is NOT a functionality managed by a Windows disk driver, according to the text?",Managing individual disks,Implementing RAID arrays,Converting requests to disk I/O,Executing user applications,Performing error handling and data recovery,D,"The text lists managing individual disks, implementing RAID, converting requests, error handling, data recovery, and optimizing performance as functionalities of a Windows disk driver, but not executing user applications."
What are the three main locations where I/O functionality can be implemented?,"Cloud servers, virtual machines, bare metal.","Device hardware, device driver, application software.","CPU, GPU, network card.","Input, processing, output units.","BIOS, operating system, user applications.",B,"The text asks: 'Where to implement I/O functionality: device hardware, device driver, or application software?'"
Where were experimental I/O algorithms initially implemented due to their flexibility and lower risk of system crashes?,Directly in the device hardware,Within the operating system kernel,At the application level,In a specialized I/O channel,As firmware on the I/O controller,C,The text states: 'Initially: experimental I/O algorithms at application level.'
What is an advantage of implementing I/O algorithms at the application level?,Highest possible performance due to direct hardware access.,No need to reboot/reload drivers after code changes.,Access to internal kernel data and functionality.,Guaranteed data integrity across system restarts.,Automatic optimization by the operating system.,B,An advantage listed for application-level implementation is: 'No reboot/reload drivers after code changes.'
Which of the following is a disadvantage of implementing I/O algorithms at the application level?,They are more challenging to debug.,They can easily crash the entire system.,They require specialized hardware.,They are inefficient due to context switch overhead.,They increase development time significantly.,D,"The text identifies a disadvantage as: 'Inefficient: context switch overhead, no internal kernel data/functionality (messaging, threading, locking).'"
"What is cited as an example of a system interface that allows user-mode file systems, demonstrating application-level I/O functionality?",PCI Express (PCIe),Direct Memory Access (DMA),FUSE system interface,Advanced Host Controller Interface (AHCI),Network File System (NFS),C,The text provides 'FUSE system interface' as an example of user-mode file systems.
"Once I/O algorithms are proven stable and effective at the application level, where are they typically reimplemented to improve performance?",In cloud-based services,Directly into dedicated hardware chips,Into the operating system kernel,As part of a virtual machine monitor,Within the CPU's microcode,C,The text states: 'When proven: reimplement in kernel.' for improved performance.
What is a key benefit of reimplementing I/O functionality in the kernel?,It becomes easier to debug.,It significantly improves performance.,It removes the need for context switches.,It makes the system entirely crash-proof.,It simplifies hardware interactions.,B,A stated benefit of kernel-level implementation is that it 'Improves performance.'
Why is development for kernel-level I/O considered more challenging?,It requires less complex programming languages.,The kernel is typically large and complex.,Debugging tools are more advanced.,It allows for greater flexibility in I/O ordering.,It can be deployed without system reboots.,B,"The text notes: 'More challenging development (large, complex kernel).'"
Why is thorough debugging crucial for I/O functionality implemented in the kernel?,To ensure compatibility with legacy hardware.,To prevent data corruption and system crashes.,To optimize network latency for web applications.,To reduce the physical size of the kernel.,To increase the aesthetic appeal of the operating system.,B,"The text highlights the need to 'Must be thoroughly debugged (avoid data corruption, system crashes).'"
Where does I/O functionality achieve the highest performance?,Application-level software,Cloud-based virtual machines,Specialized implementation in hardware (device or controller),Kernel-level device drivers,Firmware embedded in the CPU,C,The text states: 'Highest performance: specialized implementation in hardware (device or controller).'
What is a disadvantage of implementing I/O functionality directly in hardware?,It offers superior flexibility for customization.,It significantly reduces development time.,It is difficult and expensive to improve or fix bugs.,It requires frequent software updates.,It increases context switch overhead.,C,Disadvantages listed for hardware implementation include: 'difficulty/expense of improvements/bug fixes.'
How does hardware-level I/O implementation affect development time compared to software implementations?,It significantly reduces development time to days.,It has no impact on development time.,"It leads to increased development time, often months instead of days.","It allows for continuous, real-time code changes.",It requires only a single developer.,C,The text states 'Increased development time (months vs. days)' as a disadvantage of hardware implementation.
"What is a consequence of implementing I/O functionality at the hardware level, as exemplified by a hardware RAID controller?",Increased flexibility for the kernel to influence I/O order.,Decreased flexibility for the kernel to influence I/O order/location.,Elimination of all interrupt handling overhead.,Automatic detection and correction of all software bugs.,Lower cost for improvements and bug fixes.,B,"A consequence is 'Decreased flexibility (e.g., hardware RAID controller may not allow kernel to influence I/O order/location).'"
"What trend is observed regarding the speed of I/O devices, particularly NVM devices?",They are becoming slower to conserve power.,They are reaching the speeds of traditional HDDs.,"They are increasing in speed, with NVM devices nearing DRAM speed.",Their speed is becoming irrelevant to overall system performance.,They are limited by the speed of the CPU clock.,C,The text notes: 'I/O devices increasing in speed (NVM devices nearing DRAM speed).'
The increasing speed of I/O devices places greater pressure on which components or aspects of a system?,Only on the CPU's processing power.,On I/O subsystems and OS algorithms to leverage read/write speeds.,On the amount of physical memory installed.,On the monitor's refresh rate.,On the power supply's wattage output.,B,Increasing device speed 'Increases pressure on I/O subsystems and OS algorithms to leverage read/write speeds.'
Which of the following components are listed as important for I/O performance related to storage and network latency?,"Printers, scanners, microphones.","CPU, caches, DRAM, NVM, PCIe, SSD, SAA, HDD.","User interface, graphic drivers, audio codecs.","Web browsers, office suites, video players.","Keyboards, mice, joysticks.",B,"The text lists: 'CPU, caches, DRAM, NVM, PCIe, SSD, SAA, HDD' as important for I/O performance of storage and network latency."
What is the definition of 'front-end processors'?,Main CPUs responsible for all system tasks.,"Small computers performing tasks in the overall system; managing I/O, offloading CPU.",Software applications that handle user input.,Memory modules used for temporary data storage.,Graphical processing units designed for rendering.,B,"The glossary defines 'front-end processors' as 'Small computers performing tasks in overall system; manage I/O, offload CPU.'"
What describes a 'terminal concentrator'?,A type of server rack for multiple terminals.,A device that consolidates network cables.,A type of front-end processor for terminals.,A software utility for terminal emulation.,A power distribution unit for remote devices.,C,The glossary defines 'terminal concentrator' as 'Type of front-end processor for terminals.'
What is an 'I/O channel' as defined in the glossary?,A general-purpose CPU for desktop computers.,A network switch used in large data centers.,"A dedicated, special-purpose CPU in large systems for I/O or offloading the main CPU.",A software library for input/output operations.,A bus architecture for connecting peripheral devices.,C,"The glossary defines 'I/O channel' as a 'Dedicated, special-purpose CPU in large systems for I/O or offloading main CPU.'"
Which of the following are identified as basic I/O hardware elements?,"Buses, device controllers, and devices","CPU, memory, and storage drives","Operating system, applications, and network protocols","Monitors, keyboards, and mice","Files, directories, and processes",A,"The text explicitly states: 'Basic I/O hardware elements: buses, device controllers, devices.'"
"How is data movement typically handled in an I/O system, according to the text?",Exclusively by the CPU using polling,Through dedicated application-level APIs only,Either by the CPU (programmed I/O) or by a DMA controller,"Directly by the device, bypassing the system entirely",Only via interrupt-driven mechanisms,C,The text specifies: 'Data movement: CPU (programmed I/O) or DMA controller.'
What is the primary function and nature of a 'device driver' as described?,An application program that performs system diagnostics,A user-space utility for hardware configuration,A hardware component that manages I/O ports,A kernel module controlling a specific device,A network service for device discovery,D,The text defines: 'Device driver: kernel module controlling a device.'
The system-call interface handles which basic hardware categories?,Only block devices and network sockets,"CPUs, GPUs, and RAM","Block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers","Printers, scanners, and digital cameras exclusively","Webcams, microphones, and speakers",C,"The text lists: 'System-call interface handles basic hardware categories: block devices, character-stream devices, memory-mapped files, network sockets, programmed interval timers.'"
Which of the following is NOT listed as a basic hardware category handled by the system-call interface?,Block devices,Character-stream devices,Network sockets,Graphical processing units (GPUs),Programmed interval timers,D,"The text lists block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers. GPUs are not mentioned."
"What is the typical behavior of I/O system calls concerning processes, and when are nonblocking/asynchronous calls used?","They always execute asynchronously, never blocking processes.","They usually block processes, but nonblocking/asynchronous calls are used by kernel/applications that must not sleep.","They never block processes, relying solely on interrupts.","They block processes only in user space, not in the kernel.",They are exclusively nonblocking for all types of operations.,B,"The text states: 'System calls usually block processes, but nonblocking/asynchronous calls used by kernel/applications that must not sleep.'"
Why would kernel components or specific applications utilize nonblocking or asynchronous I/O calls?,To increase the system's overall memory usage,To simplify error handling during I/O operations,To avoid the process from having to 'sleep' or wait for I/O completion,To directly bypass the device driver layer,To solely support network communication,C,The text indicates nonblocking/asynchronous calls are 'used by kernel/applications that must not sleep.'
Which set of services are provided by the kernel's I/O subsystem?,"Only buffering, caching, and user authentication","I/O scheduling, buffering, caching, spooling, device reservation, and error handling","Process scheduling, memory management, and file system encryption","Network routing, firewall configuration, and user interface rendering","Application compilation, software updates, and system diagnostics",B,"The text lists these services directly: 'Kernel's I/O subsystem provides services: I/O scheduling, buffering, caching, spooling, device reservation, error handling.'"
What is the purpose of 'name translation' in the context of I/O?,To convert data streams between different character encodings,To establish network connections between remote devices,To connect hardware devices to symbolic file names,To optimize the CPU's instruction set for I/O operations,To manage the mapping of virtual memory addresses to physical memory,C,The text defines: 'Name translation: connects hardware devices to symbolic file names.'
What is the correct sequence of mapping levels involved in I/O name translation?,Device drivers/addresses → Character-string names → Physical addresses,Physical addresses → Device drivers/addresses → Character-string names,Character-string names → Device drivers/addresses → Physical addresses (I/O ports/bus controllers),Application space → Kernel buffers → Physical addresses,Symbolic file names → Network sockets → Bus controllers,C,The text specifies the mapping levels as: 'character-string names → device drivers/addresses → physical addresses (I/O ports/bus controllers).'
"In the context of I/O name translation, what are 'character-string names' typically mapped to in the second level?",Raw binary data,Device drivers/addresses,Network MAC addresses,Application-specific identifiers,Kernel buffer pointers,B,The text explains the mapping levels start with 'character-string names' which map to 'device drivers/addresses'.
How does the approach to mapping device names differ between UNIX and MS-DOS?,"UNIX uses a separate device name space, while MS-DOS integrates into the file-system name space.","UNIX uses the file-system name space, while MS-DOS uses a separate device name space.","Both UNIX and MS-DOS use a unified, global device name space.",Both UNIX and MS-DOS rely on network-based device naming.,"UNIX uses numerical IDs for devices, MS-DOS uses symbolic names.",B,The text states: 'Mapping can be within file-system name space (UNIX) or separate device name space (MS-DOS).'
What is STREAMS in the context of UNIX I/O?,A file system specifically designed for streaming multimedia.,A UNIX mechanism for dynamic assembly of driver code pipelines.,A network protocol for real-time data transfer.,A system call for managing process priorities.,A debugging tool for kernel modules.,B,The text defines: 'STREAMS: UNIX mechanism for dynamic assembly of driver code pipelines.'
"Regarding stacked drivers, as mentioned in the text for STREAMS, how does data typically pass through them?","Only in a single direction, from input to output.",Data bypasses the drivers and goes directly to hardware.,Data passes sequentially and bidirectionally.,Data is buffered and then sent in a random order.,Only one driver can be active at a time.,C,"The text specifies: 'Drivers can be stacked, data passes sequentially and bidirectionally.'"
Which of the following contributes to I/O system calls being costly?,The simplicity of hardware interfaces.,Minimized CPU/memory load during data transfers.,Context switching across the kernel protection boundary.,Automatic caching by the application.,Reduced need for error handling.,C,The text lists 'Context switching (kernel protection boundary)' as a reason I/O system calls are costly.
The CPU/memory load for data copying between kernel buffers and application space is a significant cost factor for I/O system calls because:,It requires frequent disk defragmentation.,It increases network latency significantly.,It consumes valuable processing time and memory bandwidth.,It leads to spontaneous system reboots.,It simplifies the overall system architecture.,C,"The text states: 'CPU/memory load for data copying (kernel buffers <-> application space)' is a factor, implying it consumes resources."
How does signal/interrupt handling contribute to the cost of I/O system calls?,It eliminates the need for context switching.,It is a source of overhead that makes these calls costly.,"It only affects performance in very specific, rare cases.",It ensures that I/O operations are completely free of errors.,It allows direct user-space access to hardware.,B,The text lists 'Signal/interrupt handling' as one of the explicit reasons why I/O system calls are costly.
One of the key services provided by the kernel's I/O subsystem is 'buffering'. What is its general purpose in this context?,To secure data against unauthorized access,To temporarily store data during transfer to smooth out speed differences between devices and the CPU/memory,To compress data before it is sent to a device,To translate network protocols,To physically connect devices to the bus,B,"While not explicitly defined in the text, buffering, caching, and spooling are all related to managing data flow for efficiency, typically involving temporary storage to handle speed mismatches and reduce direct device interaction frequency. This is the most appropriate general explanation for buffering's role in I/O systems."
Why is 'device reservation' listed as a service provided by the kernel's I/O subsystem?,To allow users to pre-order new hardware devices.,To ensure exclusive access to a device for a process to prevent conflicts.,To schedule future software updates for device drivers.,To monitor the physical location of I/O devices.,To track the warranty information for installed hardware.,B,"Device reservation, a service of the I/O subsystem, is used to grant a process exclusive access to a shared device, preventing other processes from using it and thus avoiding conflicts. This is the common interpretation of 'device reservation' in operating systems."
The statement 'I/O system calls are costly' is followed by a list of reasons. Which reason directly relates to the need for CPU to change execution mode?,Signal/interrupt handling,CPU/memory load for data copying,Context switching (kernel protection boundary),I/O scheduling overhead,Device driver loading time,C,"Context switching across the 'kernel protection boundary' implies a change from user mode to kernel mode and back, which is an overhead due to privilege level changes and state saving/restoring."
