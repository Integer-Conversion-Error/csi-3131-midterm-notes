Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following are identified as basic I/O hardware elements?,"Buses, device controllers, and devices","CPU, memory, and storage drives","Operating system, applications, and network protocols","Monitors, keyboards, and mice","Files, directories, and processes",A,"The text explicitly states: 'Basic I/O hardware elements: buses, device controllers, devices.'"
"How is data movement typically handled in an I/O system, according to the text?",Exclusively by the CPU using polling,Through dedicated application-level APIs only,Either by the CPU (programmed I/O) or by a DMA controller,"Directly by the device, bypassing the system entirely",Only via interrupt-driven mechanisms,C,The text specifies: 'Data movement: CPU (programmed I/O) or DMA controller.'
What is the primary function and nature of a 'device driver' as described?,An application program that performs system diagnostics,A user-space utility for hardware configuration,A hardware component that manages I/O ports,A kernel module controlling a specific device,A network service for device discovery,D,The text defines: 'Device driver: kernel module controlling a device.'
The system-call interface handles which basic hardware categories?,Only block devices and network sockets,"CPUs, GPUs, and RAM","Block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers","Printers, scanners, and digital cameras exclusively","Webcams, microphones, and speakers",C,"The text lists: 'System-call interface handles basic hardware categories: block devices, character-stream devices, memory-mapped files, network sockets, programmed interval timers.'"
Which of the following is NOT listed as a basic hardware category handled by the system-call interface?,Block devices,Character-stream devices,Network sockets,Graphical processing units (GPUs),Programmed interval timers,D,"The text lists block devices, character-stream devices, memory-mapped files, network sockets, and programmed interval timers. GPUs are not mentioned."
"What is the typical behavior of I/O system calls concerning processes, and when are nonblocking/asynchronous calls used?","They always execute asynchronously, never blocking processes.","They usually block processes, but nonblocking/asynchronous calls are used by kernel/applications that must not sleep.","They never block processes, relying solely on interrupts.","They block processes only in user space, not in the kernel.",They are exclusively nonblocking for all types of operations.,B,"The text states: 'System calls usually block processes, but nonblocking/asynchronous calls used by kernel/applications that must not sleep.'"
Why would kernel components or specific applications utilize nonblocking or asynchronous I/O calls?,To increase the system's overall memory usage,To simplify error handling during I/O operations,To avoid the process from having to 'sleep' or wait for I/O completion,To directly bypass the device driver layer,To solely support network communication,C,The text indicates nonblocking/asynchronous calls are 'used by kernel/applications that must not sleep.'
Which set of services are provided by the kernel's I/O subsystem?,"Only buffering, caching, and user authentication","I/O scheduling, buffering, caching, spooling, device reservation, and error handling","Process scheduling, memory management, and file system encryption","Network routing, firewall configuration, and user interface rendering","Application compilation, software updates, and system diagnostics",B,"The text lists these services directly: 'Kernel's I/O subsystem provides services: I/O scheduling, buffering, caching, spooling, device reservation, error handling.'"
What is the purpose of 'name translation' in the context of I/O?,To convert data streams between different character encodings,To establish network connections between remote devices,To connect hardware devices to symbolic file names,To optimize the CPU's instruction set for I/O operations,To manage the mapping of virtual memory addresses to physical memory,C,The text defines: 'Name translation: connects hardware devices to symbolic file names.'
What is the correct sequence of mapping levels involved in I/O name translation?,Device drivers/addresses → Character-string names → Physical addresses,Physical addresses → Device drivers/addresses → Character-string names,Character-string names → Device drivers/addresses → Physical addresses (I/O ports/bus controllers),Application space → Kernel buffers → Physical addresses,Symbolic file names → Network sockets → Bus controllers,C,The text specifies the mapping levels as: 'character-string names → device drivers/addresses → physical addresses (I/O ports/bus controllers).'
"In the context of I/O name translation, what are 'character-string names' typically mapped to in the second level?",Raw binary data,Device drivers/addresses,Network MAC addresses,Application-specific identifiers,Kernel buffer pointers,B,The text explains the mapping levels start with 'character-string names' which map to 'device drivers/addresses'.
How does the approach to mapping device names differ between UNIX and MS-DOS?,"UNIX uses a separate device name space, while MS-DOS integrates into the file-system name space.","UNIX uses the file-system name space, while MS-DOS uses a separate device name space.","Both UNIX and MS-DOS use a unified, global device name space.",Both UNIX and MS-DOS rely on network-based device naming.,"UNIX uses numerical IDs for devices, MS-DOS uses symbolic names.",B,The text states: 'Mapping can be within file-system name space (UNIX) or separate device name space (MS-DOS).'
What is STREAMS in the context of UNIX I/O?,A file system specifically designed for streaming multimedia.,A UNIX mechanism for dynamic assembly of driver code pipelines.,A network protocol for real-time data transfer.,A system call for managing process priorities.,A debugging tool for kernel modules.,B,The text defines: 'STREAMS: UNIX mechanism for dynamic assembly of driver code pipelines.'
"Regarding stacked drivers, as mentioned in the text for STREAMS, how does data typically pass through them?","Only in a single direction, from input to output.",Data bypasses the drivers and goes directly to hardware.,Data passes sequentially and bidirectionally.,Data is buffered and then sent in a random order.,Only one driver can be active at a time.,C,"The text specifies: 'Drivers can be stacked, data passes sequentially and bidirectionally.'"
Which of the following contributes to I/O system calls being costly?,The simplicity of hardware interfaces.,Minimized CPU/memory load during data transfers.,Context switching across the kernel protection boundary.,Automatic caching by the application.,Reduced need for error handling.,C,The text lists 'Context switching (kernel protection boundary)' as a reason I/O system calls are costly.
The CPU/memory load for data copying between kernel buffers and application space is a significant cost factor for I/O system calls because:,It requires frequent disk defragmentation.,It increases network latency significantly.,It consumes valuable processing time and memory bandwidth.,It leads to spontaneous system reboots.,It simplifies the overall system architecture.,C,"The text states: 'CPU/memory load for data copying (kernel buffers <-> application space)' is a factor, implying it consumes resources."
How does signal/interrupt handling contribute to the cost of I/O system calls?,It eliminates the need for context switching.,It is a source of overhead that makes these calls costly.,"It only affects performance in very specific, rare cases.",It ensures that I/O operations are completely free of errors.,It allows direct user-space access to hardware.,B,The text lists 'Signal/interrupt handling' as one of the explicit reasons why I/O system calls are costly.
One of the key services provided by the kernel's I/O subsystem is 'buffering'. What is its general purpose in this context?,To secure data against unauthorized access,To temporarily store data during transfer to smooth out speed differences between devices and the CPU/memory,To compress data before it is sent to a device,To translate network protocols,To physically connect devices to the bus,B,"While not explicitly defined in the text, buffering, caching, and spooling are all related to managing data flow for efficiency, typically involving temporary storage to handle speed mismatches and reduce direct device interaction frequency. This is the most appropriate general explanation for buffering's role in I/O systems."
Why is 'device reservation' listed as a service provided by the kernel's I/O subsystem?,To allow users to pre-order new hardware devices.,To ensure exclusive access to a device for a process to prevent conflicts.,To schedule future software updates for device drivers.,To monitor the physical location of I/O devices.,To track the warranty information for installed hardware.,B,"Device reservation, a service of the I/O subsystem, is used to grant a process exclusive access to a shared device, preventing other processes from using it and thus avoiding conflicts. This is the common interpretation of 'device reservation' in operating systems."
The statement 'I/O system calls are costly' is followed by a list of reasons. Which reason directly relates to the need for CPU to change execution mode?,Signal/interrupt handling,CPU/memory load for data copying,Context switching (kernel protection boundary),I/O scheduling overhead,Device driver loading time,C,"Context switching across the 'kernel protection boundary' implies a change from user mode to kernel mode and back, which is an overhead due to privilege level changes and state saving/restoring."
