Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
Which of the following best describes 'memory mapping' as an alternative file access method?,A method that exclusively uses `read()` and `write()` system calls for performance.,A technique to directly access secondary storage without involving the CPU.,Treating file I/O as routine memory accesses using virtual memory techniques.,A way to cache entire files in RAM permanently.,A proprietary method specific to the Windows operating system for file management.,C,"Memory mapping treats file I/O as routine memory accesses by mapping disk blocks to pages in memory, leveraging virtual memory techniques."
What is a primary benefit of using memory-mapped files?,It guarantees immediate persistence of all changes to secondary storage.,It always reduces the amount of physical memory required for file operations.,It can lead to significant performance increases.,It eliminates the need for any form of synchronization between processes.,"It restricts file access to a single process at a time, enhancing security.",C,The text explicitly states that memory mapping 'Can lead to significant performance increases' due to avoiding system call overhead.
"In the basic mechanism of memory-mapped files, what typically happens upon the initial access to a mapped file?",The entire file is loaded into physical memory.,A `read()` system call is immediately executed.,A demand paging operation and a page fault occur.,The file is converted into a temporary swap file.,The operating system prevents access until the file is closed and reopened.,C,Initial access to a memory-mapped file triggers 'demand paging' and a 'page fault' to bring the relevant portion into memory.
"When a page fault occurs during the initial access to a memory-mapped file, what unit of the file is typically read into a physical page?",The entire file.,A byte at a time.,A kilobyte portion.,A page-sized portion.,Only the first block of the file.,D,"Upon a page fault, a 'page-sized portion of file' is read into a physical page."
How are subsequent reads and writes to a memory-mapped file handled after the initial access?,Through continuous `read()` and `write()` system calls.,As routine memory accesses.,By always swapping data to secondary storage first.,Only by specialized hardware accelerators.,They require re-mapping the file for each operation.,B,"After the initial page-in, 'subsequent reads/writes: handled as routine memory accesses'."
What specific overhead does memory mapping file access help to avoid?,Virtual memory management overhead.,The overhead of context switching between user and kernel mode.,The overhead associated with `read()` and `write()` system calls.,The overhead of disk block allocation.,The overhead of inter-process communication (IPC) mechanisms.,C,Memory mapping 'Simplifies and speeds up file access by avoiding `read()` and `write()` system call overhead'.
When are updates to a memory-mapped file generally written back to secondary storage?,Immediately after every write operation.,Only when the operating system shuts down.,When the file is explicitly closed.,"Never, unless a special 'flush' command is issued.","After a fixed time interval, regardless of file state.",C,"The text states: 'Generally, updates written back when file closed'."
What happens to intermediate changes in a memory-mapped file under conditions of 'memory pressure'?,They are immediately discarded to free up memory.,They are forced to be written back to secondary storage immediately.,They may be moved to swap space.,They cause a system crash due to resource exhaustion.,They are buffered indefinitely in a dedicated high-priority queue.,C,"'Under memory pressure, intermediate changes may go to swap space'."
"Which operating system is mentioned as an example of one that memory-maps all file I/O, even standard calls, to kernel address space?",Linux,Windows,macOS,Solaris,FreeBSD,D,"The text provides Solaris as an example: 'Some OS (e.g., Solaris) memory-map all file I/O, even with standard calls, to kernel address space'."
What is a key benefit of multiple processes mapping the same file concurrently?,It automatically provides transaction-level atomicity.,It enables efficient data sharing between them.,It isolates each process's view of the file completely.,It prevents any process from writing to the file.,It forces all processes to use `read()` and `write()` system calls.,B,'Multiple processes can map same file concurrently for data sharing'.
"When multiple processes map the same section of a file, what is the visibility characteristic of writes made by one process?",Writes are only visible to the process that performed them.,Writes are visible to others only after the file is closed and reopened.,Writes are immediately visible to other processes mapping the same section.,Writes require explicit flushing to be visible to other processes.,Writes are buffered and never directly visible to other processes.,C,'Writes by one process visible to others mapping same section'.
How is shared access to a memory-mapped file typically implemented at a lower level?,By duplicating the file for each process.,By assigning each process a unique set of physical pages.,By a virtual memory map pointing to the same physical page.,By using a network file system for synchronization.,By requiring kernel intervention for every memory access.,C,Shared access 'Implemented by virtual memory map pointing to same physical page'.
What memory management feature do memory-mapped files support that allows processes to share read-only data but get their own copies for modification?,Demand paging.,Page replacement algorithms.,Copy-on-write.,Pre-fetching.,Memory defragmentation.,C,"Memory-mapped files 'Supports copy-on-write: processes share read-only, get own copies for modification'."
"When multiple processes share data via memory-mapped files, what mechanism should they use for coordination?",Remote procedure calls (RPC).,Message passing.,Pipes.,Mutual exclusion.,Broadcast messages.,D,'Processes use mutual exclusion for shared data coordination'.
What is a common way for shared memory mechanisms to be implemented in operating systems?,Using dedicated hardware registers.,Through network sockets.,By memory mapping files.,Via inter-process queues.,"As a separate, unpaged memory region.",C,'Shared memory often implemented by memory mapping files'.
"According to the Windows API outline, what is the first step when creating shared memory using memory-mapped files?",Establish a view of the mapped file.,Create a file mapping for the file.,Open the file using `CreateFile()`.,Call `UnmapViewOfFile()`.,Define a named shared-memory object.,B,The outline lists 'Create a file mapping for the file' as the first step.
"In the Windows API for shared memory using memory-mapped files, what is the second step after creating a file mapping?",Opening the file.,Closing the file handle.,Establishing a view of the mapped file in the process's virtual address space.,Calling `CreateFileMapping()` again.,Writing data directly to the file.,C,The outline lists 'Establish a view of the mapped file in process's virtual address space' as the second step.
"In the context of the Windows API, what role does a mapped file play when used for inter-process communication?",It acts as a temporary buffer for non-shared data.,It serves as a shared-memory object.,It functions as a secure network conduit.,It dictates the operating system's paging policy.,It only allows read-only access for multiple processes.,B,'Mapped file acts as shared-memory object for inter-process communication'.
Which Windows API function is used to open the file that will be memory-mapped?,`CreateFileMapping()`,`MapViewOfFile()`,`CreateFile()`,`OpenFile()`,`GetFileHandle()`,C,The steps explicitly state: 'Open file with `CreateFile()` (returns `HANDLE`)'.
Which Windows API function is responsible for creating a file mapping object using a file `HANDLE`?,`MapViewOfFile()`,`CreateFile()`,`UnmapViewOfFile()`,`CreateFileMapping()`,`GetMappedObject()`,D,The steps state: 'Create file mapping with `CreateFileMapping()` (uses file `HANDLE`)'.
"Which Windows API function is used to establish a 'view' of a mapped file, typically using a mapped object `HANDLE`?",`CreateFile()`,`UnmapViewOfFile()`,`CreateFileMapping()`,`MapViewOfFile()`,`GetViewHandle()`,D,The steps state: 'Establish view with `MapViewOfFile()` (uses mapped object `HANDLE`)'.
What specifically does `CreateFileMapping()` create in the Windows API for shared memory?,A physical file on disk.,A temporary buffer in kernel space.,A named shared-memory object.,A pointer to the file's content.,An event for synchronization.,C,`CreateFileMapping()` creates a 'named shared-memory object'.
"What does `MapViewOfFile()` return, and what do accesses to this returned value signify?",It returns a file handle; accesses signify direct disk operations.,It returns a process ID; accesses signify inter-process messaging.,It returns a pointer to the shared-memory object; accesses to this memory are accesses to the file.,It returns a boolean indicating success; accesses signify a network connection.,It returns an error code; accesses signify a corrupted memory region.,C,`MapViewOfFile()` 'returns pointer to shared-memory object; accesses to this memory are accesses to the file'.
"When mapping a file in the Windows API, what extent of the file can be mapped?",Only the first page of the file.,Only a fixed 64KB portion.,Only the last section of the file.,The entire file or a specific portion of it.,Only files smaller than 1MB.,D,'Entire file or portion can be mapped'.
Which Windows API function is used by processes to remove their 'view' of a memory-mapped file?,`CloseHandle()`,`DeleteFileMapping()`,`UnmapViewOfFile()`,`ReleaseFile()`,`DetachMemory()`,C,'Both processes remove view with `UnmapViewOfFile()`'.
"According to the glossary, what is the definition of 'memory mapping'?",A technique for compressing files on disk.,A method to encrypt data stored in files.,A file-access method where a file is mapped into process memory space for direct memory access.,A system call specifically for network file transfers.,A hardware component that manages RAM allocation.,C,The glossary defines 'memory mapping' as 'File-access method where file is mapped into process memory space for direct memory access'.
"In the Windows context, what does the term 'file mapping' refer to?",The process of indexing files in a directory.,"The second step in memory-mapping a file, where an address range is defined.",The first step in memory-mapping a file.,A diagram illustrating the layout of a file on disk.,A network protocol for sharing files.,C,"The glossary defines 'file mapping' as 'In Windows, the first step in memory-mapping a file'."
What is the definition of a 'view' in the context of Windows memory-mapped files?,A graphical representation of the file's content.,A security permission level for file access.,An address range mapped in shared memory; the second step in memory-mapping a file.,A read-only copy of the entire file.,The internal data structure representing the file system.,C,"The glossary defines 'view' as 'In Windows, an address range mapped in shared memory; second step in memory-mapping a file'."
What is a 'named shared-memory object' in the Windows API?,A special type of file that only allows named access.,A section of a memory-mapped file accessible by name from multiple processes.,A hardware component for memory sharing.,A data structure used to track process names.,A cryptographic key for securing shared memory.,B,"The glossary defines 'named shared-memory object' as 'In Windows API, a section of a memory-mapped file accessible by name from multiple processes'."
