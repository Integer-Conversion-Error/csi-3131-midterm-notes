Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What aspect of system operation does deadlock-prevention primarily limit?,The total number of resources in the system.,How resource requests are made.,The number of concurrent threads.,The speed of resource allocation.,The amount of memory available to each thread.,B,Deadlock-prevention specifically limits how requests are made to ensure no necessary condition for deadlock occurs.
Deadlock-prevention ensures that which of the following does not occur?,High device utilization.,Increased system throughput.,Any necessary condition for deadlock.,A safe state.,Dynamic resource allocation.,C,The primary goal of deadlock-prevention is to ensure that no necessary condition for deadlock occurs.
Which of the following is a common side effect of employing deadlock-prevention strategies?,Increased system throughput.,Enhanced device utilization.,Reduced system overhead.,Low device utilization.,Faster resource acquisition.,D,Deadlock-prevention can lead to low device utilization and reduced system throughput as stated in the text.
What alternative approach to deadlock-prevention requires additional information on resource requests?,Deadlock detection.,Deadlock recovery.,Deadlock avoidance.,Resource preemption.,Priority scheduling.,C,The text states that deadlock avoidance is an alternative that requires additional information on resource requests.
What type of information must the system know a priori for deadlock avoidance algorithms to function?,The current state of all CPU registers.,The maximum resources each thread may need.,The exact sequence of future resource requests.,The current available memory.,The processing speed of each thread.,B,Deadlock avoidance requires knowing the maximum resources each thread may need beforehand (a priori information).
How does a deadlock-avoidance algorithm prevent the condition of circular-wait?,By pre-empting resources from threads.,By dynamically examining the resource-allocation state.,By ignoring all resource requests.,By ensuring mutual exclusion.,By breaking the no-preemption condition.,B,Deadlock-avoidance algorithms dynamically examine the resource-allocation state to prevent circular-wait.
The resource-allocation state is defined by which of the following?,The CPU utilization and I/O rates.,Only the maximum demands of threads.,"The available resources, allocated resources, and maximum demands.",The number of threads and processes currently running.,The history of all past resource requests.,C,"The resource-allocation state is defined by available resources, allocated resources, and maximum demands of threads."
A state is considered 'safe' if the system can achieve which of the following?,Allocate resources to no more than one thread at a time.,Pre-empt resources from any thread to avoid deadlock.,Allocate resources to each thread (up to its maximum) in some order and avoid deadlock.,Immediately detect and recover from any deadlock.,Ensure that no thread ever waits for a resource.,C,A safe state is defined as one where the system can allocate resources to each thread (up to its maximum) in some order and avoid deadlock.
"According to the text, under what condition is a system considered safe?",If no resources are currently allocated.,If all threads have completed execution.,If a safe sequence exists.,If the system is operating at maximum capacity.,If there are no waiting threads.,C,"The text states, 'System is safe if a safe sequence exists.'"
"In a safe sequence <T1, T2, ..., Tn>, what condition must be met for each thread Ti?",Ti must have all its resources allocated before any other thread.,Its resource requests can be met by currently available resources plus resources held by all Tj where j is less than i.,Ti must not make any further resource requests.,Ti must release all its resources before T(i+1) requests any.,Ti must never enter a waiting state.,B,"A safe sequence ensures that for each Ti, its requests can be met by available resources plus those held by preceding threads in the sequence."
"Which statement accurately describes the relationship between safe, deadlocked, and unsafe states?",All unsafe states are deadlocks.,A safe state is always deadlocked.,A deadlocked state is safe.,"A safe state is not deadlocked, and a deadlocked state is unsafe.",All unsafe states will inevitably lead to deadlock.,D,"The text explicitly states, 'Safe state is not deadlocked; deadlocked state is unsafe.' It also clarifies that not all unsafe states are deadlocks."
Which of the following is true regarding unsafe states and deadlocks?,Unsafe states always lead to deadlock.,"Not all unsafe states are deadlocks, but they may lead to deadlock.",A system in an unsafe state cannot ever reach a safe state again.,Deadlocks are a prerequisite for unsafe states.,An unsafe state implies the system is currently deadlocked.,B,"The text states, 'Not all unsafe states are deadlocks, but unsafe states may lead to deadlock.'"
How does the operating system (OS) generally behave regarding unsafe states?,The OS actively seeks out unsafe states to optimize resource use.,"The OS prevents deadlocks regardless of the state, even if unsafe.",The OS avoids unsafe states as long as the state is safe.,The OS forces threads into unsafe states to test resilience.,The OS has no control over unsafe states.,C,"The text indicates, 'OS avoids unsafe states as long as state is safe.'"
"When a system is in an unsafe state, who or what primarily controls whether deadlocks occur?",The operating system's deadlock prevention mechanisms.,The system administrator's manual interventions.,The behavior of the individual threads.,The amount of available memory.,The speed of the CPU.,C,"The text states, 'In unsafe state, OS cannot prevent deadlocks; thread behavior controls unsafe states.'"
The Resource-allocation-graph algorithm is applicable to systems with what characteristic?,Multiple instances of each resource type.,Only one instance of each resource type.,No resource preemption allowed.,An unlimited number of resources.,Only read-only resources.,B,The RAG algorithm is specifically 'For systems with only one instance of each resource type.'
"In a Resource-allocation graph, what does a dashed line from thread Ti to resource Rj represent?",Ti currently holds Rj.,Ti has requested Rj.,Rj is currently available.,Ti may request Rj in the future.,Rj is about to be released by Ti.,D,"A dashed line is a claim edge, indicating that Ti may request Rj in the future."
When does a claim edge (thread Ti to resource Rj) convert into a request edge in the Resource-allocation-graph algorithm?,When Rj is allocated to Ti.,When Rj is released by Ti.,When Ti requests Rj.,When Ti terminates.,When a cycle is detected in the graph.,C,A claim edge converts to a request edge 'when Ti requests Rj.'
Under what condition does a request edge (thread Ti to resource Rj) convert to an assignment edge (resource Rj to thread Ti)?,When Ti finishes its execution.,When Rj is pre-empted from Ti.,When Ti makes a new claim for Rj.,When Rj is allocated to Ti.,When Rj becomes available for the first time.,D,A request edge converts to an assignment edge 'when Rj allocated to Ti.'
"When an assignment edge (resource Rj to thread Ti) converts back to a claim edge (thread Ti to resource Rj) in the Resource-allocation-graph algorithm, what event has occurred?",Ti has made a new request for Rj.,Rj has been assigned to a different thread.,Ti has released Rj.,A deadlock has been detected.,Ti has cancelled its future claim for Rj.,C,An assignment edge converts to a claim edge 'when Rj released by Ti.'
How must resources be claimed by threads when using the Resource-allocation-graph algorithm?,Dynamically during execution.,Only after a deadlock is detected.,A priori (in advance).,Only if a cycle is formed.,Through negotiation with other threads.,C,"The text states, 'Resources must be claimed a priori.'"
"In the Resource-allocation-graph algorithm, a resource request is granted only if what condition is met?",The requested resource is immediately available.,No other thread currently holds the resource.,No cycle is formed in the graph after the hypothetical allocation.,The thread has the highest priority.,The system is in a deadlocked state.,C,A request is granted 'only if no cycle formed in graph' (checked by cycle-detection algorithm).
What does the formation of a cycle in a Resource-allocation graph indicate within the context of deadlock avoidance?,The system is in a safe state.,A resource has been released.,An unsafe state.,A request has been granted.,The system has recovered from a deadlock.,C,"The text states, 'Cycle indicates unsafe state.'"
"What is the time complexity of the Resource-allocation-graph algorithm, where 'n' is the number of threads?",O(n),O(n log n),O(n squared),O(m times n squared),O(2 to the power of n),C,"The algorithm complexity is given as 'O(n^2) operations, where n is number of threads.'"
For what type of systems is the Banker's algorithm primarily applicable?,Systems with only one instance of each resource type.,Systems with multiple instances of each resource type.,Systems that do not allow resource sharing.,Systems that require immediate deadlock detection.,Systems with a fixed number of threads.,B,The Banker's algorithm is 'Applicable to systems with multiple instances of each resource type.'
How does the efficiency of the Banker's algorithm compare to the Resource-allocation graph scheme?,It is more efficient.,It is equally efficient.,It is less efficient.,Efficiency comparison is not possible.,Efficiency depends solely on the number of resources.,C,"The text states, 'Less efficient than resource-allocation graph scheme.'"
"When a new thread enters a system employing the Banker's algorithm, what must it declare?",Its current resource allocation.,The maximum instances of each resource type it may need.,The number of resources it currently holds.,Whether it needs to wait for resources.,Its execution priority.,B,A new thread 'declares max instances of each resource type needed.'
What is the constraint on the maximum resource instances a new thread can declare in the Banker's algorithm?,It must be less than the current available resources.,It cannot exceed the total system resources.,It must be equal to its current allocation.,It must be less than the resources held by other threads.,There is no constraint; threads can declare any amount.,B,The declared max instances 'cannot exceed total system resources.'
Under what condition is a resource request granted in the Banker's algorithm?,If the requested resources are immediately available.,If the allocation leaves the system in a safe state.,If the requesting thread has the highest priority.,If no other thread is currently waiting.,If the request is for a single instance of a resource type.,B,A request is granted 'only if allocation leaves system in safe state.'
"In the Banker's algorithm, what information does the 'Available' vector store?",The maximum demand of each thread.,The resources currently allocated to each thread.,The number of available resources of each type.,The remaining resource need of each thread.,The total number of resource types.,C,"'Available' is a 'vector of length m, number of available resources of each type.'"
What does the 'Max' matrix represent in the Banker's algorithm?,Resources currently allocated to each thread.,Remaining resource need of each thread.,Number of available resources of each type.,Maximum demand of each thread.,The total number of resource instances in the system.,D,"'Max' is an 'n x m matrix, max demand of each thread.'"
The 'Allocation' matrix in the Banker's algorithm stores which of the following?,The total resources available to the system.,The resources that have been released by threads.,Resources currently allocated to each thread.,The maximum resources each thread may request.,Resources that are currently unavailable.,C,"'Allocation' is an 'n x m matrix, resources currently allocated to each thread.'"
"How is the 'Need' matrix calculated in the Banker's algorithm, and what does it represent?","It's Available minus Allocation, representing available resources.","It's Max plus Allocation, representing total potential resources.","It's Max minus Allocation, representing the remaining resource need of each thread.","It's Allocation minus Max, representing over-allocated resources.","It's Available plus Allocation, representing the system's total resources.",C,"'Need' is calculated as Max[i][j] minus Allocation[i][j], representing the remaining resource need of each thread."
"In the Banker's Safety Algorithm, what is the initial value assigned to the 'Work' vector?",A vector of all zeros.,The Max matrix.,The Available vector.,The Allocation matrix.,The Need matrix.,C,Step 1 of the Safety Algorithm states: 'Initialize Work = Available.'
How is the 'Finish' array initialized for each thread 'i' in the Banker's Safety Algorithm?,Finish[i] = true,Finish[i] = false,Finish[i] = Need for thread i,Finish[i] = Allocation for thread i,Finish[i] = Available,B,"Step 1 of the Safety Algorithm states: 'Finish[i] = false for i = 0, 1, ..., n-1.'"
"In the Banker's Safety Algorithm, what conditions must be met to find an index 'i' (representing a thread) to process?",Finish[i] is true AND Need for thread i is greater than Work.,Finish[i] is false AND Need for thread i is less than or equal to Work.,Finish[i] is false AND Allocation for thread i is greater than Work.,Finish[i] is true AND Allocation for thread i is less than or equal to Work.,Finish[i] is false AND Request for thread i is less than or equal to Work.,B,Step 2 of the Safety Algorithm states: 'Find index i such that Finish[i] == false and Need_i <= Work.'
"If a suitable thread 'i' is found in the Banker's Safety Algorithm, how are the 'Work' vector and 'Finish[i]' updated?",Work = Work minus Allocation for thread i; Finish[i] = false.,Work = Work plus Need for thread i; Finish[i] = true.,Work = Work plus Allocation for thread i; Finish[i] = true.,Work = Work minus Need for thread i; Finish[i] = false.,Work = Available; Finish[i] = true.,C,Step 3 of the Safety Algorithm states: 'Work = Work + Allocation_i; Finish[i] = true.'
How is it determined that the system is in a safe state at the end of the Banker's Safety Algorithm?,If Work is equal to Available.,If Finish[i] is false for all i.,If Allocation for thread i is zero for all i.,If Finish[i] is true for all i.,If no thread needed to wait for resources.,D,"Step 4 of the Safety Algorithm states: 'If Finish[i] == true for all i, system is in safe state.'"
What is the time complexity of the Banker's Safety Algorithm?,O(n),O(m times n),O(m times n squared),O(n squared),O(m squared times n),C,The text states the algorithm complexity is 'O(m x n^2) operations.'
What is the very first condition checked when a thread Ti makes a resource request (Request for thread Ti) using the Banker's Resource-request algorithm?,If Request for thread Ti is less than or equal to Available.,If Request for thread Ti is less than or equal to Need for thread Ti.,If the resulting state is safe.,If Request for thread Ti is greater than the total system resources.,If Ti has the highest priority.,B,"Step 1 states: 'If Request_i <= Need_i, go to step 2. Else, error (thread exceeded max claim).'"
"In the Banker's Resource-request algorithm, what is the outcome if a thread's Request for thread Ti is greater than its Need for thread Ti?",The request is immediately granted.,The thread is put into a waiting state.,"An error is indicated, as the thread exceeded its max claim.",The system attempts to find a safe sequence.,The request is modified to match Need for thread Ti.,C,"Step 1 states: 'Else, error (thread exceeded max claim).'"
"After confirming Request for thread Ti is less than or equal to Need for thread Ti, what is the next condition checked in the Banker's Resource-request algorithm?",If the system is currently in a safe state.,If Request for thread Ti is less than or equal to Available.,If any other thread is waiting.,If Allocation for thread Ti is zero.,If Max for thread Ti has been reached.,B,"Step 2 states: 'If Request_i <= Available, go to step 3.'"
"If a thread Ti's Request for thread Ti is found to be greater than Available resources in the Banker's Resource-request algorithm, what happens?",The request is immediately granted.,The system restores its old state.,Ti must wait.,An error is indicated.,Resources are pre-empted from other threads.,C,"Step 2 states: 'Else, Ti must wait (resources unavailable).'"
"During the 'pretend allocation' step of the Banker's Resource-request algorithm, how are Available, Allocation for thread Ti, and Need for thread Ti updated?","Available increases, Allocation for thread Ti decreases, Need for thread Ti increases.","Available decreases, Allocation for thread Ti increases, Need for thread Ti decreases.",All three remain unchanged.,"Available and Allocation for thread Ti increase, Need for thread Ti decreases.",All three decrease.,B,"The text lists the updates: 'Available = Available - Request_i', 'Allocation_i = Allocation_i + Request_i', 'Need_i = Need_i - Request_i'."
What is the final condition that determines if a resource request is granted in the Banker's Resource-request algorithm?,If the request amount is less than the current available resources.,If the Need for thread Ti becomes zero after the allocation.,If the resulting state after pretend allocation is safe.,If no other threads are currently making requests.,If the request comes from a high-priority thread.,C,"Step 4 states: 'If resulting state is safe (using Safety Algorithm), grant request.'"
"If the resulting state after a 'pretend allocation' is found to be unsafe in the Banker's Resource-request algorithm, what is the consequence?",The request is granted anyway.,The system enters a deadlocked state.,"Ti waits, and the old state is restored.",Resources are pre-empted from Ti.,The Need for thread Ti is reset to its maximum.,C,"Step 4 states: 'Else, Ti waits, restore old state.'"
"According to the provided glossary, what defines a 'safe sequence'?",A sequence of processes that always leads to a deadlock.,A sequence where each process completes execution immediately.,"A sequence of processes <P1, P2, ..., Pn> where each P(i)'s requests can be met by available resources plus resources held by P(j) (j is less than i).",A sequence where processes are granted resources strictly in the order of their arrival.,A sequence that minimizes the total number of resource requests.,C,"The glossary defines a safe sequence as: 'Sequence of processes <P1, P2, ..., Pn> where each Pi's requests can be met by available resources + resources held by Pj (j < i).'"
"As defined in the glossary, what is a 'claim edge' in a resource-allocation graph?",An edge indicating a resource is currently allocated to a process.,An edge representing a process's current request for a resource.,An edge indicating a process might claim a resource in the future.,An edge that signifies a deadlock has occurred.,An edge showing a resource has been released by a process.,C,"The glossary defines a claim edge as: 'In resource-allocation graph, an edge indicating a process might claim a resource in the future.'"
"Based on the glossary, which statement best describes the Banker's algorithm?",A deadlock detection algorithm for single resource instances.,A deadlock prevention algorithm that limits resource requests.,"A deadlock avoidance algorithm for multiple resource instances, less efficient than resource-allocation graph.",A resource scheduling algorithm that prioritizes critical processes.,An algorithm for recovering from deadlocks once they occur.,C,"The glossary defines Banker's algorithm as: 'Deadlock avoidance algorithm for multiple resource instances, less efficient than resource-allocation graph.'"
