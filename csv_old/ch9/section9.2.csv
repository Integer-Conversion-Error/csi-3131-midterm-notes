Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
What are the primary entities that main memory is designed to accommodate?,Operating System (OS) and user processes,Device drivers and system utilities,CPU registers and cache data,Network protocols and I/O buffers,Virtual machines and hypervisors,A,"The text explicitly states: ""Main memory accommodates OS and user processes."""
How is main memory typically divided into partitions for the OS and user processes?,"Into three partitions: one for OS, one for kernel, and one for user processes","Into a low and high memory partition, both dedicated to user processes",Into two partitions: one for the OS and one for user processes,"Into multiple fixed-size partitions, dynamically assigned","Into a single, large partition shared by all components",C,"The text mentions: ""Memory usually divided into two partitions: one for OS, one for user processes."""
"Regarding the operating system's location in main memory, where can it reside, and what is the common practice for modern OS like Linux and Windows?","Only in low memory, as dictated by hardware limitations","Only in high memory, to protect it from user processes","In low or high memory, with many OS (including Linux/Windows) using high memory","In low or high memory, with many OS (including Linux/Windows) using low memory","Its location is dynamically assigned based on system load, but primarily in low memory",C,"The text states: ""OS can be in low or high memory (many OS, including Linux/Windows, use high memory)."""
What is the defining characteristic of 'contiguous memory allocation'?,Each process is divided into multiple non-contiguous memory sections,Processes are allocated memory in fixed-size blocks only,Each process resides in a single contiguous memory section,Memory is partitioned equally among all processes,Memory is dynamically reallocated every few milliseconds to prevent fragmentation,C,"The definition provided is: ""Contiguous memory allocation: each process in single contiguous memory section."""
What is the primary purpose of memory protection mechanisms in contiguous memory allocation?,To prevent memory leaks and improve system stability,To ensure processes run at their highest possible priority,To prevent a process from accessing memory it does not own,To optimize memory access speeds through caching,To facilitate faster context switching between processes,C,"The text explicitly states the purpose: ""Prevent process from accessing unowned memory."""
Which two registers are combined to implement memory protection in a contiguous memory allocation scheme?,Index register and program counter,Stack pointer and base register,Relocation register and limit register,General-purpose register and segment register,Instruction register and data register,C,"The text indicates: ""Combine relocation register (smallest physical address) and limit register (range of logical addresses)."""
"In the context of memory protection, what does the relocation register store?",The maximum logical address a process can access,The size of the memory partition allocated to a process,The smallest physical address a process can access,The starting address of the Operating System in memory,The address of the next instruction to be executed by the CPU,C,"The text defines it as: ""relocation register (smallest physical address)""."
What does the limit register specify in the memory protection scheme?,The smallest physical address a process can access,The total amount of available physical memory,The range of logical addresses that a process can access,The maximum number of processes allowed in memory,The size of the physical memory block allocated to the OS,C,"The text defines it as: ""limit register (range of logical addresses)""."
"For memory protection to work, what must be true for every logical address generated by the CPU?",It must be an even number,It must be less than the relocation register value,It must fall within the limit register range,It must be greater than the limit register value,It must directly correspond to a physical address,C,"The text states: ""Each logical address must fall within limit register range."""
How does the Memory Management Unit (MMU) dynamically map a logical address to a physical address in the described protection scheme?,By subtracting the limit register value from the logical address,By multiplying the logical address by the relocation register value,By adding the relocation register value to the logical address,By dividing the logical address by the limit register value,By performing a lookup in a pre-computed address table,C,"The text describes: ""MMU maps logical address dynamically by adding relocation register value."""
When does the CPU scheduler load the relocation and limit registers?,Only at system boot time,Continuously during process execution,During a context switch,Only when a process requests new memory,Once per hour as part of system maintenance,C,"The text specifies: ""CPU scheduler loads relocation and limit registers during context switch."""
What specifically do the relocation and limit registers protect from modification by a running process?,Only the process's own data and code,"Only other user programs, but not the OS",The OS and other user programs/data,CPU registers and system clock,Network interfaces and peripheral devices,C,"The text states: ""Protects OS and other user programs/data from modification by running process."""
What dynamic capability does the relocation-register scheme enable for the operating system?,Dynamic adjustment of process priorities,Dynamic OS size changes,Dynamic allocation of CPU time slices,Dynamic network configuration management,Dynamic file system caching,B,"The text mentions: ""Relocation-register scheme allows dynamic OS size changes."""
"For which type of software is the dynamic nature of the relocation-register scheme particularly desirable, allowing them to be loaded only when needed and removed when no longer needed?",Text editors,Compilers,Web browsers,Device drivers,Database servers,D,"The text highlights this benefit for: ""device drivers: load only when needed, remove when no longer needed."""
What is considered the simplest method for memory allocation where processes are assigned to variably sized partitions?,Assigning multiple processes to fixed-size partitions,Assigning processes to variably sized partitions,Using paging exclusively for all memory allocation,Implementing segmentation without protection,Dividing all memory into equal-sized blocks for all processes,B,"The text describes it as the ""Simplest method: assign processes to variably sized partitions."""
"In a 'variable-partition' memory allocation scheme, how many processes does each memory partition typically contain?",At least two processes to maximize utilization,Exactly one process,A variable number of processes depending on their size,"A fixed number of processes, usually four",No processes if it's currently an available 'hole',B,"The definition states: ""Each partition contains exactly one process (variable-partition scheme)."""
What does the operating system maintain to manage available and occupied memory parts in a variable-partition scheme?,A list of all active processes,A table of available/occupied memory parts,A log of all memory access errors,A cache of frequently used memory addresses,A queue of waiting I/O requests,B,"The text indicates: ""OS keeps table of available/occupied memory parts."""
"When system memory is initially available for user processes in a variable-partition scheme, how is it typically represented?","As many small, fragmented blocks","As a single large block, referred to as a 'hole'",As predefined fixed-size partitions,As an empty table with no entries,As a collection of occupied segments for system processes,B,"The text states: ""Initially: all memory available for user processes, one large block (hole)."""
"If an arriving process requests memory but there isn't enough available, what are the potential actions the OS might take?",Terminate the process immediately to free resources,Reject the process or place it in a wait queue,Force the process to use less memory than requested,Swap another process out to make immediate space,Increase the system's physical memory dynamically,B,"The text specifies: ""Insufficient memory for arriving process: reject or place in wait queue."""
What occurs if the OS allocates a 'hole' that is significantly larger than the memory requested by an arriving process?,"The entire hole is allocated to the process, leading to internal fragmentation",The process is immediately rejected due to inefficient allocation,"The hole is split into two parts: one allocated to the process, and the other returned to the list of holes",The hole is merged with an adjacent hole to form an even larger block,"The OS waits for a smaller, more suitable hole to become available",C,"The text explains: ""If hole too large: split into two parts (one allocated, other returned to holes)."""
"When a process terminates and releases its memory block, what can happen if the newly freed hole is adjacent to existing free holes?",It is immediately reallocated to the next process in the wait queue,It is marked as unusable to prevent further fragmentation,It is merged with the adjacent holes to form a larger contiguous hole,It is swapped out to disk for later use,"It creates a new, separate memory partition",C,"The text describes: ""New hole adjacent to others: merged to form larger hole."""
The procedure of satisfying a memory request of size 'n' from a list of free holes is an instance of what general computer science problem?,The producer-consumer problem,The critical section problem,The dynamic storage-allocation problem,The resource deadlock problem,The paging problem,C,"The text states: ""This procedure: instance of dynamic storage-allocation problem."" The glossary also defines it."
"Which memory allocation strategy involves allocating the first hole that is large enough for a request, typically searching from the beginning or the last search end?",Best-fit,Worst-fit,Next-fit,First-fit,Random-fit,D,"The text defines 'First-fit' as: ""Allocate first hole big enough. Search from beginning or last search end. Stop when large enough hole found."""
"Which memory allocation strategy requires searching the entire list of free holes (unless ordered by size) to find the smallest hole that is large enough for a request, and produces the smallest leftover hole?",First-fit,Worst-fit,Random-fit,Best-fit,Next-fit,D,"The text defines 'Best-fit' as: ""Allocate smallest hole big enough. Must search entire list (unless ordered by size). Produces smallest leftover hole."""
"Which memory allocation strategy involves allocating the largest available hole, potentially producing a large leftover hole?",First-fit,Best-fit,Worst-fit,Random-fit,Next-fit,C,"The text defines 'Worst-fit' as: ""Allocate largest hole. Must search entire list (unless sorted by size). Produces largest leftover hole (may be more useful)."""
"Based on simulations, which memory allocation strategies generally perform better in terms of decreasing time and storage utilization?",Worst-fit is consistently the best overall,First-fit and best-fit are better than worst-fit,"All three (first-fit, best-fit, worst-fit) perform equally well",Best-fit is always faster than first-fit,Only worst-fit shows significant improvement in storage utilization,B,"The text states: ""Simulations: first-fit and best-fit better than worst-fit (decreasing time, storage utilization)."""
"In a comparison between first-fit and best-fit strategies, what is generally true regarding their performance for storage utilization and speed?",Best-fit is clearly better for storage utilization,First-fit is clearly better for storage utilization,"Neither is clearly better for storage utilization, but first-fit is generally faster","Best-fit is generally faster, but results in more fragmentation",First-fit leads to significantly less external fragmentation,C,"The text notes: ""Neither first-fit nor best-fit clearly better for storage utilization, but first-fit generally faster."""
Which memory allocation strategies are specifically mentioned as suffering from external fragmentation?,Only worst-fit,Only first-fit,Only best-fit,First-fit and best-fit,All allocation strategies equally,D,"The text states: ""First-fit and best-fit suffer from external fragmentation."""
"What process leads to free memory being broken into small, non-contiguous pieces, causing external fragmentation?",Continuous memory access by a single process,Frequent CPU scheduling of lightweight processes,Processes being loaded and removed from memory,The system boot-up sequence and OS initialization,High rates of disk I/O operations,C,"The text attributes it to: ""Processes loaded/removed: free memory broken into small pieces."""
What is the definition of 'external fragmentation'?,Unused memory located within a process's allocated partition,"A state where the total memory is insufficient for a process, regardless of contiguity","A condition where available memory has holes that together are enough, but no single hole is large enough for a new request",Memory that is lost or corrupted due to system crashes,Memory being accessed by unauthorized processes or users,C,"The text and glossary define it as: ""External fragmentation: enough total memory, but spaces not contiguous (storage fragmented)."""
What is a key consequence if external fragmentation becomes severe?,Increased CPU utilization due to more efficient memory access,Improved overall system performance and responsiveness,"Wasted memory between processes, preventing new processes from loading despite sufficient total free space",Faster process termination as memory blocks are smaller,Reduced need for context switching between processes,C,"The text states: ""Problem can be severe: wasted memory between processes."" and ""If small pieces were one big block: could run more processes."""
"Besides the chosen allocation strategy (first-fit/best-fit), what other factor is mentioned as influencing the amount of fragmentation?",The CPU clock speed,The total size of the operating system kernel,Which end of the free block is allocated,The type of file system used for storage,The number of active users logged into the system,C,"The text notes: ""Strategy (first-fit/best-fit) affects fragmentation amount. Which end of free block allocated also a factor."""
"According to the text, is external fragmentation a sporadic or constant problem?",A sporadic problem that rarely occurs,A problem only with fixed-partition schemes,A problem only with certain operating systems,Always a problem in dynamic memory allocation,A problem only with very large memory systems,D,"The text explicitly states: ""External fragmentation always a problem."""
"According to the glossary, what is the '50-percent rule'?",A rule stating that 50% of processes must reside in high memory for optimal performance,A statistical finding that fragmentation may result in 50 percent space loss,A rule that allocates exactly 50% of memory to the operating system,A guideline for optimizing CPU utilization by 50%,A principle for equally dividing memory into 50% used and 50% free partitions,B,"The glossary defines: ""50-percent rule: Statistical finding that fragmentation may result in 50 percent space loss."""
"What is the practical consequence of the '50-percent rule' regarding memory usability, as described in the text?",Half of the total memory becomes inaccessible,Two-thirds of the memory becomes unusable,One-third of the memory may become unusable due to fragmentation,"No memory is lost, but access speeds are significantly reduced",All memory is eventually compacted to eliminate fragmentation,C,"The text specifies: ""50-percent rule: one-third of memory unusable."""
What are the two general types of memory fragmentation mentioned in the text?,Logical and physical fragmentation,Contiguous and noncontiguous fragmentation,Internal and external fragmentation,Active and passive fragmentation,Foreground and background fragmentation,C,"The text states: ""Memory fragmentation: internal and external."""
What is the definition of 'internal fragmentation'?,Memory that is inaccessible to the Operating System,Free memory scattered in small pieces between processes,Unused memory located within a process's allocated partition,Memory that has been corrupted by a faulty process,Memory exclusively allocated to system buffers,C,"The text and glossary define it as: ""Internal fragmentation: unused memory internal to a partition."""
Under what condition does internal fragmentation typically occur?,When a process terminates and releases its memory block,When the OS cannot find a large enough contiguous hole for a process,"When allocated memory is slightly larger than requested, such as with fixed-sized blocks",When processes are frequently swapped between main memory and disk,When a process attempts to access memory it does not own,C,"The text explains: ""Occurs when allocated memory slightly larger than requested (e.g., fixed-sized blocks)."""
What is the primary goal of 'compaction' as a solution to external fragmentation?,To reduce the total amount of physical memory available,"To shuffle memory contents, placing all free memory together in one large block",To compress data within memory to save space,To merge small processes into larger ones for efficiency,To defragment disk space rather than main memory,B,"The text defines its goal as: ""shuffle memory contents, place all free memory together in one large block."""
Under what specific condition is compaction possible as a solution to external fragmentation?,Only if relocation is static (assembly or load time),"Regardless of the type of relocation, it is always possible",Only if relocation is dynamic (execution time),Only if memory is partitioned into fixed-size blocks,Only if the system has an abundant amount of free memory,C,"The text explicitly states: ""Compaction not always possible: If relocation static (assembly/load time): cannot compact. Possible only if relocation dynamic (execution time)."""
"If dynamic relocation is supported, what actions are taken during compaction to achieve its goal?",The entire memory is reset to its initial empty state,"Program and data are moved, and the base register is changed",New physical memory is added to the system dynamically,Logical addresses are remapped at compile time,Only system files and kernel modules are moved to one end,B,"The text describes: ""If dynamic relocation: move program/data, change base register."""
What is a potential disadvantage or cost associated with performing memory compaction?,It significantly increases internal fragmentation,"It can be an expensive operation, requiring substantial CPU time",It makes memory protection more difficult to implement,It permanently reduces the overall memory capacity of the system,It requires frequent system reboots to be effective,B,"The text warns: ""Compaction can be expensive (e.g., move all processes to one end)."""
"What is an alternative solution to external fragmentation, besides compaction, mentioned in the text?",Implementing larger physical memory modules,Requiring all processes to be of a fixed size,Eliminating the need for memory protection mechanisms,Permitting noncontiguous logical address space,Reducing the number of concurrent processes allowed in memory,D,"The text introduces: ""Another solution to external fragmentation: permit noncontiguous logical address space."""
Which common memory-management technique allows a process to be allocated physical memory wherever available by permitting noncontiguous logical address space?,Swapping,Segmentation,Contiguous allocation,Paging,Overlays,D,"The text specifies: ""Allows process to be allocated physical memory wherever available. Strategy used in paging (most common memory-management technique)."""
"Is fragmentation a problem specific only to memory management, or is it a broader issue?","Yes, it only occurs in main memory allocation","No, it's a general problem found in various aspects of computing",It's only a problem with contiguous memory allocation schemes,It's a problem exclusive to older operating systems,It's primarily a problem when using Solid State Drives (SSDs),B,"The text concludes: ""Fragmentation: general problem in computing (storage management chapters)."""
