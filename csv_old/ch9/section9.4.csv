Question,Option A,Option B,Option C,Option D,Option E,Answer,Explanation
"What are the three common techniques for structuring the page table in modern computer systems, as described in the text?","Linear paging, segmented paging, and virtual paging.","Hierarchical paging, hashed page tables, and inverted page tables.","Direct mapping, associative mapping, and set-associative mapping.","Single-level paging, multi-level paging, and clustered paging.","Demand paging, pre-paging, and prepaging.",B,"The text explicitly states: 'Explores common techniques for structuring the page table: hierarchical paging, hashed page tables, and inverted page tables.'"
The need for hierarchical paging in modern computer systems primarily arises due to which of the following challenges?,The difficulty in implementing Translation Lookaside Buffers (TLBs) for 32-bit systems.,The excessive size of page tables caused by large logical address spaces.,The requirement for faster context switching between processes.,The need to support only contiguous memory allocations for processes.,The complexity of managing physical memory fragmentation.,B,The text explains that 'Modern computer systems support large logical address spaces ($2^{32}$ to $2^{64}$)' which causes the 'Page table itself becomes excessively large.' Hierarchical paging is a 'Solution: divide page table into smaller pieces.'
"For a 32-bit logical address space and a 4 KB page size ($2^{12}$ bytes), approximately how many entries would a single-level page table require?",$2^{10}$ entries,$2^{12}$ entries,$2^{20}$ entries,$2^{32}$ entries,$2^{64}$ entries,C,"A 32-bit logical address space means $2^{32}$ bytes. With a 4 KB page size ($2^{12}$ bytes), the number of pages is $2^{32} / 2^{12} = 2^{20}$. Each page corresponds to one entry in the page table."
"In a 32-bit logical address space with a 4 KB page size, if each page table entry is 4 bytes, how much physical address space could a single process's page table consume?",Up to 4 KB,Up to 1 MB,Up to 4 MB,Up to 16 MB,Up to 1 GB,C,"A 32-bit logical address space with 4 KB pages results in $2^{20}$ page table entries. With each entry being 4 bytes, the total size is $2^{20} 	imes 4$ bytes = $2^{20} 	imes 2^2$ bytes = $2^{22}$ bytes, which is 4 MB."
What is the fundamental principle behind a two-level paging algorithm?,The logical address space is divided into two equal parts.,The page table itself is paged.,Two separate TLBs are used for faster lookups.,Physical memory is divided into two distinct regions.,Virtual addresses are translated in two independent stages.,B,The text states that the 'Two-level paging algorithm' means 'page table itself is paged.'
"In a two-level paging scheme for a 32-bit logical address space with a 4 KB page size, how is the 20-bit page number typically divided?",10 bits for $p_1$ (outer page number) and 10 bits for $p_2$ (inner page offset).,12 bits for $p_1$ (outer page number) and 8 bits for $p_2$ (inner page offset).,8 bits for $p_1$ (outer page number) and 12 bits for $p_2$ (inner page offset).,15 bits for $p_1$ (outer page number) and 5 bits for $p_2$ (inner page offset).,10 bits for $p_1$ (inner page offset) and 10 bits for $p_2$ (outer page number).,A,The text specifies: 'Page number further divided: $p_1$: 10-bit outer page number (index into outer page table). $p_2$: 10-bit inner page offset (displacement within inner page table).'
What is another name for a hierarchical page table where address translation begins at the outermost page table and proceeds inward?,Inverted page table.,Hashed page table.,Clustered page table.,Forward-mapped page table.,Segmented page table.,D,The glossary defines 'forward-mapped' as: 'Scheme for hierarchical page tables where address translation starts at the outer page table and moves inward.' The main text also mentions: 'Also known as a forward-mapped page table.'
Why are two-level paging schemes considered inappropriate for 64-bit logical address spaces?,They require an excessive number of TLB entries.,The page offset becomes too large to manage effectively.,"Even with two levels, the outer page table remains excessively large, potentially gigabytes in size.",They introduce too many page faults due to inefficient memory access patterns.,64-bit systems do not use page tables for address translation.,C,"For 64-bit logical address spaces, the text states 'two-level paging scheme inappropriate' and provides an example where 'Outer page table: still $2^{42}$ entries, or $2^{44}$ bytes (16 GB)', which is excessively large."
"For a 64-bit logical address space with a 4 KB page size, what is the approximate size of the outer page table in a two-level paging scheme, considering each entry is 4 bytes?",$2^{10}$ bytes (1 KB),$2^{12}$ bytes (4 KB),$2^{20}$ bytes (1 MB),$2^{44}$ bytes (16 GB),$2^{52}$ bytes,D,"The text specifically gives this example: 'Outer page table: still $2^{42}$ entries, or $2^{44}$ bytes (16 GB).'"
"Based on the text, what is the general conclusion regarding the suitability of hierarchical page tables for 64-bit architectures?",They are highly efficient and are the preferred method.,They are only suitable if combined with extremely large TLBs.,They are generally inappropriate due to the prohibitive number of memory accesses required.,They are the only viable solution for managing 64-bit address spaces.,They require a minimum of ten levels of paging to be effective.,C,The text concludes: 'Hierarchical page tables generally inappropriate for 64-bit architectures' and mentions a 64-bit UltraSPARC 'would require seven levels of paging (prohibitive memory accesses).'
Hashed page tables are primarily introduced as an approach for handling which type of address spaces?,"Small, contiguous address spaces.",Address spaces larger than 32 bits.,Address spaces with strict security requirements.,Address spaces that do not require virtual memory.,Address spaces used only by kernel processes.,B,The text states: 'Approach for handling address spaces larger than 32 bits.'
"In a hashed page table, what serves as the hash value used to index into the hash table?",The physical page number.,The page offset.,The process ID.,The virtual page number.,The Translation Lookaside Buffer (TLB) entry.,D,The text states: 'Hash value: virtual page number.'
How do hashed page tables typically handle collisions when multiple virtual page numbers hash to the same location?,By discarding the colliding entries.,By using a secondary hash function.,By storing multiple entries directly in the hash table slot.,By using a linked list of elements at each hash table entry.,By re-hashing the entire table.,D,The text states: 'Each entry in hash table: linked list of elements (to handle collisions).'
What three fields are typically included in each element of the linked list within a hashed page table entry?,"Process ID, page size, and a timestamp.","Virtual page number, value of mapped page frame, and pointer to the next element.","Physical address, cache line number, and a flag for dirty pages.","Page fault count, TLB hit rate, and a reference bit.","Virtual address, page table entry size, and protection bits.",B,The text lists the three fields as: '1. Virtual page number. 2. Value of mapped page frame. 3. Pointer to next element in linked list.'
"According to the described algorithm for hashed page tables, what is the first step in translating a virtual address?",Search the Translation Lookaside Buffer (TLB).,Compare the virtual page number with field 1 in the first element of the linked list.,Hash the virtual page number in the virtual address into the hash table.,Retrieve the corresponding page frame from the physical memory.,Check for a match in the inner page table.,C,The algorithm description begins: 'Virtual page number in virtual address hashed into hash table.'
What is a key distinguishing characteristic of clustered page tables compared to standard hashed page tables?,They use a hierarchical structure instead of a flat hash table.,"Each entry refers to a single page, but with enhanced security.","Each entry refers to several pages (e.g., 16) instead of a single page.",They are only used for 32-bit address spaces.,They do not require a hash function for lookups.,C,"The text states: 'Each entry refers to several pages (e.g., 16) instead of a single page.'"
For which type of address spaces are clustered page tables particularly useful?,Contiguous address spaces where memory references are sequential.,Dense address spaces with very few unallocated regions.,Sparse address spaces where memory references are noncontiguous and scattered.,Address spaces used exclusively for kernel code.,Small address spaces where memory optimization is not critical.,C,"The text indicates they are 'Useful for sparse address spaces (memory references noncontiguous, scattered).'"
"In memory management, what does the term ""sparse"" describe with respect to an address space?",An address space with only a few allocated pages.,An address space where all memory references are contiguous.,An address space that is fully utilized with no free space.,An address space where page table entries are noncontiguous and scattered; an address space with many holes.,An address space that is specifically designed for multi-level paging.,D,"The glossary defines 'sparse' as: 'In memory management, describes a page table with noncontiguous, scattered entries; an address space with many holes.'"
What major drawback of standard page tables does the inverted page table scheme aim to alleviate?,The inability to support shared memory between processes.,The high computational cost of hash function calculations.,The consumption of large amounts of physical memory by potentially millions of entries per process's page table.,The increased time required for address translation lookups.,The difficulty in implementing them in hardware.,C,"The text states: 'Drawback [of standard page tables]: each page table may consist of millions of entries, consuming large amounts of physical memory.' The inverted page table is presented as a solution to this."
"In an inverted page table system, how many entries are there typically in the page table itself?",One entry for each logical page of a process.,One entry for each virtual address in the system.,One entry for each real physical page (frame) of memory.,One entry for each process currently running.,One entry for each CPU core in the system.,C,"The text defines an 'inverted page table' as having 'one entry for each real page (frame) of memory' and 'Only one page table in system, one entry per physical memory page.'"
What information is typically stored in an entry of an inverted page table?,The physical address of the page frame.,"The virtual address of the page stored in that real memory location, plus process information.",Only the process ID and a pointer to the next entry.,The page size and protection bits.,The number of times the page has been accessed.,B,"The text states: 'Each entry: virtual address of page stored in that real memory location, plus process information.'"
"In the simplified IBM RT inverted page table version, if a memory reference `<process-id, page-number>` is presented to the memory subsystem and a match is found at entry `i` in the inverted page table, how is the physical address generated?","The physical address is `<process-id, i>`.","The physical address is `<page-number, offset>`.","The physical address is `<i, offset>`.",The physical address is retrieved directly from the entry `i`.,An illegal address access is declared.,C,"The text describes: 'Match at entry $i$: physical address `<i, offset>` generated.'"
What is considered a primary drawback of inverted page tables regarding search efficiency?,They always require multiple TLB lookups.,They significantly increase the time to search the table because lookups are by virtual address but the table is implicitly sorted by physical address.,They cannot handle page faults efficiently.,"They are prone to collisions, which slows down access.",They make it difficult to determine if a page is dirty or not.,B,"The text states: 'Drawback: increases time to search table (sorted by physical address, lookups by virtual address).'"
What common technique is employed to alleviate the search time drawback of inverted page tables?,Implementing a multi-level paging scheme.,Using a hash table to limit the search.,Increasing the page size to reduce the number of entries.,Storing the inverted page table entirely in the CPU cache.,Converting the inverted page table to a forward-mapped table.,B,The text states: 'Alleviation: use a hash table to limit search.'
"When an inverted page table uses a hash table to speed up searches, how many real memory reads are required for a single virtual memory reference translation (excluding TLB hits)?",One real memory read (for the page table entry).,At least two real memory reads (hash-table entry + page table entry).,Three real memory reads (hash-table entry + two page table entries).,Four or more real memory reads depending on collisions.,Zero real memory reads if the hash table is in cache.,B,The text states: 'Each access to hash table adds memory reference: one virtual memory reference requires at least two real memory reads (hash-table entry + page table).'
How do inverted page tables typically complicate shared memory compared to standard paging?,They make it impossible for processes to share memory.,"They allow multiple virtual addresses to map to the same physical address, causing ambiguity.","They only allow one virtual page entry for every physical page, meaning a physical page cannot easily have two or more shared virtual addresses without issues.",They require a separate inverted page table for each shared memory segment.,They cause page faults when a process attempts to write to a shared memory page.,C,"The text explains: 'Inverted page tables: only one virtual page entry for every physical page. One physical page cannot have two (or more) shared virtual addresses. Reference by another process sharing memory: page fault, replaces mapping.'"
How does Oracle SPARC Solaris efficiently solve the virtual memory problem for its 64-bit architecture?,By implementing an advanced seven-level hierarchical paging scheme.,By using a highly optimized inverted page table with direct hardware support.,By utilizing hashed page tables.,By relying solely on a very large Translation Lookaside Buffer (TLB).,By employing a segmented memory management approach.,C,The text states: 'Solves virtual memory problem efficiently using hashed page tables.'
How many hash tables does Solaris on a SPARC CPU typically use for virtual to physical memory mapping?,One single hash table for all memory.,Two hash tables: one for kernel processes and one for all user processes.,A separate hash table for each running process.,"Three hash tables: one for data, one for code, and one for stack.",Only one hash table that serves as the TSB.,B,"The text states: 'Two hash tables: one for kernel, one for all user processes.'"
What feature of hash table entries in Solaris on SPARC makes them more efficient than a per-page entry system?,Each entry stores only the virtual page number.,"Each entry represents a single, fixed-size page.",Each entry stores the physical address directly without a lookup.,Each entry represents a contiguous area of mapped virtual memory with a base address and span.,Each entry includes a complete copy of the TLB.,D,The text notes: 'Each hash-table entry: contiguous area of mapped virtual memory (more efficient than per-page entry). Entry has base address and span (number of pages represented).'
What is the purpose of the Translation Storage Buffer (TSB) in Oracle SPARC Solaris?,It is the main page table for all kernel processes.,"It serves as a cache of Translation Table Entries (TTEs) for recently accessed pages, located in memory.",It is a hardware component that performs address translation without involving software.,It stores only the process IDs for active processes.,"It is a buffer for I/O operations, not related to virtual memory.",B,The text describes TSB as 'Cache of TTEs' and 'TSB includes entry per recently accessed page.'
"In the Oracle SPARC Solaris virtual address reference process (TLB walk), what is the very first step the hardware takes to find a translation?",It immediately interrupts the kernel to search the hash table.,It searches the in-memory Translation Storage Buffer (TSB).,It searches the Translation Lookaside Buffer (TLB) for the translation.,It performs a direct lookup in the main page table.,It checks the physical memory directly.,C,The first step listed is: 'Hardware searches TLB for translation.'
"If the hardware does not find a translation in the TLB during a virtual address reference in Oracle SPARC Solaris, what is the next step?",The CPU immediately generates a page fault.,The hardware walks through the in-memory Translation Storage Buffer (TSB) for the Translation Table Entry (TTE).,The operating system creates a new TTE from scratch.,The CPU accesses the main disk to find the entry.,The process is immediately terminated.,B,The second step listed is: 'None found: hardware walks through in-memory TSB for TTE. (TLB walk)'
Under what specific condition is the kernel interrupted during the virtual address translation process in Oracle SPARC Solaris?,When the hardware successfully finds a TTE in the TLB.,When the hardware finds a TTE in the TSB.,When no match is found for the TTE in both the TLB and the TSB.,When the physical memory is full.,When the process attempts to access a protected memory region.,C,The text states: 'No match in TSB: kernel interrupted to search hash table.'
"If the kernel is interrupted during a TLB walk in Oracle SPARC Solaris (due to a miss in both TLB and TSB), what is the kernel's primary responsibility?",To terminate the process causing the miss.,To load the entire hash table into the TSB.,To create the Translation Table Entry (TTE) from the hash table and store it in the TSB.,To flush the entire TLB and TSB.,To notify other processes of the memory access failure.,C,"The text states: 'Kernel creates TTE from hash table, stores in TSB for automatic loading into TLB by MMU.'"
"According to the glossary, what is the definition of a ""TLB walk""?",The process of the CPU moving data from the TLB to main memory.,The steps involved in traversing page-table structures to locate a needed translation and copying the result into the TLB.,A hardware operation that refreshes the TLB entries periodically.,The act of a user program explicitly requesting a TLB flush.,The sequence of events when a TLB entry is replaced due to a new memory access pattern.,B,The glossary defines 'TLB walk' as: 'Steps involved in traversing page-table structures to locate a needed translation and copying the result into the TLB.'
Which term describes a scheme for hierarchical page tables where address translation starts at the outer page table and moves inward?,Inverted mapping.,Backward-mapped.,Direct-mapped.,Forward-mapped.,Clustered mapping.,D,The glossary defines 'forward-mapped' as: 'Scheme for hierarchical page tables where address translation starts at the outer page table and moves inward.'
"A page table that is hashed for faster access, where the hash value is specifically the virtual page number, is known as a:",Hierarchical page table.,Inverted page table.,Forward-mapped page table.,Hashed page table.,Clustered page table.,D,The glossary defines 'hashed page table' as: 'A page table that is hashed for faster access; the hash value is the virtual page number.'
What type of page table is similar to a hashed page table but distinguishes itself by having an entry refer to a cluster of several pages rather than a single page?,Inverted page table.,Hierarchical page table.,Clustered page table.,Segmented page table.,Sparse page table.,C,"The glossary defines 'clustered page table' as: 'Similar to a hashed page table, but an entry refers to a cluster of several pages.'"
"Which page table scheme features one entry for each real physical page frame in memory, mapping to a logical page (virtual address) value?",Hierarchical page table.,Hashed page table.,Inverted page table.,Forward-mapped page table.,Clustered page table.,C,"The glossary defines 'inverted page table' as: 'A page-table scheme with one entry for each real physical page frame in memory, mapping to a logical page (virtual address) value.'"
"Which of the following best describes Solaris, as mentioned in the text?",A proprietary database management system by Oracle.,A type of RISC CPU architecture created by Sun Microsystems.,"A UNIX derivative, main operating system of Sun Microsystems (now Oracle); active open source version called Illumos.",An open-source project for developing new paging algorithms.,A network protocol for distributed computing.,C,"The glossary defines 'Solaris' as: 'A UNIX derivative, main operating system of Sun Microsystems (now Oracle); active open source version called Illumos.'"
What does SPARC refer to in the context of the provided text?,A type of specialized memory module.,A proprietary RISC CPU created by Sun Microsystems (now Oracle); active open source version called OpenSPARC.,An operating system designed for embedded systems.,A standard for inter-process communication.,A software framework for virtual machine management.,B,The glossary defines 'SPARC' as: 'A proprietary RISC CPU created by Sun Microsystems (now Oracle); active open source version called OpenSPARC.'
